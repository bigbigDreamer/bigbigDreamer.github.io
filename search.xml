<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>记一次Github Actions自动化部署实践</title>
    <url>/article/github-ci/</url>
    <content><![CDATA[<p>写在前面的话，事情应该发生在去年我换电脑的时候，因为博客使用<code>hexo</code>搭建的，所以源代码也就都遗留在了本地，每次发布的时候只提交<code>generator</code>之后剩余的静态资源文件。</p>
<p>但是换完电脑忘记拷贝源代码了，所以给自己埋的坑就是原来写的博客源文件全部遗失。不过没关系，正好我有重头开始的准备。</p>
<p>这不，<code>Github Action</code>出现了，从根本上解决了我的痛点。</p>
<h2 id="认知储备"><a href="#认知储备" class="headerlink" title="认知储备"></a>认知储备</h2><h4 id="什么是Github-Actions？"><a href="#什么是Github-Actions？" class="headerlink" title="什么是Github Actions？"></a>什么是<code>Github Actions</code>？</h4><p><img src="https://user-images.githubusercontent.com/39019913/95061791-a7339e00-072e-11eb-96f9-2521d83105f0.png" alt="alt"></p>
<p>直接点击传送门，看看阮一峰大佬的<a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">Github Actions 入门教程</a>;</p>
<h4 id="git公钥、私钥的理解"><a href="#git公钥、私钥的理解" class="headerlink" title="git公钥、私钥的理解"></a><code>git</code>公钥、私钥的理解</h4><p><code>git</code>的公钥与私钥好比钥匙与锁的关系，一个公钥对应一个私钥。</p>
<p>如何生成？</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&#x27;your email&#x27;</span></span><br></pre></td></tr></table></figure>
<p>会有两个文件，一个文件是<code>xxx.pub</code>是公钥，<code>xxx</code>是私钥与之对应。</p>
<p>具体解释，参见<a href="https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E7%94%9F%E6%88%90-SSH-%E5%85%AC%E9%92%A5"> 服务器上的 Git - 生成 SSH 公钥</a></p>
<h4 id="怎么理解Hexo博客自动部署？"><a href="#怎么理解Hexo博客自动部署？" class="headerlink" title="怎么理解Hexo博客自动部署？"></a>怎么理解<code>Hexo</code>博客自动部署？</h4><p>简单来讲就是借助<code>Github Actions</code>所提供的虚拟机环境，读取<code>博客源仓库</code>所携带的私钥，写入虚拟机环境的<code>~/.ssh/id_rsa</code>，保证正常<code>push</code>可以有权限进行。而对应的公钥则是保留在目标仓库里面。</p>
<p>其实核心操作还是<code>Hexo</code>提供的<code>deploy commond</code>;</p>
<blockquote>
<p>当执行 <code>hexo deploy</code> 时，<code>Hexo</code> 会将 <code>public</code> 目录中的文件和目录推送至 <code>_config.yml</code> 中指定的远端仓库和分支中，并且完全覆盖该分支下的已有内容。</p>
</blockquote>
<iframe width="100%" height="450" src="https://www.youtube.com/embed/B0yVJ46CTR8" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<p>参见<a href="https://hexo.io/zh-cn/docs/one-command-deployment.html">hexo官方文档-部署</a></p>
<h2 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h2><p>文章假设你已经准备好了两个仓库<code>blog（应该设置为私有仓库，毕竟一些隐私密码都会存在这里）</code>and<code>xxx.github.io</code>。前者用于存放hexo博客源代码，后者用于自动部署的仓库。</p>
<p>绑定公钥与私钥，<code>公钥</code>—–&gt;<code>xxx.github.io</code>，<code>私钥</code>—–&gt;<code>blog</code>；</p>
<p>下图应该详细阐述了怎么绑定公钥与私钥~<br><img src="https://user-images.githubusercontent.com/39019913/95065127-3478f180-0733-11eb-935e-52a5c21df7d6.png"></p>
<h2 id="编写Github-Actions-workflow-file"><a href="#编写Github-Actions-workflow-file" class="headerlink" title="编写Github Actions workflow file"></a>编写<code>Github Actions workflow file</code></h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">Blog</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>] <span class="comment"># 当有新push时运行</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build-and-deploy:</span> <span class="comment"># 创建job</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span> <span class="comment"># 在最新版的Ubuntu系统下运行</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="comment"># 将仓库内master分支的内容下载到工作目录</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span> <span class="comment"># 脚本来自 https://github.com/actions/checkout</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="number">10.</span><span class="string">x</span> <span class="comment"># 配置Node环境</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span> <span class="comment"># 配置脚本来自 https://github.com/actions/setup-node</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&quot;10.x&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Hexo</span> <span class="string">Env</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="attr">ACTION_DEPLOY_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span> <span class="comment"># 拿到仓库配置的私钥：HEXO_DEPLOY_KEY</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="comment"># set up private key for push code</span></span><br><span class="line">        <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.ssh/</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;$ACTION_DEPLOY_KEY&quot;</span> <span class="string">&gt;</span> <span class="string">~/.ssh/id_rsa</span> <span class="comment"># 配置秘钥</span></span><br><span class="line">        <span class="string">chmod</span> <span class="number">700</span> <span class="string">~/.ssh</span></span><br><span class="line">        <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">        <span class="string">ssh-keyscan</span> <span class="string">github.com</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">        <span class="comment"># set git config</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&quot;your name&quot;</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;your email&quot;</span></span><br><span class="line">        <span class="comment"># install dependencies</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">i</span> <span class="string">-g</span> <span class="string">hexo-cli</span> <span class="comment"># 安装hexo</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">i</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">Deploy</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="comment"># deploy and automatic push code</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">generate</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">deploy</span> <span class="comment"># 执行部署程序</span></span><br></pre></td></tr></table></figure>

<p><em>温馨提示：</em> 别懵了啊，这个文件是在<code>blog</code>仓库下建立的。</p>
<p><img src="https://user-images.githubusercontent.com/39019913/95066240-b74e7c00-0734-11eb-8d97-25a9746f4d8f.png" alt="alt"></p>
<h2 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h2><p>最后，来看看我们的成果吧~</p>
<p><img src="https://user-images.githubusercontent.com/39019913/95066453-04cae900-0735-11eb-8238-94a83b699c47.png" alt="alt"></p>
<p><img src="https://user-images.githubusercontent.com/39019913/95066607-3479f100-0735-11eb-9c79-e7669cadeac3.png" alt="alt"></p>
<p>有没有视觉疲劳呢？来放松一下吧~</p>
<p><img src="https://user-images.githubusercontent.com/39019913/95066764-6ab77080-0735-11eb-90c9-2c840a70f51d.png" alt="alt"></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>经验</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>由reduce引发的Promise决议思考</title>
    <url>/article/reduce-to-promise/</url>
    <content><![CDATA[<h2 id="reduce有哪些奇淫巧技？"><a href="#reduce有哪些奇淫巧技？" class="headerlink" title="reduce有哪些奇淫巧技？"></a><code>reduce</code>有哪些<code>奇淫巧技</code>？</h2><ul>
<li>最基本的累加数</li>
<li>数组转对象</li>
<li>顺序执行异步任务</li>
</ul>
<p>本文不再阐述一些比较官方的话语。</p>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce"><code>reduce</code>方法的MDN传送门</a></p>
</blockquote>
<h3 id="最基本的累加"><a href="#最基本的累加" class="headerlink" title="最基本的累加"></a>最基本的累加</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> addResult = arr.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a+b);</span><br></pre></td></tr></table></figure>

<h3 id="数组转对象"><a href="#数组转对象" class="headerlink" title="数组转对象"></a>数组转对象</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用过 loadsh 的小伙伴都应该知道，lodash 提供了_keyBy 提供了这样的功能</span></span><br><span class="line"><span class="keyword">const</span> data = [&#123;</span><br><span class="line">    name: <span class="string">&#x27;张飒&#x27;</span>,</span><br><span class="line">    id: <span class="number">1</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    name: <span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line">    id: <span class="number">2</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    name: <span class="string">&#x27;赵柳&#x27;</span>,</span><br><span class="line">    id: <span class="number">3</span></span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> targetObj = data.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123; ...a, &#123; [b.id]: b &#125; &#125;, &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// console</span></span><br><span class="line"><span class="comment">// &#123; 1: &#123; name: &#x27;张飒&#x27;, id: 1 &#125;, 2: &#123; name: &#x27;李四&#x27;, id: 2 &#125;, 3: &#123; name: &#x27;赵柳&#x27;, id: 3 &#125;&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="顺序执行异步任务"><a href="#顺序执行异步任务" class="headerlink" title="顺序执行异步任务"></a>顺序执行异步任务</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PromiseTaskA = <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123; <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;即将执行A&#x27;</span>);</span><br><span class="line">    resolve(<span class="string">&#x27;PromiseTaskA&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">2000</span>) &#125;)</span><br><span class="line"><span class="keyword">const</span> PromiseTaskB = <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123; <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;即将执行B&#x27;</span>);</span><br><span class="line">    resolve(<span class="string">&#x27;PromiseTaskB&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">2000</span>) &#125;)</span><br><span class="line"><span class="keyword">const</span> PromiseTaskC = <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123; <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;即将执行C&#x27;</span>);</span><br><span class="line">    resolve(<span class="string">&#x27;PromiseTaskC&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>) &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tasks = [PromiseTaskA, PromiseTaskC, PromiseTaskB];</span><br><span class="line">tasks.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a, <span class="string">&#x27;00&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> a.then(<span class="function">() =&gt;</span> b())</span><br><span class="line">&#125;, <span class="built_in">Promise</span>.resolve(&#123;&#125;) )</span><br><span class="line">    .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;all done&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log</span></span><br><span class="line"><span class="comment">// Promise &#123; &#123;&#125; &#125; 00</span></span><br><span class="line"><span class="comment">// Promise &#123; &lt;pending&gt; &#125; 00</span></span><br><span class="line"><span class="comment">// Promise &#123; &lt;pending&gt; &#125; 00</span></span><br><span class="line"><span class="comment">// 即将执行A</span></span><br><span class="line"><span class="comment">// 即将执行C</span></span><br><span class="line"><span class="comment">// 即将执行B</span></span><br><span class="line"><span class="comment">// all done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当到这里的时候，我突然联想到一个问题，<code>Promise.all</code>是顺序执行的吗？为什么他可以在<code>then</code>里对应传入异步任务数组返回相应的结果？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PromiseTaskA = <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123; <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;即将执行A&#x27;</span>);</span><br><span class="line">    resolve(<span class="string">&#x27;PromiseTaskA&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">2000</span>) &#125;)</span><br><span class="line"><span class="keyword">const</span> PromiseTaskB = <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123; <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;即将执行B&#x27;</span>);</span><br><span class="line">    resolve(<span class="string">&#x27;PromiseTaskB&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">2000</span>) &#125;)</span><br><span class="line"><span class="keyword">const</span> PromiseTaskC = <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123; <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;即将执行C&#x27;</span>);</span><br><span class="line">    resolve(<span class="string">&#x27;PromiseTaskC&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>) &#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([PromiseTaskA(), PromiseTaskB(), PromiseTaskC()])</span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// console</span></span><br><span class="line"><span class="comment">// 即将执行C</span></span><br><span class="line"><span class="comment">// 即将执行A</span></span><br><span class="line"><span class="comment">// 即将执行B</span></span><br><span class="line"><span class="comment">// [ &#x27;PromiseTaskA&#x27;, &#x27;PromiseTaskB&#x27;, &#x27;PromiseTaskC&#x27; ]</span></span><br></pre></td></tr></table></figure>

<p>原因很简单，<code>Promise.all</code>是并行的，也就是宏观意义上的并行，也可以说是同时执行，当哪个异步任务执行结束，就把对应的执行结果塞进数组内部，所以就可以实现结果对应。</p>
<p><code>Promise.all</code>并不会顺序执行，请不要依赖<code>Promise.all</code>去做顺序执行流程任务。</p>
<blockquote>
<p>问题又来了？怎么保证<code>Promise</code>的执行尽管失败了，但是<code>Promise.all</code>并不会中断？</p>
</blockquote>
<p>其实也很好解决，把异步任务的<code>catch</code>给<code>resolve出来</code>，保证整个并行任务流的正常运行。</p>
<blockquote>
<p>扩展一个知识点，<code>Promise</code>为什么会发生值透传？</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="number">1</span>)</span><br><span class="line">.then(<span class="number">3</span>)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// console？</span></span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p>原因也很简单，因为<code>Promise</code>的<code>then</code>、<code>catch</code>期望的是一个函数，如果出现<code>!Function</code>就会发生透传。</p>
<blockquote>
<p>继续扩展一个知识点，<code>Promise</code>是微任务吗？<code>then</code>是同步还是异步的。</p>
</blockquote>
<p><code>Promise</code>构造函数是同步的，<code>then</code>、<code>catch</code>也是同步的，但是内部的<code>callback</code>被扔进了异步队列里。</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>经验</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>堆</title>
    <url>/article/js-heap/</url>
    <content><![CDATA[<h1 id="堆是什么？"><a href="#堆是什么？" class="headerlink" title="堆是什么？"></a>堆是什么？</h1><p>堆是一种特殊的完全二叉树</p>
<p>每层节点都全部填满，如果没有填满，则只缺少右侧的若干节点。</p>
<p>最小堆：父节点都比子节点小</p>
<p>最大堆：父节点都比子节点大</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>树</title>
    <url>/article/js-tree/</url>
    <content><![CDATA[<h2 id="树是什么？"><a href="#树是什么？" class="headerlink" title="树是什么？"></a>树是什么？</h2><ul>
<li><code>JS</code>中没有树，但是可以用<code>Object</code>和<code>Array</code>构建树；</li>
<li>树的常用操作<ul>
<li>深度优先遍历</li>
<li>广度优先遍历</li>
<li>先、中、后序遍历</li>
</ul>
</li>
</ul>
<h2 id="深度优先遍历：尽可能深的搜索树的分支。-DFS"><a href="#深度优先遍历：尽可能深的搜索树的分支。-DFS" class="headerlink" title="深度优先遍历：尽可能深的搜索树的分支。(DFS)"></a>深度优先遍历：尽可能深的搜索树的分支。(<code>DFS</code>)</h2><p><img src="https://user-images.githubusercontent.com/39019913/95301390-20f49480-08b3-11eb-9bee-89a5929bb3cf.png" alt="alt"></p>
<p>武功心法：访问根节点—对根节点的<code>children</code>挨个进行深度优先遍历。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> tree = &#123;</span><br><span class="line">    val: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    children: [</span><br><span class="line">        &#123;</span><br><span class="line">            val: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">            children: [</span><br><span class="line">                &#123;</span><br><span class="line">                    val: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">                    children: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            val: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">                            children: []</span><br><span class="line">                        &#125;, &#123;</span><br><span class="line">                            val: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">                            children: []</span><br><span class="line">                        &#125;,</span><br><span class="line">                    ],</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            val: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">            children: []</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dfs = <span class="function"><span class="params">root</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(root.val)</span><br><span class="line">    root.children.forEach(dfs)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dfs(tree)</span><br><span class="line"><span class="comment">// console</span></span><br><span class="line"><span class="comment">/* a</span></span><br><span class="line"><span class="comment">   1</span></span><br><span class="line"><span class="comment">   b</span></span><br><span class="line"><span class="comment">   1</span></span><br><span class="line"><span class="comment">   2</span></span><br><span class="line"><span class="comment">   2 */</span></span><br></pre></td></tr></table></figure>

<h2 id="广度优先遍历：先访问距离根节点最近的节点。-BFS"><a href="#广度优先遍历：先访问距离根节点最近的节点。-BFS" class="headerlink" title="广度优先遍历：先访问距离根节点最近的节点。(BFS)"></a>广度优先遍历：先访问距离根节点最近的节点。(<code>BFS</code>)</h2><p><img src="https://user-images.githubusercontent.com/39019913/95301390-20f49480-08b3-11eb-9bee-89a5929bb3cf.png" alt="alt"></p>
<p>武功心法：<br>    - 新建一个队列，根节点入队<br>    - 队头出队并访问<br>    - 队头的children挨个入队<br>    - 重复第二、三步，直到队列为空</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> bfs = <span class="function"><span class="params">root</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> q = [root];</span><br><span class="line">    <span class="keyword">while</span> (q.length &gt;<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> n = q.shift();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;bfs&#x27;</span>,n.val);</span><br><span class="line">        n.children.forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">            q.push(child);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bfs(tree)</span><br><span class="line"></span><br><span class="line"><span class="comment">// console</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    bfs a</span></span><br><span class="line"><span class="comment">    bfs 1</span></span><br><span class="line"><span class="comment">    bfs 2</span></span><br><span class="line"><span class="comment">    bfs b</span></span><br><span class="line"><span class="comment">    bfs 1</span></span><br><span class="line"><span class="comment">    bfs 2</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h2 id="二叉树的先、中、后序遍历"><a href="#二叉树的先、中、后序遍历" class="headerlink" title="二叉树的先、中、后序遍历"></a>二叉树的先、中、后序遍历</h2><p>什么是二叉树？</p>
<p>树种每个节点最多只能由两个子节点。</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/f/f7/Binary_tree.svg"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 二叉树</span></span><br><span class="line"><span class="keyword">const</span> BTree = &#123;</span><br><span class="line">    val: <span class="number">2</span>,</span><br><span class="line">    left: &#123;</span><br><span class="line">        val: <span class="number">7</span>,</span><br><span class="line">        left: &#123;</span><br><span class="line">            val: <span class="number">2</span>,</span><br><span class="line">            left: <span class="literal">null</span>,</span><br><span class="line">            right: <span class="literal">null</span></span><br><span class="line">        &#125;,</span><br><span class="line">        right: &#123;</span><br><span class="line">            val: <span class="number">6</span>,</span><br><span class="line">            left: &#123;</span><br><span class="line">                val: <span class="number">5</span>,</span><br><span class="line">                left: <span class="literal">null</span>,</span><br><span class="line">                right: <span class="literal">null</span></span><br><span class="line">            &#125;,</span><br><span class="line">            right: &#123;</span><br><span class="line">                val: <span class="number">11</span>,</span><br><span class="line">                left: <span class="literal">null</span>,</span><br><span class="line">                right: <span class="literal">null</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    right: &#123;</span><br><span class="line">        val: <span class="number">5</span>,</span><br><span class="line">        left: <span class="literal">null</span>,</span><br><span class="line">        right: &#123;</span><br><span class="line">            val: <span class="number">9</span>,</span><br><span class="line">            left: &#123;</span><br><span class="line">                val: <span class="number">4</span>,</span><br><span class="line">                left: <span class="literal">null</span>,</span><br><span class="line">                right: <span class="literal">null</span></span><br><span class="line">            &#125;,</span><br><span class="line">            right: <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="先序遍历内功心法"><a href="#先序遍历内功心法" class="headerlink" title="先序遍历内功心法"></a>先序遍历内功心法</h3><ul>
<li>根左右</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> POrder = <span class="function"><span class="params">tree</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!tree) &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(tree.val);</span><br><span class="line">    POrder(tree.left)</span><br><span class="line">    POrder(tree.right)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POrder(BTree)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 7 2 6 5 11 5 9 4 </span></span><br></pre></td></tr></table></figure>

<h3 id="中序遍历内功心法"><a href="#中序遍历内功心法" class="headerlink" title="中序遍历内功心法"></a>中序遍历内功心法</h3><ul>
<li>左根右</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> POrder = <span class="function"><span class="params">tree</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!tree) &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    POrder(tree.left)</span><br><span class="line">    <span class="built_in">console</span>.log(tree.val);</span><br><span class="line">    POrder(tree.right)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POrder(BTree)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 7 5 6 11 2 5 4 9</span></span><br></pre></td></tr></table></figure>

<h3 id="后续遍历内功心法"><a href="#后续遍历内功心法" class="headerlink" title="后续遍历内功心法"></a>后续遍历内功心法</h3><ul>
<li><p>左右根</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> POrder = <span class="function"><span class="params">tree</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!tree) &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    POrder(tree.left)</span><br><span class="line">    POrder(tree.right)</span><br><span class="line">    <span class="built_in">console</span>.log(tree.val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POrder(BTree)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 5 11 6 7 4 9 5 2</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>React组件单元测试指北</title>
    <url>/article/react-unit-test/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>写这篇文章的时候，我其实是顶着很大的压力去写的，因为文章本身内容可能会很多，涉及的东西也可能会很多，所以我准备拿一个兼顾所有测试场景的组件去<code>Mock</code>测试场景，介绍各种测试方案的进行。</p>
<p>未完待续。。。</p>
]]></content>
      <categories>
        <category>单元测试</category>
      </categories>
      <tags>
        <tag>单元测试</tag>
        <tag>React</tag>
        <tag>Enzyme</tag>
      </tags>
  </entry>
  <entry>
    <title>遗忘过去，重头开始</title>
    <url>/article/restart-life/</url>
    <content><![CDATA[<p><img src="https://user-images.githubusercontent.com/39019913/95016483-d93cf580-0685-11eb-95c0-c071593d24ee.png"></p>
<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>也许是经历了太多坎坷与挫折，让我有了萌生重头开始的念头，遗忘那些痛苦不堪的回忆与往事。</p>
<p>心态变了，心态早变了，是怕父母变老也是怕自己没钱可赚，赚钱不够花，慢慢变得爱钱了，可能长大了吧。</p>
<p>经营了两年多的博客，让我给删的一干二净。理由就是没有任何的营养含量，只能算笔记，不可以叫博客。</p>
<p><img src="https://user-images.githubusercontent.com/39019913/95016404-6469bb80-0685-11eb-92ca-8ea08f547d43.png"></p>
<h2 id="第一篇-涉世未深"><a href="#第一篇-涉世未深" class="headerlink" title="第一篇 涉世未深"></a>第一篇 涉世未深</h2><p>刚刚毕业，稍有些懵懂，可能是一个人来到了“魔都”这个繁华又让人向往的城市。</p>
<p>可能是对于落选大厂也有些许不甘，所以扎根在心底的执念。</p>
<h2 id="第二篇-百炼成钢"><a href="#第二篇-百炼成钢" class="headerlink" title="第二篇 百炼成钢"></a>第二篇 百炼成钢</h2><p>年轻人，难免会有一些锐气与傲气，需要被磨炼与摧残掉。这样才能更好的心平气和的去做一些事。</p>
<p>转眼间，来到上海快一年了，我做了什么？收获了什么？</p>
<p>收获的更多的可能是工作上的经验，同时也收获了更多的知识与解决问题的技巧。</p>
<h2 id="第三篇-之后的路"><a href="#第三篇-之后的路" class="headerlink" title="第三篇 之后的路"></a>第三篇 之后的路</h2><ol>
<li>在做业务的同时，补给知识的养分，对于学过的已经模糊的知识回顾复习，对于未来的，新的知识，作以了解；</li>
<li>应当花费一定量的时间去充实底层原理的理论知识，并且夯实概念化思维，毕竟了解底层知识后，对于这个技术或者框架就会有一个比较全面且直观的认识；</li>
<li>这条路还有很长，自己到底有几斤几两，自己是最清楚的；</li>
<li>做过一次、照猫画虎写写总结，那不叫会了，那叫牛刀小试，可能真实编码过程中就会bug百出；</li>
</ol>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>琐事</tag>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title>手撕Promise</title>
    <url>/article/write-code-promise/</url>
    <content><![CDATA[<p>简明扼要的手撕 <code>Promise</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 手写Promise</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(fn) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;MyPromise Expect A Function&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.status = <span class="string">&#x27;Pending&#x27;</span>;</span><br><span class="line">        <span class="built_in">this</span>.onResolvedCallback = [];</span><br><span class="line">        <span class="built_in">this</span>.onRejectedCallback = [];</span><br><span class="line">        <span class="built_in">this</span>.val = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> resolve = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="built_in">this</span>.status, <span class="built_in">this</span>.onResolvedCallback)</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">this</span>.status === <span class="string">&#x27;Pending&#x27;</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.status = <span class="string">&#x27;Resolved&#x27;</span></span><br><span class="line">                    <span class="built_in">this</span>.val = val;</span><br><span class="line">                    <span class="built_in">this</span>.onResolvedCallback.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item(val))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> reject = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">this</span>.status === <span class="string">&#x27;Pending&#x27;</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.status = <span class="string">&#x27;Rejected&#x27;</span></span><br><span class="line">                    <span class="built_in">this</span>.val = val;</span><br><span class="line">                    <span class="built_in">this</span>.onRejectedCallback.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item(val))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fn(resolve, reject)</span><br><span class="line">        &#125;  <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">           reject(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    then(onFulfilled, onRejected) &#123;</span><br><span class="line">        onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">o</span> =&gt;</span> o;</span><br><span class="line">        onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">err</span> =&gt;</span> &#123; <span class="keyword">throw</span> err &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.onResolvedCallback.push(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">const</span> res = onFulfilled(val)</span><br><span class="line">                    <span class="keyword">if</span>(res <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">                        res.then(resolve, reject)</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        resolve(res);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                    reject(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.onRejectedCallback.push(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">const</span> res = onRejected(val)</span><br><span class="line">                    <span class="keyword">if</span>(res <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">                        res.then(resolve, reject)</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        reject(res);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                    reject(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">catch</span>(onRejected) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.then(<span class="literal">null</span>, onRejected);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;res(<span class="number">1</span>)&#125;)</span><br><span class="line"></span><br><span class="line">p.then(<span class="number">3</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">cal</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(cal)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span>=&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>手写代码</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>手撕new</title>
    <url>/article/write-code-new/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>手撕一系列代码的初衷并不是说证明什么，而是手撕代码后的愉悦感，可以体会原理层的东西，在使用方面的疑问，通通解掉。</p>
<h2 id="Sources"><a href="#Sources" class="headerlink" title="Sources"></a>Sources</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> MyNew = <span class="function">(<span class="params">fn, ...props</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">const</span> Constructor = fn;</span><br><span class="line">   <span class="keyword">const</span> _obj = <span class="built_in">Object</span>.create(Constructor.prototype);</span><br><span class="line">   <span class="keyword">const</span> ConsRet = Constructor.apply(_obj, props);</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">return</span> (<span class="keyword">typeof</span> ConsRet === <span class="string">&#x27;object&#x27;</span> &amp;&amp; ConsRet) ? ConsRet : _obj;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="重点剖析"><a href="#重点剖析" class="headerlink" title="重点剖析"></a>重点剖析</h2><ul>
<li>JS<code>构造函数</code>与<code>普通成员函数</code>的区别；</li>
<li><code>this</code>指向<code>源</code>构建&amp;<code>__proto__</code>关联；</li>
<li>实例化实参的<code>注入</code>，需理解<code>call</code>&amp;<code>apply</code>的区别；</li>
</ul>
]]></content>
      <categories>
        <category>手写代码</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>手撕 apply和call</title>
    <url>/article/write-code-apply-code/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>call</code>和<code>apply</code>的区别，应该在于<code>API</code>的使用上，<code>call(context | null, args...)</code>，<code>apply(context | null, [args...])</code>；</p>
<p>共同点在于都可以<code>自调用函数</code>，<code>硬绑定 上下文（this）</code>；</p>
<p>现在，开启手撕模式：</p>
<h2 id="Sources"><a href="#Sources" class="headerlink" title="Sources"></a>Sources</h2><ul>
<li><code>Call</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">    context = context || <span class="built_in">this</span>;</span><br><span class="line">    context.fn = <span class="built_in">this</span></span><br><span class="line">    <span class="keyword">const</span> _arr = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</span><br><span class="line">    _arr.shift()</span><br><span class="line">    <span class="keyword">const</span> res = context.fn(_arr.toString());</span><br><span class="line">    <span class="keyword">delete</span> context.fn</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Apply</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myApply = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">    context = context || <span class="built_in">this</span></span><br><span class="line">    context.fn = <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">const</span> _arr = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</span><br><span class="line">    _arr.shift();</span><br><span class="line">    <span class="keyword">const</span> res = context.fn(_arr.shift().toString())</span><br><span class="line">    <span class="keyword">delete</span> context.fn;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h2><p>最后，其实是有问题的，问题原因请看如下 <code>issue</code>;</p>
<p><a href="https://github.com/mqyqingfeng/Blog/issues/11#issuecomment-708381446"><code>issue</code>传送门</a></p>
]]></content>
      <categories>
        <category>手写代码</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>手撕函数柯里化</title>
    <url>/article/write-code-curry/</url>
    <content><![CDATA[<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 计算两数之和</span></span><br><span class="line"><span class="keyword">const</span> carry = <span class="function">(<span class="params">f, o</span>) =&gt;</span> &#123;</span><br><span class="line">    o = o || []</span><br><span class="line">    <span class="keyword">const</span> _len = f.length;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(o)</span><br><span class="line">       <span class="keyword">const</span> _o = [].concat(o.slice(), <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>));</span><br><span class="line">        <span class="keyword">if</span>(_o.length &lt; _len) &#123;</span><br><span class="line">            <span class="keyword">return</span> carry.call(<span class="built_in">this</span>, f, _o);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f.apply(<span class="built_in">this</span>, _o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">a,b,c</span>) =&gt;</span> a+b+c</span><br><span class="line"><span class="keyword">const</span> newSum = carry(sum)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newSum(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>))</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>柯里化的核心就是：不断拆解<code>新生curry工厂函数</code>的形参，内部闭包缓存，最终比对初始函数的形参个数与缓存形参个数。相同就实现再次调用。</p>
<p><strong>需要注意的点：</strong></p>
<ul>
<li><code>this</code>和<code>arguements</code>只有在<code>functional</code>函数中存在，<code>箭头函数</code>是没有这个东西的;</li>
<li><code>arguements</code>只是一个<code>伪数组</code>，只拥有数组的个别几个<code>方法和属性</code>，可以借助<code>Array.from</code>转换为<code>真实数组</code>;</li>
<li>注意区分<code>call</code>与<code>apply</code>的区别;</li>
<li>理解闭包的特性</li>
</ul>
]]></content>
      <categories>
        <category>手写代码</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Redux-thunk原理探析</title>
    <url>/article/redux-thunk-theory/</url>
    <content><![CDATA[<p><code>Redux</code>的作用这里就不做过多赘述，简单看下<code>Redux</code>原理：</p>
<p><img src="https://user-images.githubusercontent.com/39019913/98236642-a34da280-1f9e-11eb-84fd-e1429548e424.png" alt="image"></p>
<p><code>小tip：纯函数的核心理念在于：出参始终依赖于入参，不受外部的任何影响，也就是不会因为何时、何处调用而影响</code>。</p>
<p>可以很直观的看到，<code>用户</code>从<code>UI</code>层面触发一系列的<code>DOM</code>事件，进而去<code>dispatch</code> <code>action</code>，将<code>dispatch</code>这个动作的处理交给<code>reducer（纯函数）</code>去做进一步处理。</p>
<p><code>Redux-thunk</code>做了什么？</p>
<p>它是为了处理异步<code>action</code>的，因为在项目中难免会有<code>异步请求数据，往redux中塞入获取的数据</code>这样的动作。</p>
<h2 id="但是，它究竟做了什么呢？"><a href="#但是，它究竟做了什么呢？" class="headerlink" title="但是，它究竟做了什么呢？"></a>但是，它究竟做了什么呢？</h2><p>可以看看源码，一窥究竟：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建thunk-middleware</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createThunkMiddleware</span>(<span class="params">extraArgument</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 拦截action </span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">&#123; dispatch, getState &#125;</span>) =&gt;</span> <span class="function">(<span class="params">next</span>) =&gt;</span> <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 如果action为一个函数，那么就调用action，并且传入 dispatch、getState、extraArguement</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> action === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">       <span class="comment">// 传入dispatch的目的是为了可以在action中去处理异步，在合适的时机dispatch</span></span><br><span class="line">      <span class="keyword">return</span> action(dispatch, getState, extraArgument);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 否则透传action</span></span><br><span class="line">    <span class="keyword">return</span> next(action);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> thunk = createThunkMiddleware();</span><br><span class="line">thunk.withExtraArgument = createThunkMiddleware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> thunk;</span><br></pre></td></tr></table></figure>
<p>在<code>action</code>的时候处理异步任务，在结束时，<code>dispatch</code>对应的<code>reducer  case</code>。</p>
<h2 id="store组织"><a href="#store组织" class="headerlink" title="store组织"></a><code>store</code>组织</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125;  <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> asyncAdd = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (dispatch: <span class="function">(<span class="params">args: &#123;<span class="keyword">type</span>: <span class="built_in">any</span>; payload?: <span class="built_in">any</span>&#125;</span>) =&gt;</span> <span class="built_in">void</span>) =&gt; &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            dispatch(&#123; <span class="keyword">type</span>: <span class="string">&#x27;AsyncAdd&#x27;</span>, payload: <span class="number">9</span>&#125;)</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> syncAdd = <span class="function">(<span class="params">payload: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="keyword">type</span>: <span class="string">&#x27;ADD&#x27;</span>,</span><br><span class="line">        payload</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducers</span> (<span class="params">state = &#123; num: 1 &#125;, action: <span class="built_in">any</span></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;ADD&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123; ...state, num: action.payload &#125; ;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;AsyncAdd&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123; ...state, num: action.payload &#125; ;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> store = createStore(reducers, applyMiddleware(thunk))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure>

<h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>与<code>thunk</code>相似的工具还有<code>saga</code>，但是<code>saga</code>的设计更像是<code>vuex</code>中那样，把异步<code>action</code>剖离出来。利用了<code>generator</code>的写法，单独的<code>saga</code>文件去将异步同步化。</p>
<p>简单赘述一下<code>Redux-saga</code>处理流程：</p>
<p>先说明下<code>Redux-MiddleWare</code>的处理流程；</p>
<p><img src="https://user-images.githubusercontent.com/39019913/98340671-b1f09400-2048-11eb-8c24-56fafb8de3f9.png" alt="image"></p>
<p><code>saga</code>提供的<code>effets</code>会在处理完毕异步任务后，重新<code>dispatch</code> <code>reducer</code>中的<code>action</code>去更新<code>store</code>。监听用户<code>action</code>，将<code>saga</code>处理的异步<code>action</code>独立出来。</p>
<blockquote>
<p><code>小Tip：</code>什么是中间件？中间件是介于系统某几个部分的<code>衔接应用</code>，它可能只是简单地做一些数据交换任务，不处理业务逻辑，不处理底层硬件逻辑。</p>
</blockquote>
]]></content>
      <categories>
        <category>redux-thunk</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>如何开始测试，怎么写好测试？</title>
    <url>/article/react-unit-test-start/</url>
    <content><![CDATA[<h1 id="怎么开始测试呢？"><a href="#怎么开始测试呢？" class="headerlink" title="怎么开始测试呢？"></a>怎么开始测试呢？</h1><p>编写测试之前，请先<code>深呼吸</code>，<code>气沉丹田</code>，想想自己即将要攀登到<code>代码质量之巅</code>。</p>
<p>感受着和煦的微风<del>微凉的空调风夹杂着氟利昂的气息</del>，抚过脸颊，默默拿起手边的<code>Mojito</code><del>温热的白开水伴随着野菊花的芬芳</del>。</p>
<p>默念心法<code>given-when-then</code>，<code>不要去关注内部逻辑怎么实现的</code>。</p>
<p>缓缓开始敲击着键盘：<br><code>describe(xxx, () =&gt; &#123;&#125;)</code>……</p>
<hr>
<p>正经开始吧，先从<code>TDD</code>测试模式开始起步吧。</p>
<ul>
<li>这里我们接了一个需求，需要写一个过滤出URL地址中的端口号工具函数。</li>
</ul>
<p>首先我们可能会有这样一个<code>敏捷</code>的思维，这个工具函数就是<code>1. 拿到 url</code> =&gt; <code>2. 匹配 端口号</code> =&gt; <code>3. 返回端口号</code>。</p>
<p>于是这样一个用例出来了。这里按照预期测试完，确实返回了<code>8080</code>这个端口号</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; filterPort &#125; <span class="keyword">from</span> <span class="string">&#x27;utils&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> assert <span class="keyword">from</span> <span class="string">&#x27;assert&#x27;</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Util&#x27;</span>, (): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    test(<span class="string">&#x27;返回端口号&#x27;</span>, (): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> url: <span class="built_in">string</span> = <span class="string">&#x27;http://localhost:8080&#x27;</span>;</span><br><span class="line">        <span class="keyword">const</span> res = filterPort(url);</span><br><span class="line"></span><br><span class="line">        assert(res === <span class="string">&#x27;8080&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><img src="https://user-images.githubusercontent.com/39019913/96442449-b988fe00-123d-11eb-8f86-326e6628029e.png" alt="image"></p>
<p>按照<code>TDD</code>开发的顺序，先跟着<code>feel</code>盲写一波测试用例，然后开始简要的开发，让测试用例通过。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义函数模板</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> FilterPortProps &#123;</span><br><span class="line">    (url: <span class="built_in">string</span>): <span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编写最基本的函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; FilterPortProps &#125; <span class="keyword">from</span> <span class="string">&#x27;../lib/interface/utils&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> filterPort: FilterPortProps = <span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> url.match(<span class="regexp">/(?&lt;=:)\d+/g</span>)?.[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来就是紧张而又自豪的时刻了：</p>
<p><img src="https://user-images.githubusercontent.com/39019913/96444809-8a748b80-1241-11eb-994b-d5bab299b8f9.png" alt="image"></p>
<p>按照<code>TDD</code>的规则，我们继续编写测试（<code>未实现的测试</code>）；</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">test(<span class="string">&#x27;返回 null&#x27;</span>, (): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">const</span> url: <span class="built_in">string</span> = <span class="string">&#x27;http://localhost&#x27;</span>;</span><br><span class="line">     <span class="keyword">const</span> res = filterPort(url);</span><br><span class="line">     <span class="built_in">console</span>.log(res)</span><br><span class="line">     assert(res === <span class="literal">null</span>);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>

<p><img src="https://user-images.githubusercontent.com/39019913/96448545-21dbdd80-1246-11eb-811f-66932f79fcea.png" alt="image"></p>
<p>这里的行为，应该是返回<code>null</code>，所以源代码应该修改为这样：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; FilterPortProps &#125; <span class="keyword">from</span> <span class="string">&#x27;../lib/interface/utils&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> filterPort: FilterPortProps = <span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> url.match(<span class="regexp">/(?&lt;=:)\d+/g</span>)?.[<span class="number">0</span>] || <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://user-images.githubusercontent.com/39019913/96449112-f4dbfa80-1246-11eb-9765-1b26f056e346.png" alt="image"></p>
<p>我们再次完成了一个 由<code>红</code>变<code>绿</code>的过程，但是这时候的设计并不完美。</p>
<p>再从<code>BDD</code>深扣实现细节出发，返回出一个正确的结果，我们需要两个步骤：</p>
<ol>
<li><code>url</code>确实存在；</li>
<li><code>正则匹配</code>返回结果；</li>
</ol>
<p>我们思考的是，在什么情况下，会有什么表现，代码层面会有什么体现。</p>
<p>所以针对这个工具函数，我们应该遵循<code>黑盒测试用例</code>设计方案，设计有效/无效等价类；</p>
<ul>
<li><p>有效等价类</p>
<ol>
<li>url存在，且只有一个</li>
</ol>
</li>
<li><p>无效等价类</p>
<ol>
<li>url 不存在</li>
<li>url 存在，但是数目大于一个</li>
</ol>
</li>
</ul>
<p>场景一：在后端数据存在问题时，我们的程序应该爆出合适的错误去引导开发者最快速度的定位到错误；</p>
<p>场景二：在别的开发者使用错误的时候，但是并不阻碍程序正常运行，应该适当地爆出<code>warning</code>去引导且告诉使用者，这样做是违反我工具的使用规则的；</p>
<p>接下来，我们的测试用例又会新增两条用例去覆盖我们的<code>无效等价类</code>或者<code>BDD场景 </code>；</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 源代码</span></span><br><span class="line"><span class="keyword">import</span> &#123; FilterPortProps &#125; <span class="keyword">from</span> <span class="string">&#x27;../lib/interface/utils&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> filterPort: FilterPortProps = <span class="function"><span class="keyword">function</span> (<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// if url is undefined \ null \ &#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span>(!url) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Function expect a param at least&#x27;</span>); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if arguements&#x27;s length 大于 1</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.warn(<span class="string">`</span></span><br><span class="line"><span class="string">        Function only handle one param, if you want to handle one group params: </span></span><br><span class="line"><span class="string">            you can use example as follow: </span></span><br><span class="line"><span class="string">              [param1, param2, ...].reduce(a, b =&gt; a.concat(filterPort(item)), [])</span></span><br><span class="line"><span class="string">        `</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> url.match(<span class="regexp">/(?&lt;=:)\d+/g</span>)?.[<span class="number">0</span>] || <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; filterPort &#125; <span class="keyword">from</span> <span class="string">&#x27;../../../utils&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> assert <span class="keyword">from</span> <span class="string">&#x27;assert&#x27;</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;Util&#x27;</span>, (): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    it(<span class="string">&#x27;当调用工具函数后，且传入正确的 url 并且匹配到正确结果&#x27;</span>, (): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> url: <span class="built_in">string</span> = <span class="string">&#x27;http://localhost:8080&#x27;</span>;</span><br><span class="line">        <span class="keyword">const</span> res = filterPort(url);</span><br><span class="line"></span><br><span class="line">        assert(res === <span class="string">&#x27;8080&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">&#x27;当调用工具函数后，且传入正确的 url，但没有匹配到结果应该返回null&#x27;</span>, (): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> url: <span class="built_in">string</span> = <span class="string">&#x27;http://localhost&#x27;</span>;</span><br><span class="line">        <span class="keyword">const</span> res = filterPort(url);</span><br><span class="line"></span><br><span class="line">        assert(res === <span class="literal">null</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">&#x27;当调用工具函数后，接收入参为null的情况下，程序应该反馈出正确的信息&#x27;</span>, (): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> url = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            filterPort(url);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            assert(e.toString().length &gt; <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">&#x27;当调用工具函数后，接收参数超过一个的时候，只匹配第一个参数的结果，并且程序应该给出warning提示&#x27;</span>, (): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> url: <span class="built_in">string</span> = <span class="string">&#x27;http://localhost:8080&#x27;</span>;</span><br><span class="line">        <span class="built_in">global</span>.console.warn = jest.fn();</span><br><span class="line">        <span class="keyword">const</span> res = filterPort(url, url);</span><br><span class="line">        assert(res === <span class="string">&#x27;8080&#x27;</span>);</span><br><span class="line">        expect(<span class="built_in">global</span>.console.warn).toBeCalledTimes(<span class="number">1</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>最后：</p>
<p><img src="https://user-images.githubusercontent.com/39019913/96456695-6caf2280-1251-11eb-84b4-5469f70e4483.png" alt="image"></p>
<p><img src="https://user-images.githubusercontent.com/39019913/96457170-04ad0c00-1252-11eb-8fec-00e919b9559a.png" alt="image"></p>
<p>相信你已经对于如何去设计一个完美的测试用例有了一个大体的认识，也了解了从<code>UTDD</code>和<code>ATDD</code>层级去驱动设计测试进而驱动开发。最后，始终去关注测试原则：<br>保证<code>given-when-then</code>细则；</p>
<p><code>只考虑</code></p>
<p>名词解释：<br><code>ATDD(“Acceptance Test Driven Development)</code>: 验收测试驱动，所有的产品（代码产出）都应该符合验收细则，而不是虚拟的指标；（应该出现的时间节点在 需求分析时）<br><code>UTDD(Unit Test Driven Development)</code>: 单元测试驱动开发；（应该出现的时间节点在于：代码开发之前）</p>
<p>然后可以聊聊重构？</p>
<p>什么是重构，重构是重构代码细节，但是重构后的应用的表现形态是不该不破坏的。</p>
<p>依旧拿上面的示例来讲，有一天我接到了一个需求，要重构上面的函数，实现方案是不允许用正则去处理：</p>
<p>A同学，使用了一些<code>奇淫巧技</code>实现了这个功能，完了之后去跑我们的测试用例；用例应该是正常运行的。</p>
<p>这样的测试用例才算是健壮的，利于重构代码的，可以为重构代码提供导向性作用；</p>
<h2 id="可能你对于上面的表述会显得有些意识模糊"><a href="#可能你对于上面的表述会显得有些意识模糊" class="headerlink" title="可能你对于上面的表述会显得有些意识模糊"></a>可能你对于上面的表述会显得有些意识模糊</h2><p>那么我们开始一个简单的 todo list 开发；</p>
<p>需求：请完成一个<code>todolist</code>，纯新增：支持回车新增与按钮点击新增；</p>
<p>从（<code>UTDD</code>）角度出发：</p>
<p>分三个组件：</p>
<ul>
<li><code>Operate-Panel</code>用于操作；</li>
<li><code>List</code>用于展示<code>todo item</code>组；</li>
</ul>
<h5 id="operate-panel"><a href="#operate-panel" class="headerlink" title="operate-panel"></a><code>operate-panel</code></h5><p>先大致建好文件，分析测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">describe(&#39;Operate-Panel&#39;, (): void &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">    let wrapper: ShallowWrapper;</span><br><span class="line">    const dispatch &#x3D; jest.fn();</span><br><span class="line"></span><br><span class="line">    beforeEach(() &#x3D;&gt; &#123;</span><br><span class="line">        wrapper &#x3D; shallow(&lt;OperatePanel dispatch&#x3D;&#123;dispatch&#125;&#x2F;&gt;)</span><br><span class="line">    &#125;);</span><br><span class="line">    afterEach(() &#x3D;&gt; &#123;</span><br><span class="line">       wrapper.unmount();</span><br><span class="line">       jest.clearAllMocks();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">   test(&#39;输入内容后，回车调用外层的 dispatch&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">        const todoContent &#x3D; &#39;今天需要读书&#39;;</span><br><span class="line">        wrapper.find(&#39;input&#39;).simulate(&#39;input&#39;, &#123; target: &#123; value: todoContent &#125; &#125;);</span><br><span class="line">        wrapper.find(&#39;input&#39;).simulate(&#39;keyup&#39;, &#123; key: &#39;Enter&#39; &#125;);</span><br><span class="line">        expect(dispatch).toBeCalledTimes(1);</span><br><span class="line">        &#x2F;&#x2F; expect(dispatch).toHaveBeenCalledWith(todoContent);</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   test(&#39;input 内容为空时，什么都不做，不触发 dispatch&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">       const todoContent &#x3D; &#39;今天需要读书&#39;;</span><br><span class="line">       wrapper.find(&#39;input&#39;).simulate(&#39;input&#39;, &#123; target: &#123; value: todoContent &#125; &#125;);</span><br><span class="line">       expect(dispatch).toBeCalledTimes(0);</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">    test(&#39;输入内容后，不回车，不会触发 dispatch&#39;, () &#x3D;&gt; &#123;</span><br><span class="line">        const todoContent &#x3D; &#39;今天需要读书&#39;;</span><br><span class="line">        wrapper.find(&#39;input&#39;).simulate(&#39;input&#39;, &#123; target: &#123; value: todoContent &#125; &#125;);</span><br><span class="line">        wrapper.find(&#39;input&#39;).simulate(&#39;keyup&#39;, &#123; key: &#39;Tab&#39; &#125;);</span><br><span class="line">        expect(dispatch).toBeCalledTimes(0);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://user-images.githubusercontent.com/39019913/96727154-5934c080-13e5-11eb-810c-906f1cb6bfd0.png" alt="image"></p>
<p>然后按照这个思路完善与这个测试相关的业务代码，不要多写与当前测试用例无关的业务代码；</p>
<p>根据<code>TDD</code>测试模式，测试覆盖率通常可以达到<code>90%-100%</code>之间。<br><code>（小tip：在进行测试用例的设计中，可以依照白盒测试设计：路径覆盖、逻辑覆盖）</code><br><img src="https://user-images.githubusercontent.com/39019913/96736447-34454b00-13ef-11eb-85e8-ec3b3bd60e7b.png" alt="image"></p>
<h3 id="那么其实与TDD相互配合的还有BDD测试模式"><a href="#那么其实与TDD相互配合的还有BDD测试模式" class="headerlink" title="那么其实与TDD相互配合的还有BDD测试模式"></a>那么其实与<code>TDD</code>相互配合的还有<code>BDD</code>测试模式</h3><p><code>BDD</code>的行为细则属于怎样的呢？</p>
<p>全称：<code>Behavior Driven Development</code>行为驱动开发。说的直白一点，更多的应该是，需求驱动开发，也就是当前组件的测试是面向需求的，需求满足则测试通过。<br>但是不好的一点是失去了单测目的，非需求部分的逻辑代码得不到测试覆盖，无法谈及质量观。</p>
<p>测试模式宏观的方案就是写完业务代码后，针对需求进行编撰测试。</p>
]]></content>
      <categories>
        <category>单元测试</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>unit test</tag>
      </tags>
  </entry>
  <entry>
    <title>打通webpack任督二脉</title>
    <url>/article/webpack-advanced/</url>
    <content><![CDATA[<p><img src="https://user-images.githubusercontent.com/39019913/92306504-2c0d8980-efc2-11ea-80c7-bec809bc72e7.png" alt="image"></p>
<h2 id="一、基础梳理（上帝视角de灵魂拷问）"><a href="#一、基础梳理（上帝视角de灵魂拷问）" class="headerlink" title="一、基础梳理（上帝视角de灵魂拷问）"></a>一、基础梳理（上帝视角de灵魂拷问）</h2><h3 id="1-1-webpack是什么？"><a href="#1-1-webpack是什么？" class="headerlink" title="1.1 webpack是什么？"></a>1.1 webpack是什么？</h3><ul>
<li><del>webpack就是一个js的翻译器</del><ul>
<li>它只认识<code>import</code> 这样的语句，其他高级<code>js</code>语法，一概不认。</li>
</ul>
</li>
</ul>
<p><strong>核心定义</strong>：模块打包工具 👏👏👏</p>
<ul>
<li>识别<code>import</code>，引入<code>import</code>模块，打包生成最终的模块。</li>
</ul>
<p><img src="https://user-images.githubusercontent.com/39019913/92325392-e3ff6d00-f07c-11ea-8f89-97ee4eaa5570.png" alt="image"></p>
<h3 id="1-2-什么是webpack模块"><a href="#1-2-什么是webpack模块" class="headerlink" title="1.2 什么是webpack模块"></a>1.2 什么是webpack模块</h3><p><img src="https://user-images.githubusercontent.com/39019913/92325431-4d7f7b80-f07d-11ea-9e37-2eef765bc862.png" alt="image"></p>
<h3 id="1-3-webpack-config-js的作用是什么？"><a href="#1-3-webpack-config-js的作用是什么？" class="headerlink" title="1.3 webpack.config.js的作用是什么？"></a>1.3 webpack.config.js的作用是什么？</h3><p>扩展<code>webpack</code>的能力，提供给<code>webpack</code>使用，<code>webpack</code>会默认读取<code>webpack.config.js</code>的信息。</p>
<h3 id="1-4-Loader是什么？"><a href="#1-4-Loader是什么？" class="headerlink" title="1.4 Loader是什么？"></a>1.4 Loader是什么？</h3><p>我的理解：它就是一个对于特定文件所提供给<code>webpack</code>打包的一种打包方案。</p>
<p><strong>stackoverflow Reference</strong> <a href="https://stackoverflow.com/a/46176755/7552246">https://stackoverflow.com/a/46176755/7552246</a></p>
<h4 id="Loaders"><a href="#Loaders" class="headerlink" title="Loaders"></a>Loaders</h4><p>Loaders work at the individual file level during or before the bundle is generated.<br><em>在<code>bundle</code>生成期间或之前，<code>loader</code>在单个文件级别工作。</em></p>
<h4 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h4><p>Plugins work at bundle or chunk level and usually work at the end of the bundle generation process. Plugins can also modify how the bundles themselves are created. Plugins have more powerful control than loaders.<br><code>plugin</code>在<code>bundle</code>或<code>chunk</code>级别工作，通常在<code>bundle</code>生成结束时工作。插件还可以修改<code>bundle</code>本身的创建方式。<code>plugin</code>具有比<code>loader</code>更强大的控制功能。</p>
<p><img src="https://i.stack.imgur.com/P7hTM.png" alt="image"></p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol>
<li>什么是AST？</li>
</ol>
<p>AST(Abstract Syntax Tree)，</p>
<ol start="2">
<li>AST在JS代码执行的那个阶段产生？</li>
</ol>
<p>词法分析–&gt;语法分析(生成AST)–&gt;预编译–&gt;解释执行</p>
<ol start="3">
<li>AST语法树</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type:         描述该语句的类型  --&gt; 变量声明的语句</span><br><span class="line">kind:         变量声明的关键字  </span><br><span class="line">declaration:  声明内容的数组，里面每一项也是一个对象</span><br><span class="line">            type: 描述该语句的类型</span><br><span class="line">            id:   描述变量名称的对象</span><br><span class="line">                type: 定义</span><br><span class="line">                name: 变量的名字</span><br><span class="line">            init: 初始化变量值的对象</span><br><span class="line">                type:   类型</span><br><span class="line">                value:  值 </span><br><span class="line">                row:    值，判别是否 带引号</span><br></pre></td></tr></table></figure>

<h2 id="基础配置优化"><a href="#基础配置优化" class="headerlink" title="基础配置优化"></a>基础配置优化</h2><ol>
<li><p>利用好<code>webpack.config.js</code>配置中的<code>resolve</code>，主动告诉<code>webpack</code>，我们需要对于哪些文件进行一个打包查找：（这里优先介绍常用的）</p>
<p>1&gt; <code>extensions</code>，告诉<code>webpack</code>，我们需要优先查找哪些没有后缀名但是拥有<code>前缀名</code>的文件，列在数组首位的后缀名优先。</p>
<p>2&gt; <code>alias</code>设置别名路径，当路径过长的时候，可以使用<code>alias</code>设置短链接指向。</p>
</li>
<li><p>在<code>合适</code>的<code>场景</code>，利用好<code>合适</code>的<code>loader</code>去处理<code>合适</code>的<code>文件</code>，例如可以利用<code>url-loader</code>去处理图片文件，将图片适当的<code>base64</code>化。</p>
</li>
<li><p>在<code>loader</code>中配置<code>exclude</code> &amp; <code>include</code>，缩小<code>complier</code>范围。</p>
</li>
<li><p>利用<code>cache-loader</code> &amp; <code>cache-plugin</code>缓存大体量的<code>loader</code> OR <code>plugin</code>，实现提效。</p>
</li>
</ol>
<h2 id="分割打包策略"><a href="#分割打包策略" class="headerlink" title="分割打包策略"></a>分割打包策略</h2><p>为什么要分包？分什么包？怎么分包？分包可以达到什么效果？</p>
<ul>
<li>为什么要分包？<ul>
<li>原始的打包会将<code>node_modules</code>与<code>需要打包的(src)</code>文件打包进一个<code>bundle</code>，在<code>client</code>进行缓存的时候，重新打包请求，耗费时间，导致首页白屏时间较长，可以选择将<code>需要稳定版本的node_modules</code>持久缓存起来，经常变化的<code>lib</code>/<code>src</code>待编译文件打包进核心的<code>bundle</code>。</li>
</ul>
</li>
<li>分什么包？<ul>
<li>可以将稳定版本的<code>node_modules</code>分包进一个<code>stable vendor</code>；可以将需要<code>latest</code>版本的<code>node_modules</code>分包进一个<code>lazy vendor</code>；可以将核心待编译文件分包进<code>main bundle</code>；可以将测试文件分包进<code>test vendor</code>，注意需要在<code>main bundle</code>中<code>exclude</code>出<code>测试文件</code>；</li>
</ul>
</li>
<li>怎么分包？<ul>
<li><code>webpack 4</code>之前利用的是<code>SplitChunksPlugin</code>这个插件，但是<code>4</code>版本中已被废弃，可以直接在内部通过<code>optimization</code>进行配置。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">         optimization: &#123;</span><br><span class="line">             runtimeChunk: <span class="string">&#x27;single&#x27;</span>,</span><br><span class="line">             splitChunks: &#123;</span><br><span class="line">                 chunks: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">                 maxInitialRequests: <span class="literal">Infinity</span>,</span><br><span class="line">                 minSize: <span class="number">0</span>,</span><br><span class="line">                 cacheGroups: &#123;</span><br><span class="line">                     <span class="keyword">default</span>: &#123;</span><br><span class="line">                         name: <span class="string">&#x27;common&#x27;</span>,</span><br><span class="line">                         chunks: <span class="string">&#x27;initial&#x27;</span>,</span><br><span class="line">                         minChunks: <span class="number">5</span>,  <span class="comment">//模块被引用5次以上的才抽离</span></span><br><span class="line">                         <span class="comment">// priority: -1 // 设置优先级</span></span><br><span class="line">                     &#125;,</span><br><span class="line">                     vendor: &#123;</span><br><span class="line">                         test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">                         name(<span class="built_in">module</span>) &#123;</span><br><span class="line">                             <span class="keyword">const</span> packageName = <span class="built_in">module</span>.context.match(<span class="regexp">/[\\/]node_modules[\\/](.*?)([\\/]|$)/</span>)[<span class="number">1</span>];</span><br><span class="line">                             <span class="comment">// 部分模块是以 @ 开头的，直接在分包命名中过滤掉</span></span><br><span class="line">                             <span class="keyword">return</span> <span class="string">`npm.vendor.<span class="subst">$&#123;packageName.replace(<span class="string">&#x27;@&#x27;</span>, <span class="string">&#x27;&#x27;</span>)&#125;</span>`</span>;</span><br><span class="line">                         &#125;,</span><br><span class="line">                     &#125;,</span><br><span class="line">                     testModule: &#123;</span><br><span class="line">                         chunks: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">                         test: <span class="regexp">/__test__\/*/</span>,</span><br><span class="line">                         name: <span class="string">&#x27;test.vendor&#x27;</span> ,</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;,</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;,</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>分包可以达到什么效果？<ul>
<li><img src="https://user-images.githubusercontent.com/39019913/100823073-823d7c00-348e-11eb-8954-1d76f1ae1add.png" alt="image"></li>
</ul>
</li>
</ul>
<h2 id="缓存优化构建策略"><a href="#缓存优化构建策略" class="headerlink" title="缓存优化构建策略"></a>缓存优化构建策略</h2><ol>
<li><p><code>happypack</code>，之前有提到这个工具，但是其作者已经不维护了，另外多进程打包考验<code>cpu</code>能力，核数越高，打包越快，所以一般可能很难见成效；</p>
</li>
<li><p><code>cache-loader</code>、<code>cache-plugin</code>可以很好的缓存那些大体量的<code>loader</code>或者<code>plugin</code>编译的结果在<code>disk</code>内存中，下次编译的时候可以直接从<code>disk</code>中拿。如果在服务端也可以在放置在<code>redis</code>中。</p>
</li>
<li><p><code>HardSourceWebpackPlugin</code>可以实现持久缓存，第一次构建可能效果不明显，第一次之后，效果可以实现提升。</p>
</li>
</ol>
<h2 id="怎么理解chunk、bundle？"><a href="#怎么理解chunk、bundle？" class="headerlink" title="怎么理解chunk、bundle？"></a>怎么理解<code>chunk</code>、<code>bundle</code>？</h2><p><img src="https://user-images.githubusercontent.com/39019913/100825341-c468bc80-3492-11eb-878a-5fae3529e211.png" alt="image"></p>
<p>如上图，其实还是很好理解的：</p>
<p><code>module</code>是打包前的引入文件，<code>chunk</code>是打包时的处理文件，<code>bundle</code>是<code>webpack</code>处理<code>chunk</code>的产物。</p>
<p><code>chunk</code>的数目怎么计算？很好识别的：一个入口文件一个<code>chunk</code>，一个分包策略一个<code>chunk</code>。</p>
<h2 id="webpack的构建流程是怎样的呢？"><a href="#webpack的构建流程是怎样的呢？" class="headerlink" title="webpack的构建流程是怎样的呢？"></a><code>webpack</code>的构建流程是怎样的呢？</h2><ol>
<li><p>合并<code>shell</code>参数与<code>webpack.config.js</code>中的配置。</p>
</li>
<li><p>在<code>config</code>配置文件中去确定<code>entry</code>入口。</p>
</li>
<li><p>开始执行<code>run</code>编译，对应文件使用对应<code>file-loader</code>，递归处理模块。</p>
</li>
<li><p>根据入口与代码分割方案生成<code>chunk</code>。</p>
</li>
<li><p>处理<code>chunk</code>，生成最终的 <code>bundle</code>。</p>
</li>
<li><p>输出完成。</p>
</li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://medium.com/@rajaraodv/webpack-the-confusing-parts-58712f8fcad9#.5fxzupi03">Webpack — The Confusing Parts</a></li>
<li><a href="https://webpack.js.org/contribute/writing-a-loader/">Write A Loader | Webpack</a></li>
<li><a href="https://cheogo.github.io/learn-javascript/201709/runtime.html">JavaScript 语法解析、AST、V8、JIT</a></li>
</ul>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>新得感悟</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>你还在头疼的`eslint`,`tsconifg.json`其实很好玩</title>
    <url>/article/tsconfig/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>typescript</code>是一个让人用习惯了就无法自拔的工具，作为<code>javascript</code>的类型扩展工具，可以让本是弱类型的<code>javascript</code>拥有强类型约束，<br>在编译期间报错，提示开发者类型是否符合约束，可以在开发期间和后期的维护期间起到很好的作用。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>可能大多数人，看到一些配置文件都会各种头疼，其实完全没必要虚的，因为配置就是一个查阅文档的过程，没有人会全部记住它，用到什么配置就加一下，<br>不过一些常用的配置是需要知道的。</p>
<h2 id="我遇到了什么问题，我要解决什么问题？"><a href="#我遇到了什么问题，我要解决什么问题？" class="headerlink" title="我遇到了什么问题，我要解决什么问题？"></a>我遇到了什么问题，我要解决什么问题？</h2><ul>
<li>当在项目中引入非<code>ts</code>文件或者没有<code>d.ts</code>声明的时候，编辑器报<code>warning</code>怎么办？</li>
</ul>
<ol>
<li><p>第三方包且拥有<code>types</code>包的，下载对应的<code>@types/packageName</code>；</p>
</li>
<li><p>第三方包或者私有库的包，如果没有<code>types</code>，需要手动为包补全<code>d.ts</code>，或者是在项目的<code>src</code>目录下添加<code>@types</code>文件夹，定义<code>definition.d.ts</code>；</p>
</li>
</ol>
<ul>
<li>当项目中某些新特性不支持或者<code>window</code>下的某些参数，报错怎么处理？</li>
</ul>
<ol>
<li>添加<code>declare</code></li>
</ol>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @desc 手动声明 es2018 PromiseConstructor finally</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> PromiseConstructor &#123;</span><br><span class="line">    <span class="keyword">finally</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @desc 手动声明 es2016 ObjectConstructor assign</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> ObjectConstructor &#123;</span><br><span class="line">    assign(...objects: Record&lt;<span class="built_in">string</span>, <span class="built_in">any</span>&gt;[]): Record&lt;<span class="built_in">string</span>, <span class="built_in">any</span>&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @desc 手动声明 Window 全局对象 propTypes</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> Window &#123;</span><br><span class="line">    [key: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> &#x27;*.png&#x27;</span><br><span class="line">declare <span class="keyword">module</span> &#x27;*.jpg&#x27;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>经验</category>
      </categories>
      <tags>
        <tag>tsconfig</tag>
      </tags>
  </entry>
  <entry>
    <title>重识闭包</title>
    <url>/article/re-know-clouser/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为什么再次选择重温<code>闭包</code>这个神奇的物种呢？可能是脑海里还存在以前的<code>疑虑</code>吧？</p>
<blockquote>
<p>函数就是闭包，这是最暴力的解释，也是最直观的解释，因为在全局作用域下，函数引用了函数作用域外的变量，像<code>DOM</code>引用；</p>
</blockquote>
<blockquote>
<p>函数内的函数引用了函数内部的变量或者函数外部的变量，闭包由此生成；（也是目前我能接受的理解，包含《你不知道的JavaScript中》所解释的，回调皆闭包）；</p>
</blockquote>
<h2 id="切题引入"><a href="#切题引入" class="headerlink" title="切题引入"></a>切题引入</h2><blockquote>
<p>完成一个for循环，依次打印1-10，要求每隔一秒打印；</p>
</blockquote>
<h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 记录setTimeout堆栈</span></span><br><span class="line"><span class="keyword">let</span> timerQueue = &#123;&#125;</span><br><span class="line"><span class="comment">// 闭包打印</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printf</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 形成闭包作用域</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 每次打印结束后，清空上一次定时器的闭包引用</span></span><br><span class="line">        timerQueue[i] = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i =<span class="number">0</span>; i &lt; <span class="number">10</span> ; i ++) &#123;</span><br><span class="line">    <span class="comment">// 保存定时器引用</span></span><br><span class="line">    timerQueue[i] = <span class="built_in">setTimeout</span>(printf(i), <span class="number">1000</span>*i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span>; i ++) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 睡眠函数</span></span><br><span class="line"><span class="keyword">const</span> sleep = <span class="function">(<span class="params">timer</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;<span class="built_in">setTimeout</span>(resolve, timer)&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印</span></span><br><span class="line"><span class="keyword">const</span> print = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i =<span class="number">0</span>; i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">        <span class="comment">// 睡眠</span></span><br><span class="line">        <span class="keyword">await</span> sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print()</span><br></pre></td></tr></table></figure>

<p>方案一主要利用了<code>闭包</code>的特性；方案二主要利用了<code>ES6``let</code>模块作用域的特性，for循环每次都保留上一次的值开始循环；方案三主要利用了<code>async</code>异步同步化；</p>
<h2 id="函数的生命周期"><a href="#函数的生命周期" class="headerlink" title="函数的生命周期"></a>函数的生命周期</h2><p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/Snipaste_2021-03-09_00-29-48.png" alt="alt"></p>
<h2 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 记录setTimeout堆栈</span></span><br><span class="line"><span class="keyword">let</span> timerQueue = &#123;&#125;</span><br><span class="line"><span class="comment">// 闭包打印</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printf</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 形成闭包作用域</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 每次打印结束后，清空上一次定时器的闭包引用</span></span><br><span class="line">        timerQueue[i] = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i =<span class="number">0</span>; i &lt; <span class="number">10</span> ; i ++) &#123;</span><br><span class="line">    <span class="comment">// 保存定时器引用</span></span><br><span class="line">    timerQueue[i] = <span class="built_in">setTimeout</span>(printf(i), <span class="number">1000</span>*i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/Snipaste_2021-03-09_01-23-48.png" alt="alt"></p>
<p>每次执行完一次<code>for</code>循环之后，蓝色的线条都会断开，作为<code>函数生命周期的结束标志</code>，但是内部函数还是会保留上次<code>AO</code>对象，且闭包作用域是内部的<code>无名</code>函数。</p>
<p>利用外围<code>timerQueue</code>对象保存定时器引用，适时清空，优化内存占用。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>知识</tag>
      </tags>
  </entry>
  <entry>
    <title>从设计模式出发，带你认识Blob、FileReader</title>
    <url>/article/design-pattern-blob-fileReader/</url>
    <content><![CDATA[<p>从设计模式入手，介绍<code>Blob</code>、<code>FileReader</code>。</p>
<h2 id="虚拟代理模式"><a href="#虚拟代理模式" class="headerlink" title="虚拟代理模式"></a>虚拟代理模式</h2><p>当提及<code>虚拟代理</code>时，你可能下意识的会想到<code>proxy</code>，虚拟代理的核心思想就是在目标对象身上架设起一座桥梁，为它去做一些额外的事。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">    message1: <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">    message2: <span class="string">&quot;everyone&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler3 = &#123;</span><br><span class="line">    get (target, prop, receiver) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(target, prop, receiver)</span><br><span class="line">        <span class="keyword">if</span> (prop === <span class="string">&quot;message2&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;world&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(...arguments);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    set (target, prop, receiver) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;set&#x27;</span>, prop, target, receiver, <span class="built_in">this</span>)</span><br><span class="line">        <span class="keyword">if</span> (prop === <span class="string">&#x27;message1&#x27;</span>) &#123;</span><br><span class="line">            target[prop] = receiver</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxy3 = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler3);</span><br><span class="line"></span><br><span class="line">proxy3.message1 = <span class="string">&#x27;ssdsd&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(proxy3.message1); <span class="comment">// ssdsd</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy3.message2); <span class="comment">// world</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>粘贴了<code>MDN</code>的<code>Proxy</code>示例，配合<code>Reflect</code>去做一些既保留原始行为，又可以自定义行为的功能。</p>
<p>同样的，虚拟代理的原理也很简单，拿一个图片的<code>预加载</code>举一个<code>栗子</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 真实 dom 对象，以及行为   </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TDomObj</span> </span>&#123;</span><br><span class="line">       <span class="keyword">constructor</span>(obj) &#123;</span><br><span class="line">           <span class="built_in">this</span>.trueDom = obj;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       setSrc (url) &#123;</span><br><span class="line">           <span class="built_in">this</span>.trueDom.src = url</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 代理真实 dom</span></span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">ProxyTDom</span> </span>&#123;</span><br><span class="line">       <span class="keyword">constructor</span>(TDom) &#123;</span><br><span class="line">           <span class="built_in">this</span>.TDom = TDom;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       setSrc (url) &#123;</span><br><span class="line">           <span class="comment">// 预加载已设置好的预览图</span></span><br><span class="line">           <span class="built_in">this</span>.TDom.setSrc(<span class="string">&#x27;https://segmentfault.com/img/bVbIDbC&#x27;</span>);</span><br><span class="line">           <span class="comment">// new 一个虚拟的 Image 对象</span></span><br><span class="line">           <span class="keyword">const</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">           img.onload =  <span class="function">() =&gt;</span> &#123;</span><br><span class="line">               <span class="comment">// 监听虚拟 img 加载完毕后，平滑 set</span></span><br><span class="line">               <span class="built_in">this</span>.TDom.setSrc(url);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 虚拟 img 对象去加载真实 img 资源</span></span><br><span class="line">           img.src = url;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>那么，有人会问了，这些跟 <code>Blob</code>、<code>FileReader</code>有什么关系呢？</p>
<h4 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a><code>FileReader</code></h4><p><code>FileReader</code>可以读取用户计算机上的二进制文件。以<code>Blob</code>对象的数据格式去处理。</p>
<p>怎么获取用户计算机文件呢？</p>
<ol>
<li><p>利用<code>input</code>手动上传，监听<code>change</code>；</p>
</li>
<li><p>利用<code>ajax</code>获取服务端文件，可以设置<code>responseType</code>为<code>Blob</code>对象。</p>
</li>
</ol>
<p>（小<code>tip</code>: 阿里 <code>OSS</code> 的图片、文件（pdf等）<code>CDN</code>是不支持预览的，可以借助<code>ajax</code>获取服务端文件，以<code>Blob</code>形式获取后，创建<code>Blob URL</code>，利用<code>createObjectURL(:blob)</code>生成，<code>window.open</code>预览）</p>
<h4 id="Blob"><a href="#Blob" class="headerlink" title="Blob"></a><code>Blob</code></h4><p><code>Blob</code>是一种原始数据对象（其实就是二进制数据对象）；【<code>File</code>继承自<code>Blob</code>】</p>
<p><code>File</code>继承自<code>Blob</code>，所以也就可以引申我们接下来要提到的，<code>图片分片上传</code>，利用<code>Blob</code>对象的<code>splice</code>方法，它可以返回一个新的<code>Blob</code>对象。</p>
<p>相比于一般的<code>base 64</code>的 <code>data url</code>而言，<code>Blob Url</code>更短，字节数更少，所以文件也就很少，可以作为提升性能的一个手段，但是它的局限性在于只能在当前应用内使用，应为生成的<code>Blob URL</code>前缀为当前应用的根路径。不可以跨应用使用。</p>
<h2 id="Now-Show-My-Time"><a href="#Now-Show-My-Time" class="headerlink" title="Now, Show My Time!!!"></a><code>Now, Show My Time!!!</code></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot;</span><br><span class="line">          content&#x3D;&quot;width&#x3D;device-width, user-scalable&#x3D;no, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, minimum-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;file&quot; placeholder&#x3D;&quot;请上传&quot; id&#x3D;&quot;UPLOAD&quot;&gt;</span><br><span class="line">&lt;img id&#x3D;&quot;OUTPUT&quot; src&#x3D;&quot;&quot;&#x2F;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    class TDomObj &#123;</span><br><span class="line">        constructor(obj) &#123;</span><br><span class="line">            this.trueDom &#x3D; obj;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setSrc (url) &#123;</span><br><span class="line">            this.trueDom.src &#x3D; url</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class ProxyTDom &#123;</span><br><span class="line">        constructor(TDom) &#123;</span><br><span class="line">            this.TDom &#x3D; TDom;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setSrc (url) &#123;</span><br><span class="line">            this.TDom.setSrc(&#39;https:&#x2F;&#x2F;segmentfault.com&#x2F;img&#x2F;bVbIDbC&#39;);</span><br><span class="line">            const img &#x3D; new Image();</span><br><span class="line">            img.onload &#x3D;  () &#x3D;&gt; &#123;</span><br><span class="line">                this.TDom.setSrc(url);</span><br><span class="line">            &#125;</span><br><span class="line">            img.src &#x3D; url;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const tdom &#x3D; document.getElementById(&#39;OUTPUT&#39;);</span><br><span class="line"></span><br><span class="line">    const t &#x3D; new TDomObj(tdom);</span><br><span class="line"></span><br><span class="line">    const p &#x3D; new ProxyTDom(t);</span><br><span class="line"></span><br><span class="line">    document.getElementById(&#39;UPLOAD&#39;).addEventListener(&#39;change&#39;, (e) &#x3D;&gt; &#123;</span><br><span class="line">        console.log(e);</span><br><span class="line">        const reader &#x3D; new FileReader();</span><br><span class="line">        reader.onload &#x3D; function () &#123;</span><br><span class="line">            console.log(reader.result)</span><br><span class="line">            p.setSrc(reader.result)</span><br><span class="line">        &#125;</span><br><span class="line">        reader.readAsDataURL(e.target.files[0]);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>


<ul>
<li>自律并不可怕，可怕的是坚持自律。</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
        <category>Blob</category>
        <category>FileReader</category>
      </categories>
      <tags>
        <tag>新得感悟</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>重温V8引擎事件循环，反思异步带来的现代化开发壁障</title>
    <url>/article/v8toasyncQeq/</url>
    <content><![CDATA[<blockquote>
<p>孔夫子有云：温故而知新。</p>
</blockquote>
<p>不断的回味以前对于知识的理解，不断的实践，不断的推翻，逆向思考，新的知识就会慢慢浮现。</p>
<h2 id="一分钟理解微任务、宏任务"><a href="#一分钟理解微任务、宏任务" class="headerlink" title="一分钟理解微任务、宏任务"></a>一分钟理解微任务、宏任务</h2><p><code>宏任务</code>:</p>
<ul>
<li><code>DOM</code>事件</li>
<li><code>setTimeout</code></li>
<li><code>setInterval</code></li>
<li>脚本</li>
<li><code>I/O</code></li>
</ul>
<p><code>微任务</code></p>
<ul>
<li><code>promise</code></li>
<li><code>GC</code></li>
<li>等等</li>
</ul>
<p><strong>当然，<code>requestIdleCallback</code>和<code>requestAnimationFrame</code>不属于<code>task</code>，它们是浏览器渲染过程的一步，和<code>task</code>／<code>microtask</code>的执行是分离的。</strong> </p>
<p>小二，先上一道烂大街的面试题！</p>
<p>讲述下事件循环：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;同步代码开始&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asycn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> async1()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;同步代码结束&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>答案公布：</p>
<p>同步代码开始</p>
<p>3</p>
<p>2</p>
<p>同步代码结束</p>
<p>4</p>
</blockquote>
<p>第一步：整个代码块被扔进了<code>宏任务</code>中；</p>
<p>第二步：<code>console</code>同步代码被放入执行栈中开始执行，打印 <em>同步代码开始</em></p>
<p>第三步：<code>Promise</code>构造函数是同步代码，压栈执行，打印<em>3</em>、<em>2</em></p>
<p>第四步：<code>console</code>同步代码被放入执行栈中开始执行，打印 <em>同步代码结束</em></p>
<p>第五步：宏任务代码执行完毕，检查是否有微任务代码可以执行。</p>
<p>第六步：<code>async</code>函数中的出现 <code>await</code> 后，之后的代码被放入<code>Promise.then</code>中，微任务队列开始执行。</p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p>【1】从一道题浅说js事件循环（<a href="https://github.com/dwqs/blog/issues/61">https://github.com/dwqs/blog/issues/61</a> ）</p>
<p>【2】requestIdleCallback和requestAnimationFrame详解（<a href="https://www.cnblogs.com/cangqinglang/p/13877078.html">https://www.cnblogs.com/cangqinglang/p/13877078.html</a> ）</p>
<h2 id="反思壁障"><a href="#反思壁障" class="headerlink" title="反思壁障"></a>反思壁障</h2><p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/fenbaobao.jpg" alt="alt"></p>
<h3 id="由快慢async发出的思考"><a href="#由快慢async发出的思考" class="headerlink" title="由快慢async发出的思考"></a>由快慢<code>async</code>发出的思考</h3><p>【1】slow-async-await（<a href="https://mdn.github.io/learning-area/javascript/asynchronous/async-await/slow-async-await.html%EF%BC%89">https://mdn.github.io/learning-area/javascript/asynchronous/async-await/slow-async-await.html）</a></p>
<p>【2】fast-async-await（<a href="https://mdn.github.io/learning-area/javascript/asynchronous/async-await/fast-async-await.html%EF%BC%89">https://mdn.github.io/learning-area/javascript/asynchronous/async-await/fast-async-await.html）</a></p>
<p>接下来，我们慢慢食用代码：</p>
<p>— <code>timeoutPromise</code> —</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeoutPromise</span>(<span class="params">interval</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      resolve(<span class="string">&quot;done&quot;</span>);</span><br><span class="line">    &#125;, interval);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>— <code>计时程序</code> —</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> startTime = <span class="built_in">Date</span>.now();</span><br><span class="line">timeTest().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> finishTime = <span class="built_in">Date</span>.now();</span><br><span class="line">  <span class="keyword">let</span> timeTaken = finishTime - startTime;</span><br><span class="line">  alert(<span class="string">&quot;Time taken in milliseconds: &quot;</span> + timeTaken);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>— <code>slow-async-await</code> —</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">timeTest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> timeoutPromise(<span class="number">3000</span>);</span><br><span class="line">  <span class="keyword">await</span> timeoutPromise(<span class="number">3000</span>);</span><br><span class="line">  <span class="keyword">await</span> timeoutPromise(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>— <code>fast-async-await</code> —</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">timeTest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> timeoutPromise1 = timeoutPromise(<span class="number">3000</span>);</span><br><span class="line">  <span class="keyword">const</span> timeoutPromise2 = timeoutPromise(<span class="number">3000</span>);</span><br><span class="line">  <span class="keyword">const</span> timeoutPromise3 = timeoutPromise(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> timeoutPromise1;</span><br><span class="line">  <span class="keyword">await</span> timeoutPromise2;</span><br><span class="line">  <span class="keyword">await</span> timeoutPromise3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>看下<code>MDN</code>的解释：</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/Snipaste_2021-03-17_20-51-49.png"></p>
<p>这句<code>同时启动它们的关联进程</code>可能很难理解，其实不难，理解了<code>async await</code>—&gt; <code>promise</code>后，原理一目了然：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 转换前</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换后</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">        res();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>起因就是因为<code>async</code>将异步代码真的<code>同步化</code>了，导致同步代码也进入了<code>异步等待中</code>，所以使用变量保存<code>Promise</code>的执行状态，实际上可以理解为<code>并行执行了异步的构造任务</code>。</p>
<h4 id="参考链接-1"><a href="#参考链接-1" class="headerlink" title="参考链接"></a>参考链接</h4><p>【1】MDN（<a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Asynchronous/Async_await">https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Asynchronous/Async_await</a> ）</p>
<p>【2】js异步梳理：1.从浏览器的多进程到JS的单线程，理解JS运行机制（<a href="https://www.cnblogs.com/hezhi/p/10484884.html">https://www.cnblogs.com/hezhi/p/10484884.html</a> ）</p>
<p>【3】为什么要在变量中存储Promise对象？（<a href="https://www.debugcn.com/article/53568001.html">https://www.debugcn.com/article/53568001.html</a> ）</p>
<h3 id="由useState闭包引发的思考与如何跳出闭包壁障"><a href="#由useState闭包引发的思考与如何跳出闭包壁障" class="headerlink" title="由useState闭包引发的思考与如何跳出闭包壁障"></a>由<code>useState</code>闭包引发的思考与如何跳出闭包壁障</h3><p>国际惯例，先扔一道烂大街的面试题：</p>
<blockquote>
<p>React 闭包陷阱如何用 useReducer 解决? </p>
<pre><code>              ---- 阿里云前端面试</code></pre>
</blockquote>
<p>直接上代码地址：<a href="https://imweb.io/topic/5cd845cadcd62f86299fcd76">https://imweb.io/topic/5cd845cadcd62f86299fcd76</a></p>
<p>问题原因请慢慢食用，解决方案如下：</p>
<ul>
<li><code>useState</code> 的实现原理就是利用了闭包。</li>
</ul>
<blockquote>
<p>官方原话是：useEffect、useMemo、useCallback都是自带闭包的。每一次组件的渲染，它们都会捕获当前组件函数上下文中的状态(state, props)，所以每一次这三种hooks的执行，反映的也都是当前的状态，你无法使用它们来捕获上一次的状态。</p>
</blockquote>
<ul>
<li>怎么解决呢？</li>
</ul>
<p>useReducer 的 dispatch 可以在全局中保持唯一不变的引用，所以用它更新一定能操作最新的值，其次是借助 setState 使用函数更新，更新当前闭包 作用域的旧值，还可以借助 useRef 在外围拿到最新值，因为对象引用不变，所以也能拿到最新值，其次是添加依赖项。</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/Kapture_2021_03_17_1.gif"></p>
<p><img src="https://tva1.sinaimg.cn/large/006tKfTcgy1fpn4emgz3ng308c04ohdt.gif"></p>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>以上就是今日份的知识总结，请君慢用～～～</p>
]]></content>
      <categories>
        <category>V8</category>
      </categories>
      <tags>
        <tag>原理</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>一道有意思的题目</title>
    <url>/article/a-meaning-page/</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * add = num =&gt; num+10</span></span><br><span class="line"><span class="comment"> * mult = num =&gt; num*2</span></span><br><span class="line"><span class="comment"> * 实现一个fn = compose(mult, add)</span></span><br><span class="line"><span class="comment"> * 使得fn(5) = 20</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="答案一"><a href="#答案一" class="headerlink" title="答案一"></a>答案一</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> add = <span class="function"><span class="params">num</span> =&gt;</span> num + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> mult = <span class="function"><span class="params">num</span> =&gt;</span> num*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> other = <span class="function"><span class="params">num</span> =&gt;</span> num *<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> compose = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> _o = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>) || [];</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params">...rest</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!_o.length) &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="keyword">if</span> (_o.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> inner.call(<span class="literal">null</span>, _o.splice(<span class="number">0</span>, <span class="number">1</span>)[<span class="number">0</span>].apply(<span class="literal">null</span>, rest))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> _o[<span class="number">0</span>].apply(<span class="literal">null</span>, rest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function"><span class="params">num</span> =&gt;</span> num + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> mult = <span class="function"><span class="params">num</span> =&gt;</span> num*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> other = <span class="function"><span class="params">num</span> =&gt;</span> num *<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">...funcs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (funcs.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">arg</span> =&gt;</span> arg</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (funcs.length === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> funcs[<span class="number">0</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> funcs.reduceRight(<span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> a(b(...args)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面是比较好的两种方法，其中第一种是利用了递归的思路，第二种利用了<code>reduce</code>函数，实现了函数组合，至于函数组合的执行顺序，借助<code>reduce</code>&amp;<code>reduceRight</code>来控制。</p>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>结尾处，可以再次引什出函数柯里化：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 计算两数之和</span></span><br><span class="line"><span class="keyword">const</span> carry = <span class="function">(<span class="params">f, o</span>) =&gt;</span> &#123;</span><br><span class="line">    o = o || [];</span><br><span class="line">    <span class="keyword">const</span> _len = f.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> _o = [...o.slice(), ...Array.from(<span class="built_in">arguments</span>)];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(_o.length &lt; _len) &#123;</span><br><span class="line">            <span class="keyword">return</span> carry.call(<span class="built_in">this</span>, f, _o);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> f.apply(<span class="built_in">this</span>, _o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">a,b,c</span>) =&gt;</span> a+b+c;</span><br><span class="line"><span class="keyword">const</span> newSum = carry(sum);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newSum(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>核心思维：借助闭包的活动对象，保留柯里参数，当柯里参数与被柯里函数的参数长度一致的时候执行。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>知识</tag>
      </tags>
  </entry>
  <entry>
    <title>《重构》---- 读书笔记</title>
    <url>/article/refactor-code/</url>
    <content><![CDATA[<div><span><h1>读《重构》（第二版）有感</h1><h2><b>开篇一些好的语录</b></h2><ul><li><div>软件不死，重构不歇。----—余晟，《代码整洁之道：程序员的职业素养》译者</div></li><li><div>重构的最终目的始终是为了减少重构。</div></li><li><div>重构的先决条件是：测试先行。</div></li></ul><h3>第一章手札</h3><ul><li><div>重构手法</div></li></ul>
<img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/Image.png"/>
  <div>我觉的最有感慨的还是对于多态取代条件表达式；</div><div>先来补一补，什么是<b>多态</b>？</div><div style="--en-callout:true;"><div>多态：一个事物的多种形态，例如动物中，小猫可以“喵喵喵”，小狗可以“汪汪汪”。</div></div><div style="--en-callout:true;"><div>为什么需要多态？</div><div>究其最终原因还是为了实现代码重用。</div></div>

  <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Movie</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name, price) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> <span class="title">movieName</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> <span class="title">moviePrice</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc </span>恐怖电影</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HorrorMovie</span> <span class="keyword">extends</span> <span class="title">Movie</span></span>&#123;</span><br><span class="line">    <span class="keyword">get</span> <span class="title">movieName</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`恐怖片片名：<span class="subst">$&#123;<span class="built_in">super</span>.movieName&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComedyMovie</span> <span class="keyword">extends</span> <span class="title">Movie</span></span>&#123;</span><br><span class="line">    <span class="keyword">get</span> <span class="title">movieName</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`喜剧片片名：<span class="subst">$&#123;<span class="built_in">super</span>.movieName&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> horrorMovie = <span class="keyword">new</span> HorrorMovie(<span class="string">&#x27;惊悚乐园&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="keyword">const</span> comedyMovie = <span class="keyword">new</span> ComedyMovie(<span class="string">&#x27;小鬼当家&#x27;</span>, <span class="number">27</span>);</span><br><span class="line"><span class="built_in">console</span>.log(horrorMovie.movieName, comedyMovie.movieName)</span><br></pre></td></tr></table></figure>

<p>以上就是多态的展现手法之一，重写。</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210220213524.png?x-oss-process=image/quality,q_80"></p>
<p>当然。还可以通过方法重载去实现，不过<code>js</code>通常需要借助<code>arguements</code>去实现，利用<code>typescript</code>去强化实现则更佳。</p>
<p>个人观点：我觉的重构是什么？当读完第一章后，我觉的跟我之前理解的重构相差不大。</p>
<p>我们在每一次迭代中，尽量不去动那些运转正常的代码，当迭代或者需求变更时，那些“不该动”的代码，不得不动的时候，这个时候就需要警惕，我们需要重构了。</p>
<p>然而，重构需要遵循以下原则：</p>
<ul>
<li>不破坏以往的需求点</li>
<li>重构之前有完整的测试用例支撑现有功能点正常运行，保证我们写的重构代码是“可以被信任的”，可以用于“生产环境的”。</li>
<li>重构的目的是更好的维护与添加现有功能，而不是仅仅是当前迭代的重构，重构应该本着不需要再次重构的方向去靠拢。</li>
</ul>
<h2 id="第二章手札"><a href="#第二章手札" class="headerlink" title="第二章手札"></a>第二章手札</h2><p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/Snipaste_2021-02-22_20-18-12.png?x-oss-process=image/quality,q_80"></p>
<p>带着下面的疑问，我们继续探索书籍的第二章：</p>
<ul>
<li>什么时候应该重构，什么时候不应该重构？</li>
<li>重构势必会增加工作量，我们应该如何应对？</li>
<li>好的代码需要被重构吗？</li>
</ul>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/Snipaste_2021-02-22_20-23-00.png?x-oss-process=image/quality,q_80"></p>
<p>好的设计方法：</p>
<ul>
<li>简单设计</li>
<li>增量式设计 </li>
<li>YAGNI[mf-yagni] ——“你不会需要它”（you arenʼt going to need it）的缩写</li>
</ul>
<p><em>重构与性能</em></p>
<blockquote>
<p>克莱斯勒综合薪资系统的支付过程太慢了。虽然我们的开发还没结束，这个问题却已经开始困扰<br>我们，因为它已经拖累了测试速度。</p>
<p>Kent Beck、Martin Fowler和我决定解决这个问题。等待大伙儿会合的时间里，凭着对这个系统的<br>全盘了解，我开始推测：到底是什么让系统变慢了？我想到数种可能，然后和伙伴们谈了几种可能的<br>修改方案。最后，我们就“如何让这个系统运行更快”，提出了一些真正的好点子。<br>然后，我们拿Kent的工具度量了系统性能。我一开始所想的可能性竟然全都不是问题肇因。我们<br>发现：系统把一半时间用来创建“日期”实例（instance）。更有趣的是，所有这些实例都有相同的几个<br>值。</p>
<p>于是我们观察日期对象的创建逻辑，发现有机会将它优化。这些日期对象在创建时都经过了一个<br>字符串转换过程，然而这里并没有任何外部数据输入。之所以使用字符串转换方式，完全只是因为代<br>码写起来简单。好，也许我们可以优化它。</p>
<p>然后，我们观察这些日期对象是如何被使用的。我们发现，很多日期对象都被用来产生“日期区<br>间”实例——由一个起始日期和一个结束日期组成的对象。仔细追踪下去，我们发现绝大多数日期区间<br>是空的！</p>
<p>处理日期区间时我们遵循这样一个规则：如果结束日期在起始日期之前，这个日期区间就该是空<br>的。这是一条很好的规则，完全符合这个类的需要。采用此规则后不久，我们意识到，创建一个“起始<br>日期在结束日期之后”的日期区间，仍然不算是清晰的代码，于是我们把这个行为提炼成一个工厂函<br>数，由它专门创建“空的日期区间”。</p>
<p>我们做了上述修改，使代码更加清晰，也意外得到了一个惊喜：可以创建一个固定不变的“空日期<br>区间”对象，并让上述调整后的工厂函数始终返回该对象，而不再每次都创建新对象。这一修改把系统<br>速度提升了几乎一倍，足以让测试速度达到可接受的程度。这只花了我们大约五分钟。<br>我和团队成员（Kent和Martin谢绝参加）认真推测过：我们了若指掌的这个程序中可能有什么错<br>误？我们甚至凭空做了些改进设计，却没有先对系统的真实情况进行度量。</p>
<p>我们完全错了。除了一场很有趣的交谈，我们什么好事都没做。</p>
<p>教训是：哪怕你完全了解系统，也请实际度量它的性能，不要臆测。臆测会让你学到一些东西，<br>但十有八九你是错的。</p>
<pre><code>                                       ——Ron Jeffries</code></pre>
</blockquote>
<p>上面的故事，其实也从反面思维告诉了我们一个道理，<em>写好每一行代码</em>是要义，还记得以前看过一句话<em>一个优秀的程序员并不是满天飞的架构，而是他写的每一行代码</em>。</p>
<p>看完了一整章的内容，有必要回答刚开始的三个问题：</p>
<ul>
<li>什么时候应该重构，什么时候不应该重构？<ul>
<li>当一大堆“丑陋”的代码工作正常，但是不影响你正常开发下，我们并不需要重构它，因为可能会显式的增加你的工作量。那么，什么时候应该重构呢？当你的需求要求你不得不改动<br>原有的“丑陋的代码”的时候，这个时候你就需要考虑重构了。</li>
</ul>
</li>
<li>重构势必会增加工作量，我们应该如何应对？<ul>
<li>提前做好预算是必须的，特别是时间预算，务必准备好你的“健全”的测试用例。</li>
</ul>
</li>
<li>好的代码需要被重构吗？<ul>
<li>答案是很显著的，好的代码的也需要被重构，随着每次迭代的进行，好的代码终将会有“不好”的那一面，始终记得我们一开始说过的“软件不死，重构不歇”。</li>
</ul>
</li>
</ul>
<h2 id="第三章-手札"><a href="#第三章-手札" class="headerlink" title="第三章 手札"></a>第三章 手札</h2><p><strong>无论是重构还是设计代码，我们的起点始终是写好每一行代码。</strong></p>
<p>好的代码的基本素养：</p>
<ul>
<li>好的命名：函数声明（124）（用于给函数改名）、变<br>量改名（137）、字段改名（244）等，其实有经验的程序员都明白一个东西就是，好的命名是不需要加注释的。</li>
<li>避免重复代码：简洁代码的要义的“抽象”，抽象一切可复用逻辑；</li>
<li>过长函数的优化：短小精悍的函数，更容易阐释其意思。（这里的过长函数指的是函数体内容过长，而不是函数命名）；</li>
<li>过长参数列表的优化：对象序列化参数；</li>
<li>抽离全局变量，添加作用域，避免污染全局；</li>
<li>注释，一些注释是必须的，但是在写注释之前，请先考虑重构是否可以解决添加注释的必要；</li>
</ul>
<blockquote>
<p>当你感觉需要撰写注释时，请先尝试重构，试着让所有注释都变得多余。</p>
</blockquote>
<p>小结：其实这一章节的内容主要还是阐述了如何去写好每一行代码，如何约束程序员去书写健壮的代码；’</p>
<h2 id="第四章-手札"><a href="#第四章-手札" class="headerlink" title="第四章 手札"></a>第四章 手札</h2><p>这一章节，其实重点的笔墨应该在如何准备“健全”的测试用例上。</p>
<blockquote>
<p>编写未臻完善的测试并经常运行，好过对完美测试的无尽等待。</p>
</blockquote>
<blockquote>
<p>不要因为测试无法捕捉所有的bug就不写测试，因为测试的确可以捕<br>捉到大多数bug。</p>
</blockquote>
<blockquote>
<p>每当你收到bug报告，请先写一个单元测试来暴露这个bug。</p>
</blockquote>
<p>其实，我个人属于<code>敏捷开发爱好者</code>，也就是<code>TDD</code>驱动者，不过常常因为<code>工时</code>制约了<code>TDD</code>的路途，<br>因为<code>TDD</code>的要义是：<code>测试先行，由红变绿</code>；</p>
<p>至于应该进行什么测试<code>黑盒测试</code>或者<code>白盒测试</code>，取决于你的场景。</p>
<p>适当的补全一些<code>BDD</code>行为测试的用例，方便<code>产品</code>、<code>测试</code>或者其他人员，像读短文一样读你的测试用例，在读懂测试用例的前提下，理解既有需求。</p>
<p>其实我觉得白盒测试更加适用于<code>TDD</code>敏捷开发思维，适用于<code>单元测试</code>层面。而<code>黑盒测试</code>更加适用于<code>BDD</code>思维，以行为驱动测试，以行为阐释需求。</p>
<blockquote>
<p>End：关于解释“黑匣子”和“白匣子”，我觉得这里有一篇qs问答说的比较准确，也值得推敲。<a href="https://qastack.cn/software/27491/black-box-or-white-box-testing-which-do-you-do-first">https://qastack.cn/software/27491/black-box-or-white-box-testing-which-do-you-do-first</a></p>
</blockquote>
<p><a href="https://qastack.cn/software/27491/black-box-or-white-box-testing-which-do-you-do-first">web端qsstack传送门</a></p>
<h2 id="第五章-手札"><a href="#第五章-手札" class="headerlink" title="第五章 手札"></a>第五章 手札</h2><p>重构手法之<code>核心要义</code>：</p>
<ul>
<li>首先是名称（name）。要建造一个重构词汇表，名称是很重要的。</li>
<li>名称之后是一个简单的速写（sketch）。这部分可以帮助你更快找到你所需要<br>的重构手法。</li>
<li>动机（motivation）为你介绍“为什么需要做这个重构”和“什么情况下不该做这<br>个重构”。</li>
<li>做法（mechanics）简明扼要地一步一步介绍如何进行此重构。</li>
<li>范例（examples）以一个十分简单的例子说明此重构手法如何运作。</li>
</ul>
<p>貌似第五章仅仅是作者的介绍重构的<code>前戏</code>，欲听<code>后戏</code>如何，请见下章内容。</p>
<h2 id="第六章-重构名录"><a href="#第六章-重构名录" class="headerlink" title="第六章 重构名录"></a>第六章 重构名录</h2><blockquote>
<p>低层级代码重构的精髓—形成函数并给函数命名。</p>
</blockquote>
<h3 id="提炼函数法则"><a href="#提炼函数法则" class="headerlink" title="提炼函数法则"></a>提炼函数法则</h3><p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/Snipaste_2021-03-02_23-55-22.png?x-oss-process=image/quality,q_80" alt="alt"></p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/Snipaste_2021-03-03_00-09-37.png?x-oss-process=image/quality,q_80" alt="alt"></p>
<p>核心观点阐释了：应该将“意图与实现分开”，“函数不要过长”；</p>
<p>做法：</p>
<ul>
<li>创造一个新函数，根据这个函数的意图来对它命名（以它“做什么”来命名，而<br>不是以它“怎样做”命名）</li>
<li>将待提炼的代码从源函数复制到新建的目标函数中。</li>
<li>仔细检查提炼出的代码，看看其中是否引用了作用域限于源函数、在提炼出的<br>新函数中访问不到的变量。若是，以参数的形式将它们传递给新函数。</li>
<li>所有变量都处理完之后，编译。</li>
<li>在源函数中，将被提炼代码段替换为对目标函数的调用。</li>
<li>测试。</li>
<li>查看其他代码是否有与被提炼的代码段相同或相似之处。如果有，考虑使用以<br>函数调用取代内联代码（222）令其调用提炼出的新函数。</li>
</ul>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/Snipaste_2021-03-03_00-30-57.png?x-oss-process=image/quality,q_80" alt="alt"></p>
<h3 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h3><p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/Snipaste_2021-03-03_00-47-20.png?x-oss-process=image/quality,q_80" alt="alt"></p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/Snipaste_2021-03-03_00-47-20.png?x-oss-process=image/quality,q_80" alt="ALT"></p>
<p>核心观点：属于函数内部的代码就尽量去内敛它。</p>
<p>做法：</p>
<ul>
<li>检查函数，确定它不具多态性。</li>
<li>找出这个函数的所有调用点。</li>
<li>将这个函数的所有调用点都替换为函数本体。</li>
<li>每次替换之后，执行测试。</li>
<li>删除该函数的定义。</li>
</ul>
<h3 id="提炼变量"><a href="#提炼变量" class="headerlink" title="提炼变量"></a>提炼变量</h3><p>提炼变量的法则其实很简单，就是将返回变量作为行内表达式，避免多声明一堆不必要的变量。</p>
<ul>
<li>检查确认变量赋值语句的右侧表达式没有副作用。</li>
<li>如果变量没有被声明为不可修改，先将其变为不可修改，并执行测试。<blockquote>
<p>这是为了确保该变量只被赋值一次。</p>
</blockquote>
</li>
<li>找到第一处使用该变量的地方，将其替换为直接使用赋值语句的右侧表达式。<br>测试。</li>
<li>重复前面两步，逐一替换其他所有使用该变量的地方。</li>
<li>删除该变量的声明点和赋值语句。</li>
<li>测试。</li>
</ul>
<p><code>摘录来自: 马丁·福勒(Martin Fowler). “重构：改善既有代码的设计（第2版）。” Apple Books. </code></p>
<h3 id="改变函数声明"><a href="#改变函数声明" class="headerlink" title="改变函数声明"></a>改变函数声明</h3><p>通常的手法就是给函数换一个名字，或者去除不必要的函数，以这个函数<code>做了</code>什么去描述，而不是<code>如何去做</code>命名。</p>
<h3 id="封装变量"><a href="#封装变量" class="headerlink" title="封装变量"></a>封装变量</h3><p>动机：<code>数据不可变性</code>；</p>
<p>做法：提供 <code>get</code> |  <code>set</code>方法给使用者使用。</p>
<h3 id="变量改名"><a href="#变量改名" class="headerlink" title="变量改名"></a>变量改名</h3><p>好的变量是代码阅读的基石；</p>
<h3 id="函数组合成类"><a href="#函数组合成类" class="headerlink" title="函数组合成类"></a>函数组合成类</h3><p>当一组函数形影不离的操作一段数据，那么就可以利用函数组合成类；</p>
<h3 id="代码拆分"><a href="#代码拆分" class="headerlink" title="代码拆分"></a>代码拆分</h3><p>将耦合代码拆分；</p>
<h2 id="第七章-封装"><a href="#第七章-封装" class="headerlink" title="第七章 封装"></a>第七章 封装</h2><p>封装是面向对象的编程思想，好的封装手法可以更好的杜绝一些不必要的失误，也是扩展性的阐释。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>《重构》</tag>
      </tags>
  </entry>
  <entry>
    <title>从防抖节流再次思考业务，怎么让用户体验更佳</title>
    <url>/article/debounce-throlle/</url>
    <content><![CDATA[<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/Snipaste_2021-03-14_14-09-41.png"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>早些时候看到了防抖节流的一个新的实现，<a href="https://github.com/mqyqingfeng/Blog/issues/22">传送门</a>;</p>
<p>当看到第四部分的实现，源码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第四版</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait, immediate</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> timeout;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> context = <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (timeout) <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">        <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">            <span class="comment">// 如果已经执行过，不再执行</span></span><br><span class="line">            <span class="keyword">var</span> callNow = !timeout;</span><br><span class="line">            timeout = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                timeout = <span class="literal">null</span>;</span><br><span class="line">            &#125;, wait)</span><br><span class="line">            <span class="keyword">if</span> (callNow) func.apply(context, args)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            timeout = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                func.apply(context, args)</span><br><span class="line">            &#125;, wait);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于这个<code>immediate</code>参数也是不明觉厉，思考了一番，那我们之前的用法岂不是稍微有一点问题的？<br>带着这个疑问，我再次打开了<code>IDE</code>，开始调试代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 连续触发 n 秒后执行</span></span><br><span class="line"><span class="comment">// 连续触发，但是只执行第一次触发的函数，之后在n秒后，再次执行函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> debounce = <span class="function">(<span class="params">fn, delay, immediate = <span class="literal">false</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> timer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">...rest</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(timer) &#123; <span class="built_in">clearTimeout</span>(timer) &#125;</span><br><span class="line">        <span class="comment">// 当开启立即模式，也就是先执行，后防抖，更加合理</span></span><br><span class="line">        <span class="keyword">if</span>(immediate) &#123;</span><br><span class="line">            <span class="keyword">const</span> nowDo = !timer;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">            &#125;, delay);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (nowDo) &#123;</span><br><span class="line">                fn.apply(<span class="built_in">this</span>, rest);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                fn.apply(<span class="built_in">this</span>, rest);</span><br><span class="line">            &#125;, delay);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模式一</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> print = <span class="function">() =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">&quot;dayin&quot;</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> deP = debounce(print, <span class="number">800</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;模式一&#x27;</span>)</span><br><span class="line">deP()</span><br><span class="line">deP()</span><br><span class="line">deP()</span><br><span class="line">deP()</span><br><span class="line">deP()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;模式二&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> deP2 = debounce(print, <span class="number">800</span>,<span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">deP2()</span><br><span class="line">deP2()</span><br><span class="line">deP2()</span><br><span class="line">deP2()</span><br><span class="line">deP2()</span><br><span class="line">deP2()</span><br></pre></td></tr></table></figure>

<p>分别从两种模式出发，看到了这个参数的作用，这个时候真实眼前一亮，这不是更符合用户体验规则。</p>
<p><strong>从开发人员过度到用户，我们始终追求的是用户体验极致的效果，因为，用户希望一点击之后就会有效果，而不是点击后若干秒之后再去响应</strong></p>
<p><code>demo</code>如下:</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/Kapture%202021-03-14%20at%2016.09.46.gif"></p>
<p>应该可以很清晰看到：模式二先执行，并且只打印了一次，而模式一后执行，也只打印了一次。</p>
<h2 id="真实线上体验"><a href="#真实线上体验" class="headerlink" title="真实线上体验"></a>真实线上体验</h2><p>以下是我重构且维护过的一块业务逻辑，其中登陆为了防止用户恶意触发登陆接口，所以加了防抖控制。</p>
<p>略微有点缺陷就是，防抖时机可能不太合适，后续可以考虑优化掉，虽然影响不大，但是程序猿就是要追求极致。</p>
<h2 id="番外篇"><a href="#番外篇" class="headerlink" title="番外篇"></a>番外篇</h2><p>今天是<code>白色情人节</code>，这么晴朗的日子里，小王当然是在<code>KFC</code>陪我的代码女朋友度过了。</p>
<p>生活中有许多我们可以坚持的事，无论好与坏，都是值得的。</p>
<p>有若干次都有一种感觉，仿佛回到了高三那个时候，再次寒窗苦读，这或许就是学习负债吧，学校不努力，毕业徒伤悲，再次给补回去。</p>
<p>为了什么呢？让自己变<code>聪明</code>点吧，通过不断思考，希望勤能补拙。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>防抖</tag>
        <tag>节流</tag>
      </tags>
  </entry>
  <entry>
    <title>单元测试--终章</title>
    <url>/article/the-end-unit-test/</url>
    <content><![CDATA[<h2 id="被测组件划分"><a href="#被测组件划分" class="headerlink" title="被测组件划分"></a>被测组件划分</h2><blockquote>
<p>展示组件：通常定义为只用于展示的组件，例如 Icon、Badge……，遵循 Props –&gt; UI；</p>
</blockquote>
<blockquote>
<p>业务组件：为业务服务，通常集成了独立的功能，可以单独作为模块组件，也可自定义配置；</p>
</blockquote>
<blockquote>
<p>功能组件：通常是支撑业务组件的基类组件，提供一些功能性的支撑，像分页组件的跳转；</p>
</blockquote>
<h2 id="测试场景"><a href="#测试场景" class="headerlink" title="测试场景"></a>测试场景</h2><h3 id="网络请求模拟-发起真实请求"><a href="#网络请求模拟-发起真实请求" class="headerlink" title="网络请求模拟/发起真实请求"></a>网络请求模拟/发起真实请求</h3><ol>
<li>可以模拟封装网络请求的方法，借助<code>jest.mock</code>模拟引用文件，返回需要结果的<code>Promise</code>。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc <span class="variable">example</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123; mount &#125; <span class="keyword">from</span> <span class="string">&#x27;enzyme&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;Componets/app.jsx&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> postData <span class="keyword">from</span> <span class="string">&#x27;../api&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// we can mock it like this as follow</span></span><br><span class="line">jest.mock(<span class="string">&#x27;../api&#x27;</span>, <span class="function">() =&gt;</span> jest.fn(<span class="function">() =&gt;</span> <span class="built_in">Promise</span>.then(&#123;<span class="attr">data</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;eric&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;&#125;)));</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;An Test Example&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    it(<span class="string">&#x27;Should called if mount&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> wrapper = mount(<span class="xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>);</span><br><span class="line">        expect(postData).toBeCalledTimes(<span class="number">1</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>直接模拟真实请求，借助<code>enzyme</code>断言回调的<code>done</code>函数或者<code>async</code>。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc  </span>done example</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date </span>2021-01-13  19:56:58</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author </span>eric wang &lt;jadeface.scholar<span class="doctag">@gmail</span>.com&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@copyright </span>2021 Eric</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123; mount &#125; <span class="keyword">from</span> <span class="string">&#x27;enzyme&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> fetchData <span class="keyword">from</span> <span class="string">&#x27;../api&#x27;</span>;</span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;Test Fetch Data&#x27;</span>, <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line">    fetchData()</span><br><span class="line">        .then(<span class="function"><span class="params">r</span> =&gt;</span> r)</span><br><span class="line">        .finally(<span class="function">() =&gt;</span> done())</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc </span>async example</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date </span>2021-01-13  20:02:29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author </span>eric wang &lt;jadeface.scholar<span class="doctag">@gmail</span>.com&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@copyright </span>2021 Eric</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;Test Fetch Data&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> fetchData();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>根目录新建<code>__mocks__</code>文件夹，内部新建<code>request.js</code>，模拟用户请求。</li>
</ol>
<p>测试异步请求其实还有其余的两种方案可以选择，像请求成功与请求失败：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">jest.mock(<span class="string">&#x27;../request&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> user <span class="keyword">from</span> <span class="string">&#x27;../user&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//断言必须返回一个primose</span></span><br><span class="line">it(<span class="string">&#x27;works with promises&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  expect.assertions(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> user.getUserName(<span class="number">4</span>).then(<span class="function"><span class="params">data</span> =&gt;</span> expect(data).toEqual(<span class="string">&#x27;Mark&#x27;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">it(<span class="string">&#x27;works with resolves&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  expect.assertions(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> expect(user.getUserName(<span class="number">5</span>)).resolves.toEqual(<span class="string">&#x27;Paul&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="jest测试环境之node-amp-browser切换"><a href="#jest测试环境之node-amp-browser切换" class="headerlink" title="jest测试环境之node&amp;browser切换"></a><code>jest</code>测试环境之<code>node</code>&amp;<code>browser</code>切换</h3><p><code>jest</code>默认<code>browser</code>环境，如果需要切换<code>node</code>环境，在顶部追加一段注释就可以了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jest</span>-environment jsdom</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jest</span>-environment node</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>也可以自己内置沙盒去做为<code>jest</code>预置环境。<br><a href="https://jestjs.io/docs/en/configuration">文档指引</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@jest</span>-environment ./my-custom-environment</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="定时器模拟"><a href="#定时器模拟" class="headerlink" title="定时器模拟"></a>定时器模拟</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">jest.useFakeTimers();</span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;Test one timer unit case&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    jest.runAllTimers();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="未实现模块模拟"><a href="#未实现模块模拟" class="headerlink" title="未实现模块模拟"></a>未实现模块模拟</h3><p>诸如<code>window</code>上的某些模块并未实现，像<code>location</code>模块，我们可以借助<code>node</code>环境的<code>global</code>模块下去模拟一个纯净的模块。</p>
<p>像包中的<code>peerDependences</code>我们可以借助，虚拟模块或者真实自定义模块模拟。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = jest.createMockFromModule(<span class="string">&#x27;../user&#x27;</span>);</span><br><span class="line"></span><br><span class="line">user.getAuthenticated = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">  age: <span class="number">622</span>,</span><br><span class="line">  name: <span class="string">&#x27;Mock name&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> user;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例如我们也可以在 TDD 模式下去模拟写未完成的虚拟模块，纯虚拟的</span></span><br><span class="line">jest.mock(</span><br><span class="line">    <span class="string">&#x27;../moduleName&#x27;</span>,</span><br><span class="line">    () =&gt; &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Custom implementation of a module that doesn&#x27;t exist in JS,</span></span><br><span class="line"><span class="comment">         * like a generated module or a native module in react-native.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;<span class="attr">virtual</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>在观摩<code>antd</code>的测试用例的时候，有看到过这样的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://github.com/ant-design/ant-design/issues/20948</span></span><br><span class="line">it(<span class="string">&#x27;not repeat render when Form.Item is not a real Field&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> shouldNotRender = jest.fn();</span><br><span class="line">  <span class="keyword">const</span> StaticInput = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    shouldNotRender();</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Input</span> /&gt;</span></span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> shouldRender = jest.fn();</span><br><span class="line">  <span class="keyword">const</span> DynamicInput = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    shouldRender();</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Input</span> /&gt;</span></span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> formRef = React.createRef();</span><br><span class="line"></span><br><span class="line">  mount(</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Form ref=&#123;formRef&#125;&gt;</span><br><span class="line">        &lt;Form.Item&gt;</span><br><span class="line">          &lt;StaticInput /&gt;</span><br><span class="line">        &lt;/Form.Item&gt;</span><br><span class="line">        &lt;Form.Item name=<span class="string">&quot;light&quot;</span>&gt;</span><br><span class="line">          &lt;DynamicInput /&gt;</span><br><span class="line">        &lt;/Form.Item&gt;</span><br><span class="line">      &lt;/Form&gt;</span><br><span class="line">    &lt;/div&gt;,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  expect(shouldNotRender).toHaveBeenCalledTimes(<span class="number">1</span>);</span><br><span class="line">  expect(shouldRender).toHaveBeenCalledTimes(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  formRef.current.setFieldsValue(&#123; <span class="attr">light</span>: <span class="string">&#x27;bamboo&#x27;</span> &#125;);</span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">Promise</span>.resolve();</span><br><span class="line">  expect(shouldNotRender).toHaveBeenCalledTimes(<span class="number">1</span>);</span><br><span class="line">  expect(shouldRender).toHaveBeenCalledTimes(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>单元测试</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一记之21413</title>
    <url>/article/algorithm-350/</url>
    <content><![CDATA[<h2 id="算法进阶"><a href="#算法进阶" class="headerlink" title="算法进阶"></a>算法进阶</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">第350题：两个数组的交集</span><br><span class="line">给定两个数组，编写一个函数来计算它们的交集。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例一</span></span><br><span class="line"></span><br><span class="line">输入: nums1 = [1,2,2,1], nums2 = [2,2]</span><br><span class="line"></span><br><span class="line">输出: [2,2]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例二</span></span><br><span class="line"></span><br><span class="line">输入: nums1 = [4,9,5], nums2 = [9,4,9,8,4]</span><br><span class="line"></span><br><span class="line">输出: [4,9]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>废话不多说，直接上最优解！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nums1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>, <span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> nums2 = [<span class="number">2</span>,<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queryOmit = <span class="function">(<span class="params">nums1, nums2</span>) =&gt;</span> &#123;</span><br><span class="line">    nums1 = nums1.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a-b)</span><br><span class="line">    nums2 = nums2.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a-b)</span><br><span class="line">    <span class="keyword">let</span> point1 = <span class="number">0</span>, point2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> res = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums1.length &gt; nums2.length ? nums1.length : nums2.length; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums1[point1] === nums2[point2]) &#123;</span><br><span class="line">            res.push(nums1[point1]);</span><br><span class="line">            point1++;</span><br><span class="line">            point2++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums1[point1] &gt; nums2[point2]) &#123;</span><br><span class="line">                point2++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                point1++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (point1 === nums1.length || point2 === nums2.length) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(queryOmit(nums1, nums2));</span><br></pre></td></tr></table></figure>

<h2 id="正则玩法"><a href="#正则玩法" class="headerlink" title="正则玩法"></a>正则玩法</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">权威参考</a></p>
<h3 id="前瞻后瞩"><a href="#前瞻后瞩" class="headerlink" title="前瞻后瞩"></a>前瞻后瞩</h3><p><code>?=</code>前瞻，就是匹配<code>xxx</code>之前的串，<code>?&lt;=</code>后瞩，就是匹配<code>xxx</code>之后的串。</p>
<p><code>example，这里只展示前瞻，后瞩暂不做演示</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">给定字符串<span class="string">&#x27;你好，李焕英！&#x27;</span>，匹配<span class="string">&#x27;！&#x27;</span>之前的字符串；</span><br></pre></td></tr></table></figure>
<p><code>we can do as follow!</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;你好，李焕英！&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/.*(?=！)/</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// <span class="built_in">printf</span> </span><br><span class="line"></span><br><span class="line">[ <span class="string">&#x27;你好，李焕英&#x27;</span>, index: 0, input: <span class="string">&#x27;你好，李焕英！&#x27;</span>, groups: undefined ]</span><br></pre></td></tr></table></figure>

<h3 id="分组匹配"><a href="#分组匹配" class="headerlink" title="分组匹配"></a>分组匹配</h3><p>以一道题目入门分组匹配（题目来源于：热心网友 <code>单女士</code>）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">题目：[1,2,2,2,3,1,4] 变成 1，222，3，1，4</span><br></pre></td></tr></table></figure>

<p>乍一看，肯定有小可爱想上去就是一梭子遍历了吧！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一行代码搞定</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.join(<span class="string">&#x27;&#x27;</span>).match(<span class="regexp">/(\d)\1*/g</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// <span class="built_in">printf</span> </span><br><span class="line"></span><br><span class="line">[ <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;222&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;4&#x27;</span> ]</span><br></pre></td></tr></table></figure>

<p><code>perfect</code>，完美解决！</p>
<p>另外一种解法，来源于<code>圈圈</code>的朋友；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sameItem</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!arr) <span class="keyword">return</span> arr</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> j = <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> item = arr[i]</span><br><span class="line">  <span class="keyword">const</span> res = []</span><br><span class="line">  <span class="keyword">while</span>(j &lt; arr.length) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[j] === arr[i]) &#123;</span><br><span class="line">      item = item + arr[i] * <span class="built_in">Math</span>.pow(<span class="number">10</span>, (j - i))</span><br><span class="line">      j++</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.push(item)</span><br><span class="line">      i = j</span><br><span class="line">      item = arr[i]</span><br><span class="line">      j ++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  res.push(item)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>时间复杂度<code>T(n)</code>，空间复杂度<code>O(2n + 1)</code></p>
<h3 id="零宽断言"><a href="#零宽断言" class="headerlink" title="零宽断言"></a>零宽断言</h3><p><a href="https://www.cnblogs.com/onepixel/articles/7717789.html">权威参考</a></p>
<p>一听这么高大上的名字，肯定被吓到了吧！其实<code>零宽断言</code>就是所谓的<code>前瞻</code>.</p>
<p>以一道题目开始（来源：<code>单女士</code>）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// const arr = [1,2,3, 1,2,3,4,6, 4, 5, 6,7,8]</span><br><span class="line"></span><br><span class="line">// 输出： [<span class="string">&quot;1-3&quot;</span>, <span class="string">&quot;1-4&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;4-8&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>看到这个题目，我的第一直觉是，零宽断言可以实现！</p>
<p>直接上代码:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="string">&#x27;1235679&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a.match(<span class="regexp">/(0(?=1)|1(?=2)|2(?=3)|3(?=4)|4(?=5)|5(?=6)|6(?=7)|7(?=8)|8(?=9))*\d/g</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// <span class="built_in">printf</span> </span><br><span class="line"></span><br><span class="line">[ <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;567&#x27;</span>, <span class="string">&#x27;9&#x27;</span> ]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>简明扼要的叙述下上述正则：</p>
<ul>
<li><code>?=</code>就不说了吧，上文有介绍</li>
<li><code>(0(?=1)|1(?=2)|2(?=3)|3(?=4)|4(?=5)|5(?=6)|6(?=7)|7(?=8)|8(?=9))*</code>，匹配<code>0-9</code>的任意连续数字，并以此为一个组，匹配<code>0</code>次或多次，其实换<code>+</code>也<code>ok</code>。</li>
<li><code>\d</code>的效果，就是约束匹配组后面的东西，说到这里你可能不太理解，继续往下看！</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 随便加了任意字母，结尾匹配以 .</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="string">&#x27;123sssss5679zsss&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a.match(<span class="regexp">/(0(?=1)|1(?=2)|2(?=3)|3(?=4)|4(?=5)|5(?=6)|6(?=7)|7(?=8)|8(?=9))*./g</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;s&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;s&#x27;</span>,   <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;s&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;567&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;z&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;s&#x27;</span>,   <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;s&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后再对比加了数字约束的消效果，其实就是每次匹配到子串之后的串的格式约束。</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/fenbaobaos.webp?x-oss-process=image/quality,q_80"></p>
<p>最后：</p>
<p>清风明月，几分轻狂几分傲，我也想拥有自己的一人之下！</p>
<p>莫念语，清，夙命！</p>
<p>狂。</p>
]]></content>
      <categories>
        <category>日常提升</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一记之21414</title>
    <url>/article/algorithm-314/</url>
    <content><![CDATA[<h2 id="简要回顾"><a href="#简要回顾" class="headerlink" title="简要回顾"></a>简要回顾</h2><p>昨天的<code>leetcode 350</code>，市面上的解法各有千秋，但是时空复杂度以及内存消耗极高。</p>
<p>下面简单再介绍下，我琢磨出来的思路：</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/Snipaste_2021-04-15_00-02-34.png?x-oss-process=image/quality,q_80"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [1,2,2,1]</span></span><br><span class="line"><span class="comment"> * [1,2]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> intersect = <span class="function">(<span class="params">nums1, nums2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> mark = &#123;&#125;;</span><br><span class="line">    nums1.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mark[item]) &#123;</span><br><span class="line">            mark[item] +=<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mark[item] = <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nums2.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mark[item]) &#123;</span><br><span class="line">            mark[item]--</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(intersect([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>]))</span><br></pre></td></tr></table></figure>

<p>上面的代码应该比较直观！</p>
<h3 id="新的题目"><a href="#新的题目" class="headerlink" title="新的题目"></a>新的题目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">编写一个函数来查找字符串数组中的最长公共前缀。</span><br><span class="line"></span><br><span class="line">如果不存在公共前缀，返回空字符串 <span class="string">&quot;&quot;</span>。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例 1</span></span><br><span class="line">输入：strs = [<span class="string">&quot;flower&quot;</span>,<span class="string">&quot;flow&quot;</span>,<span class="string">&quot;flight&quot;</span>]</span><br><span class="line">输出：<span class="string">&quot;fl&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例 2</span></span><br><span class="line">输入：strs = [<span class="string">&quot;dog&quot;</span>,<span class="string">&quot;racecar&quot;</span>,<span class="string">&quot;car&quot;</span>]</span><br><span class="line">输出：<span class="string">&quot;&quot;</span></span><br><span class="line">解释：输入不存在公共前缀。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> longestCommonPrefix = <span class="function"><span class="keyword">function</span>(<span class="params">strs</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!strs.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (strs.length === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> strs[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    strs.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.length - b.length);</span><br><span class="line">    <span class="keyword">let</span> minStr = strs.shift();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; strs.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> point = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (!minStr) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (; point &lt;= minStr.length; point++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(minStr.charAt(point) !== strs[i].charAt(point)) &#123; <span class="keyword">break</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        minStr = minStr.substring(<span class="number">0</span>,point);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> minStr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>谈不上最优解，但是处理边界和大体量数据处理上应该是比较具有优势的。</p>
]]></content>
      <categories>
        <category>日常提升</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows安装WSL</title>
    <url>/article/install-wsl/</url>
    <content><![CDATA[<h1 id="Windows-安装-WSL"><a href="#Windows-安装-WSL" class="headerlink" title="Windows 安装 WSL"></a><code>Windows</code> 安装 <code>WSL</code></h1><p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/2021-1-31-2.png" alt="alt"></p>
<h2 id="详细教程"><a href="#详细教程" class="headerlink" title="详细教程"></a>详细教程</h2><p><a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10">https://docs.microsoft.com/en-us/windows/wsl/install-win10</a></p>
<h2 id="Install-oh-my-zsh"><a href="#Install-oh-my-zsh" class="headerlink" title="Install oh-my-zsh"></a><code>Install</code> <code>oh-my-zsh</code></h2><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># update install source</span></span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get upgrade</span><br></pre></td></tr></table></figure>

<h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install zsh</span></span><br><span class="line">$ sudo apt-get install zsh</span><br></pre></td></tr></table></figure>

<h3 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># set default shell</span></span><br><span class="line">$ chsh -s $(<span class="built_in">which</span> zsh)</span><br></pre></td></tr></table></figure>

<h3 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install oh-my-zsh</span></span><br><span class="line">$ sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>&quot;</span></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ sh -c <span class="string">&quot;<span class="subst">$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Step-5（安装-nvm）"><a href="#Step-5（安装-nvm）" class="headerlink" title="Step 5（安装 nvm）"></a>Step 5（安装 <code>nvm</code>）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install &amp; update</span></span><br><span class="line">$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># setUp Path</span></span><br><span class="line">$ vi ~/.zshrc</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/.nvm&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/bash_completion&quot;</span>  <span class="comment"># This loads nvm bash_completion</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>

<h3 id="Step-6（重要提示）"><a href="#Step-6（重要提示）" class="headerlink" title="Step 6（重要提示）"></a>Step 6（重要提示）</h3><p>完成了上述步骤，需要做最后一步，屏蔽<code>windows</code>的环境变量，使<code>wsl</code>与<code>windows</code>独立环境。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vi ~/.zshrc</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>

<h2 id="采坑指南"><a href="#采坑指南" class="headerlink" title="采坑指南"></a>采坑指南</h2><ol>
<li>当你的 <code>WSL</code>抽风时，例如报错<code>错误0x8000000d</code>;</li>
</ol>
<p>解决办法：</p>
<p><code>可以打开管理员（PowerShell），运行Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</code></p>
<p><em>如果没用！请重装系统，或者是重置 <code>windows</code></em></p>
<ol start="2">
<li>当<code>curl</code>的时候报如下错误：</li>
</ol>
<p>1&gt; <code>SSL certificate problem: unable to get local issuer certificate</code></p>
<p>2&gt; <code>curl:Failed to connect to raw.githubusercontent.com port 443: Connection refused </code></p>
<p>3&gt; <code>404 not found</code></p>
<p>我们可以选用 <code>ProxyChains</code> 这个软件，能够使特定的命令走<code>SOCKS5</code></p>
<ul>
<li>Step 1</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt install proxychains</span><br></pre></td></tr></table></figure>

<ul>
<li>Step 2</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vim /etc/proxychains.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">###按i键进入vim的写入模式####</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###将最后一行改成socks5 你的代理服务器IP 端口号###</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># socks5 127.0.0.1 1080</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###按下Esc后键入“:x”保存并退出vim编辑器###</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><code>github</code> clone 仓库很慢？</li>
</ol>
<p>添加如下 <code>host</code> 到 <code>/etc/hosts</code>;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 199.232.68.133  raw.githubusercontent.com</span></span><br><span class="line"><span class="comment"># 199.232.68.133  user-images.githubusercontent.com</span></span><br><span class="line"><span class="comment"># 199.232.68.133  avatars2.githubusercontent.com</span></span><br><span class="line"><span class="comment"># 199.232.68.133  avatars1.githubusercontent.com</span></span><br><span class="line"><span class="comment"># 151.101.108.133 raw.github.com</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vi /etc/hosts</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> /etc/hosts</span><br></pre></td></tr></table></figure>

<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/2021-1-31-1.png" alt="alt"></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>WSL</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次 mac m1 上安装 canvas 的踩坑记录</title>
    <url>/article/mac-m1-i-canvas/</url>
    <content><![CDATA[<p>最近接触的一个项目是与<code>canvas</code>比较相关的，然后在启动项目的时候就<code>GG</code>了，困难重重，浪费了还是蛮多时间的。</p>
<p>先来看下错误的罪恶源头：</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/canvas_err_for_mac_m1.png?x-oss-process=image/quality,q_80" alt="alt"></p>
<p>我的第一反应是让同事也装一遍：</p>
<p>同事<code>A</code>: <code>Node</code> 版本 <code>v14.0.0</code>  安装会报错，但是不阻塞项目启动。</p>
<p>我的第二反应是：</p>
<p>查看自己的<code>Node</code>版本(<code>v14.6.0</code>)，这可是当前官网的<code>stable</code>版本。<br>然后紧接着心中一声<code>what fuck???!!!</code></p>
<p>随后就是一顿<code>google</code>。</p>
<p>最终。</p>
<hr>
<p><strong>2000 years later</strong></p>
<p><code>m1 的GPU、CPU</code>不支持，那只能手动编译了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># node-canvas github 首页的介绍</span></span><br><span class="line"></span><br><span class="line">If you don<span class="string">&#x27;t have a supported OS or processor architecture, or you use --build-from-source, the module will be compiled on your system. This requires several dependencies, including Cairo and Pango.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如果您没有受支持的OS或处理器体系结构，或者使用--build-from-source，则该模块将在您的系统上编译。这需要几个依赖项，包括Cairo和Pango</span></span><br></pre></td></tr></table></figure>

<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/npm_i_canvas_error_resolve.png?x-oss-process=image/quality,q_80" alt="alt"></p>
<p><code>Perfect</code>，完美解决～～～</p>
<hr>
<p>然而，又有另外一个问题：</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/npm_i_canvas_error_info.png?x-oss-process=image/quality,q_80" alt="alt"></p>
<p>虽然是警告，但是值得关注一波，<code>why?</code></p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/npm_i_node_gyp.png?x-oss-process=image/quality,q_80" alt="alt"></p>
<p>好家伙，原来是被废弃了，推荐我们用另外一个人的：<code>@mapbox/node-pre-gyp:</code></p>
<p>然后紧接着奔着<code>canvas</code>仓库去了。</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/canvas_commit_update_info.png?x-oss-process=image/quality,q_80" alt="alt"></p>
<p>过然在<code>master</code>分支是做了变更的，但是：</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/canvas_2.7.0_info.png?x-oss-process=image/quality,q_80" alt="alt"></p>
<p>心里又是一句：<code>oh my god! what fuck!!??</code></p>
<p>然后，<strong>但行好事，莫问前程</strong>，我提了<code>issue</code>给仓库：</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/canvas_issue.png?x-oss-process=image/quality,q_80" alt="alt"></p>
<p><a href="https://github.com/Automattic/node-canvas/issues/1798">The source code of the 2.7.0 npm package does not contain the changes in the repository. #1798</a></p>
<hr>
<p>But，仓库管理员在30分钟后给我关掉了，给出的回复是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">You are comparing with master and not v2.7.0, there has simply been some commits to master since we cut the 2.7.0 release...</span><br><span class="line"></span><br><span class="line">https://github.com/Automattic/node-canvas/blob/v2.7.0/package.json</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我直呼好家伙，最新版本的<code>release</code>版本不跟<code>master</code>最新代码保持同步？？</p>
<p>老外果然懒啊！</p>
<p>最终就放弃吐槽了，我的问题也解决了。</p>
<hr>
<p>最后，我叫<code>Eric</code>,我跟我的同学在<code>github</code>建立一个<code>Awesome</code>的仓库，有兴趣可以一起参与呀～～～</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/awesome_info.png?x-oss-process=image/quality,q_80" alt="alt"></p>
<p>仓库地址：<a href="https://github.com/bigbigDreamer/awesome">https://github.com/bigbigDreamer/awesome</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>经验</tag>
      </tags>
  </entry>
  <entry>
    <title>涅槃重生，顺势而为</title>
    <url>/article/my-life-and-me/</url>
    <content><![CDATA[<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/wangye.png?x-oss-process=image/quality,q_80" alt="akt"></p>
<p>好久没发过文章了，我也不知道最近怎么了，有些些许消沉与懒散。</p>
<p>我相信会好起来的，一定会的，明天就会！</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>从错误监控方案出发，灵性阅读 Sentry 源码</title>
    <url>/article/error-and-sentry/</url>
    <content><![CDATA[<p>单从 <code>React</code> 应用而言，我们的错误大致分为以下几类：</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/react_error_types.png?x-oss-process=image/quality,q_80" alt="alt"></p>
<p>但是以上的错误类型并不完全，接下来将一一作以阐述：</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>经验</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>从页面死循环“命案”，探究React边界错误</title>
    <url>/article/react-error-boundry/</url>
    <content><![CDATA[<h2 id="事故现场前夕"><a href="#事故现场前夕" class="headerlink" title="事故现场前夕"></a>事故现场前夕</h2><p>不妨先来看看<code>子组件</code>发生异常后，没有捕获错误的情况：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一步：程序正常运行，自组件计时器开始运行</span></span><br><span class="line"><span class="comment"># 第二步：计时器开始计数到3，子组件抛出异常</span></span><br></pre></td></tr></table></figure>

<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/react_error1.gif" alt="alt"></p>
<p>可以比较清晰的看到，页面是挂掉了，但是对于正常情况下，这样的情况是很不友好的，当页面组件足够多的时候，可能只是某一块内容挂掉而导致把全局全部挂掉，不是特别理想。</p>
<h2 id="事故现场"><a href="#事故现场" class="headerlink" title="事故现场"></a>事故现场</h2><p>为什么会死循环？什么导致的死循环？怎么避免呢？</p>
<hr>
<p>划重点：<strong>当父组件使用了<code>getDerivedStateFromError</code>去处理捕获异常的时候，这时候没有后备渲染，就会导致异常无效，进而陷入死循环，更新&lt;===&gt;报错的往复</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ErrorBoundary</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> 	 <span class="comment">// 稍加打印，但不启动后备渲染</span></span><br><span class="line">    <span class="keyword">static</span> getDerivedStateFromError(err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.props.children;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/react_error2.gif" alt="alt"></p>
<h2 id="事故溯源"><a href="#事故溯源" class="headerlink" title="事故溯源"></a>事故溯源</h2><ul>
<li><p>什么是错误边界？</p>
<blockquote>
<p>部分 UI 的 JavaScript 错误不应该导致整个应用崩溃，为了解决这个问题，React 16 引入了一个新的概念 —— 错误边界。</p>
<p>错误边界是一种 React 组件，这种组件<strong>可以捕获并打印发生在其子组件树任何位置的 JavaScript 错误，并且，它会渲染出备用 UI</strong>，而不是渲染那些崩溃了的子组件树。错误边界在渲染期间、生命周期方法和整个组件树的构造函数中捕获错误。</p>
</blockquote>
</li>
</ul>
<p><a href="https://react.docschina.org/docs/error-boundaries.html">React 官网传送门</a></p>
<ul>
<li><p>异常分类</p>
<p>先介绍下<code>React 16之后的两个核心调度阶段</code>：<code>render</code>&amp;<code>commit</code>阶段：</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/react-life-cycle.png?x-oss-process=image/quality,q_80" alt="alt"></p>
<p>图片来源于：<a href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/">https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/</a></p>
<p>而异常分类也发生在这两个阶段，且会有不同的表现：</p>
<h4 id="Render阶段的异常捕获流程"><a href="#Render阶段的异常捕获流程" class="headerlink" title="Render阶段的异常捕获流程"></a><code>Render</code>阶段的异常捕获流程</h4><p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/fiber-error-render.png?x-oss-process=image/quality,q_80" alt="alt"></p>
<p>有必要释疑上面无备用渲染时的场景，先上代码，后上动图。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Child 组件模拟 render 阶段异常</span></span><br><span class="line"><span class="keyword">const</span> BugCounter = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [state, setState] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// setInterval(() =&gt; &#123;</span></span><br><span class="line">        <span class="comment">//     setState(pre =&gt; pre += 1);</span></span><br><span class="line">        <span class="comment">// &#125;, 1000);</span></span><br><span class="line">    &#125;, []);</span><br><span class="line"></span><br><span class="line">    useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(state, <span class="string">&quot;commit 阶段&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if (state === 3) &#123;</span></span><br><span class="line">    <span class="comment">//     // Simulate a JS error</span></span><br><span class="line">    <span class="comment">//     throw new Error(&#x27;I crashed!&#x27;);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;I crashed!&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;span&gt;&#123;state&#125;&lt;/span&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/react_error3.gif" alt="alt"></p>
<p>可以很明显看到，整个视图界面不会崩溃ℳ</p>
<h4 id="Commit阶段的异常捕获流程"><a href="#Commit阶段的异常捕获流程" class="headerlink" title="Commit阶段的异常捕获流程"></a><code>Commit</code>阶段的异常捕获流程</h4><p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/fiber-error-in-commit.jpg?x-oss-process=image/quality,q_80" alt="alt"></p>
</li>
</ul>
<p><strong>CARE：</strong></p>
<ul>
<li><p><code>Render</code>阶段注意点：</p>
<blockquote>
<p>父组件同时定义 getDerivedStateFromError 和 componentDidCatch，如果使用 getDerivedStateFromError 处理异常信息时，没有启用备用渲染， componentDidCatch 不会触发， 异常处理无效，最后还是使用  console.error 打印异常信息。</p>
<p>这一点作一下特别解释：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BugCounter 组件（也即我们的子组件）</span></span><br><span class="line"><span class="keyword">const</span> BugCounter = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [state, setState] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// setInterval(() =&gt; &#123;</span></span><br><span class="line">        <span class="comment">//     setState(pre =&gt; pre += 1);</span></span><br><span class="line">        <span class="comment">// &#125;, 1000);</span></span><br><span class="line">    &#125;, []);</span><br><span class="line"></span><br><span class="line">    useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(state, <span class="string">&quot;commit 阶段&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// if (state === 3) &#123;</span></span><br><span class="line">    <span class="comment">//     // Simulate a JS error</span></span><br><span class="line">    <span class="comment">//     throw new Error(&#x27;I crashed!&#x27;);</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;I crashed!&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;span&gt;&#123;state&#125;&lt;/span&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ErrorBoundary (异常捕获组件，注意：这里并没有开启“备用渲染”)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ErrorBoundary</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> getDerivedStateFromError(err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err, <span class="string">&#x27;getDerivedStateFromError&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> &#123;err&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidCatch(error: <span class="built_in">Error</span>, <span class="attr">errorInfo</span>: React.ErrorInfo) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error, errorInfo, <span class="string">&quot;didCatch&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.props.children;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/react_error4.gif" alt="alt"></p>
</blockquote>
<blockquote>
<p>使用 getDerivedStateFromError 处理子组件异常信息时，要启用备用渲染，否则异常处理无效，最后还是使用 console.error 打印异常信息。</p>
</blockquote>
</li>
<li><p><code>Commit</code>阶段注意点：</p>
<blockquote>
<p>子组件 commit 阶段发生异常，如果父组件定义 getDerivedStateFromError 且没有启用备用渲染，会导致异常处理无效，而且会陷入死循环。</p>
</blockquote>
</li>
<li><p><code>Commit &amp; Render</code>阶段注意点：</p>
<blockquote>
<p>子组件发生异常，react 会寻找离它最近的且定义getDerivedStateFromError、componentDidCatch 的父组件进行异常处理。</p>
</blockquote>
<blockquote>
<p>子组件发生异常，如果父组件没有捕获措施，react 会使用 console.error 打印异常信息。</p>
</blockquote>
</li>
</ul>
<h2 id="事故补救"><a href="#事故补救" class="headerlink" title="事故补救"></a>事故补救</h2><p><strong>当同一种异常在ErrorTimeLimit秒内出现次数大于ErrorNumLimit次时显示错误页面，中断页面显示</strong></p>
<p>大白话讲就是不想让页面一报错就崩掉。</p>
<p><strong>但是，如果错误的异常请求是 XHR，且时间各为一秒，就会几率性绕过补救</strong></p>
<hr>
<p>最合适的方案：<strong>给页面内的组件最小粒度化添加错误边界</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React, &#123; FC &#125; from &#39;react&#39;;</span><br><span class="line">import &#123; ErrorBoundary &#125; from &#39;@sentry&#x2F;react&#39;;</span><br><span class="line">import &#123; ErrorBoundaryProps, FallbackRender &#125; from &#39;@sentry&#x2F;react&#x2F;esm&#x2F;errorboundary&#39;;</span><br><span class="line">import CareIcon from &#39;.&#x2F;care-icon.png&#39;;</span><br><span class="line"></span><br><span class="line">import &#39;.&#x2F;index.less&#39;;</span><br><span class="line"></span><br><span class="line">export type TooCatchErrorPropsExportForUser &#x3D; &#39;fallback&#39; | &#39;onError&#39; | &#39;onMount&#39; | &#39;onUnmount&#39;;</span><br><span class="line">export type ToolCatchErrorProps &#x3D; Pick&lt;ErrorBoundaryProps, TooCatchErrorPropsExportForUser&gt;;</span><br><span class="line"></span><br><span class="line">const t &#x3D; (txt): string &#x3D;&gt; &#123;</span><br><span class="line">    if (window.I18N_T &amp;&amp; typeof txt &#x3D;&#x3D;&#x3D; &#39;string&#39;) &#123;</span><br><span class="line">        return window.I18N_T(txt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return txt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const DefaultFullback: FallbackRender &#x3D; (&#123; componentStack &#125;) &#x3D;&gt; &#123;</span><br><span class="line"></span><br><span class="line">    const modulePos &#x3D; componentStack?.split?.(&#39;\n&#39;)?.[1];</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">        &lt;div className&#x3D;&quot;tool-catch-error-default-fullback&quot;&gt;</span><br><span class="line">            &lt;img src&#x3D;&#123;CareIcon&#125; alt&#x3D;&quot;care-icon&quot;&#x2F;&gt;</span><br><span class="line">            &lt;span className&#x3D;&quot;text&quot;&gt;&#123;&#96;$&#123;t(&#39;模块渲染出错！&#39;)&#125;$&#123;modulePos ? &#39;(&#39; + modulePos + &#39;)&#39; : &#39;&#39;&#125;&#96;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const ToolCatchError: FC&lt;ToolCatchErrorProps&gt; &#x3D; (&#123; children, ...rest &#125;) &#x3D;&gt; &#123;</span><br><span class="line">    const props: ToolCatchErrorProps &#x3D; &#123;</span><br><span class="line">        fallback: DefaultFullback,</span><br><span class="line">        ...rest,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    return (</span><br><span class="line">        &lt;ErrorBoundary &#123;...props&#125;&gt;</span><br><span class="line">            &#123; children &#125;</span><br><span class="line">        &lt;&#x2F;ErrorBoundary&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default ToolCatchError;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里直接用了 <code>Sentry</code>封装好的针对于 <code>React</code>错误边界的组件；</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/react_error_5.gif" alt="alt"></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>经验</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>抛却迷茫，拥抱生活</title>
    <url>/article/giveup-unknow-and-bow-life/</url>
    <content><![CDATA[<p>三月底到五月初的日子里，我像极了一具行尸走肉，微信公众号停更，博客停更。</p>
<p>过完了五一，仿佛想通了一些东西：</p>
<ul>
<li>我需要什么？</li>
<li>我要做什么？</li>
<li>我为了什么？</li>
</ul>
<p>身处互联网行业，最应该被需要的就是”持续学习”，但是持续学习却往往不能够精准落地，实时落地。这才是我最懊恼的地方。</p>
<p>所以长达一个月的时间，我处于一副行尸走肉的状态，无所事事，闲暇的时间都交给了”游戏”和”没有营养的博客”。</p>
<p>一直在提醒自己，一定要做点什么，一直下不去手，”why”？”where is my 动力”？</p>
<p>也曾愤怒的摔过东西，懊恼的抱怨过这，抱怨过那，但是最终还是归于平静。</p>
<h2 id="碎片化时间"><a href="#碎片化时间" class="headerlink" title="碎片化时间"></a>碎片化时间</h2><p>碎片化时间尝试弯道超车，超过同起跑线的人。</p>
<h2 id="厚积薄发"><a href="#厚积薄发" class="headerlink" title="厚积薄发"></a>厚积薄发</h2><p>每天也只有那么点时间去充实知识盲区，所以需要很必要的温习与总结，因为需要积累。</p>
<h2 id="克制与坚持"><a href="#克制与坚持" class="headerlink" title="克制与坚持"></a>克制与坚持</h2><p>克制欲望（游戏、各种乌七八糟的东西），坚持一件事，坚持走到底。</p>
<p>的确，得到一些东西就会失去一些东西，但我希望我失去的换来的是值得的东西。</p>
<p>为了自己，需要克制，我要坚持。</p>
<p>毕。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>新兴前端框架 Svelte 从入门到原理</title>
    <url>/article/svelte/</url>
    <content><![CDATA[<p><strong>以下文章来源于字节前端 ByteFE ，作者雾豹</strong></p>
<hr>
<p>在这篇文章中，我们将会介绍 Svelte 框架的特性、优缺点和底层原理。</p>
<blockquote>
<p>本文尽量不会涉及 Svelte 的语法，大家可以放心食用。因为 Svelte 的语法极其简单，而且官方教程学习曲线平缓<a href="https://www.sveltejs.cn/%EF%BC%8C%E7%9B%B8%E4%BF%A1%E5%A4%A7%E5%AE%B6%E5%BE%88%E5%BF%AB%E5%B0%B1%E4%BC%9A%E4%B8%8A%E6%89%8B%E8%AF%AD%E6%B3%95%E7%9A%84%EF%BC%8C%E8%BF%99%E9%87%8C%E5%B0%B1%E4%B8%8D%E5%81%9A%E5%AE%98%E7%BD%91%E6%90%AC%E8%BF%90%E5%B7%A5%E4%BA%86%E3%80%82">https://www.sveltejs.cn/，相信大家很快就会上手语法的，这里就不做官网搬运工了。</a></p>
</blockquote>
<p>前端领域是发展迅速，各种轮子层出不穷的行业。最近这些年，随着三大框架<code>React</code>、<code>Vue</code>、<code>Angular</code>版本逐渐稳定，前端技术栈的迭代似乎缓慢下来，<code>React 16</code>版本推出了 <code>Fiber</code>， <code>Vue 3.0</code> 也已经在襁褓之中。</p>
<p>如果我们把目光拉伸到未来十年的视角，前端行业会出现哪些框架有可能会挑战<code>React</code>或者<code>Vue</code>呢？我们认为，崭露头角的 <code>Svelte</code> 应该是其中的选项之一。</p>
<h2 id="Svelte-简介"><a href="#Svelte-简介" class="headerlink" title="Svelte 简介"></a>Svelte 简介</h2><p><code>Svelte</code>叫法是<code>[Svelte]</code>, 本意是苗条纤瘦的，是一个新兴热门的前端框架.</p>
<p>在最新的<code>《State of JS survey of 2020》</code>中，它被预测为未来十年可能取代React和Vue等其他框架的新兴技术。如果你不确定自己是否该了解 <code>Svelte</code>，可以先看一下 <code>Svelte</code> 的一些发展趋势。</p>
<h3 id="开发者满意度"><a href="#开发者满意度" class="headerlink" title="开发者满意度"></a>开发者满意度</h3><p>从<code>2019</code>年开始, <code>Svelte</code>出现在榜单中。刚刚过去的<code>2020</code>年，<code>Svelte</code>在满意度排行榜中超越了<code>react</code>，跃升到了第一位。</p>
<h3 id="开发者兴趣度"><a href="#开发者兴趣度" class="headerlink" title="开发者兴趣度"></a>开发者兴趣度</h3><p>在开发者兴趣度方面，Svelte 蝉联了第一。</p>
<h3 id="市场占有率"><a href="#市场占有率" class="headerlink" title="市场占有率"></a>市场占有率</h3><p>如果你在19年还没有听说过Svelte，不用紧张，因为svelte 当时仍是小众的开发框架，在社区里仍然没有流行开来.</p>
<p>2020年，Svelte 的市场占有率从第6名跃升到第4名，仅次于 React、Angular、Vue 老牌前端框架。</p>
<h2 id="svelte作者——Rich-Harris"><a href="#svelte作者——Rich-Harris" class="headerlink" title="svelte作者——Rich Harris"></a>svelte作者——Rich Harris</h2><p><code>Svelte</code>作者是前端轮子哥 <code>Rich Harris</code>，同时也是<code>Rollup</code> 的作者。<code>Rich Harris</code> 作者本人在介绍 <code>Svelte</code> 时，有一个非常精彩的演讲<code>《Rethinking reactivity》</code>，<a href="https://www.youtube.com/watch?v=AdNJ3fydeao&t=1900s">油管连接</a>，感兴趣的同学不要错过。</p>
<p>他设计<code>Svelte</code>的核心思想在于『通过静态编译减少框架运行时的代码量』，也就是说，<code>vue</code> 和 <code>react</code> 这类传统的框架，都必须引入运行时 <code>(runtime)</code> 代码，用于虚拟<code>dom</code>、<code>diff</code> 算法。<code>Svelted</code>完全溶入<code>JavaScript</code>，应用所有需要的运行时代码都包含在<code>bundle.js</code>里面了，除了引入这个组件本身，你不需要再额外引入一个运行代码。</p>
<h2 id="Svelte-优势有哪些"><a href="#Svelte-优势有哪些" class="headerlink" title="Svelte 优势有哪些"></a>Svelte 优势有哪些</h2><p>我们先来看一下 <code>Svelte</code> 和<code>React</code>，<code>Vue</code> 相比，有哪些优势。</p>
<h3 id="No-Runtime-——-无运行时代码"><a href="#No-Runtime-——-无运行时代码" class="headerlink" title="No Runtime —— 无运行时代码"></a>No Runtime —— 无运行时代码</h3><p><code>React</code> 和 <code>Vue</code> 都是基于运行时的框架，当用户在你的页面进行各种操作改变组件的状态时，框架的运行时会根据新的组件状态（state）计算（diff）出哪些DOM节点需要被更新，从而更新视图。</p>
<p>这就意味着，框架本身所依赖的代码也会被打包到最终的构建产物中。这就不可避免增加了打包后的体积，有一部分的体积增加是不可避免的，那么这部分体积大约是多少呢？请看下面的数据：</p>
<p>常用的框架中，最小的<code>Vue</code>都有<code>58k</code>，<code>React</code>更有<code>97.5k</code>。我们使用<code>React</code>开发一个小型组件，即使里面的逻辑代码很少，但是打包出来的<code>bundle size</code>轻轻松松都要<code>100k</code>起步。对于大型后台管理系统来说，<code>100k</code> 不算什么，但是对于特别注重用户端加载性能的场景来说，一个组件<code>100k</code> 多，还是太大了。</p>
<p>如果你特别在意打包出来的体积，Svelte 就是一个特别好的选择。下面是Jacek Schae大神的统计，使用市面上主流的框架，来编写同样的<code>Realword</code> 应用的体积：</p>
<p>从上图的统计，Svelte简直是神奇！竟然只有 9.7 KB ! 果然魔法消失 UI 框架，无愧其名。</p>
<p>可以看出，Svelte的bundle size大小是Vue的1/4，是React的1/20，体积上的优势还是相当明显的。</p>
<h3 id="Less-Code-——写更少的代码"><a href="#Less-Code-——写更少的代码" class="headerlink" title="Less-Code ——写更少的代码"></a>Less-Code ——写更少的代码</h3><p>在写svelte组件时，你就会发现，和 Vue 或 React 相比只需要更少的代码。开发者的梦想之一，就是敲更少的代码。因为更少的代码量，往往意味着有更好的语义性，也有更少的几率写出bug。</p>
<p>下面的例子，可以看出Svelte和React的不同：</p>
<ol>
<li><code>React</code>的代码</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">increment</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  setCount(count + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>Svelte</code>的代码</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">increment</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  count += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>虽然用上了<code>16</code>版本最新的 <code>hooks</code>，但是和<code>svelte</code>相比，代码还是很冗余。</p>
<p>在React中，我们要么使用<code>useState</code>钩子，要么使用<code>setState</code>设置状态。而在<code>Svelte</code>中，可以直接使用赋值操作符更新状态。</p>
<p>如果说上面的例子太简单了，可以看下面的统计，分别使用<code>React</code>和 <code>Svelte</code> 实现下面的组件所需要的代码行数.</p>
<p>下面还是 Jacek Schae 老哥的统计，编写同样的Realword 应用，各个框架所需要的行数.</p>
<h3 id="Hight-Performance-——高性能"><a href="#Hight-Performance-——高性能" class="headerlink" title="Hight-Performance ——高性能"></a>Hight-Performance ——高性能</h3><p>在Virtual Dom已经是前端框架标配的今天， Svelte 声称自己是没有Virtual Dom加持的， 怎么还能保证高性能呢？</p>
<p>不急，慢慢看。</p>
<h4 id="性能测评"><a href="#性能测评" class="headerlink" title="性能测评"></a>性能测评</h4><p>Jacek Schae 在《A RealWorld Comparison of Front-End Frameworks with Benchmarks》中用主流的前端框架来编写 RealWorld 应用，使用 Chrome 的Lighthouse Audit测试性能，得出数据是Svelte 略逊于Vue, 但好于 React。</p>
<p>是不是很惊奇？另外一个前端框架性能对比的项目也给出了同样的答案：<a href="https://github.com/krausest/js-framework-benchmark%E3%80%82">https://github.com/krausest/js-framework-benchmark。</a></p>
<p>为什么 Svelte 性能还不错，至少没有我们预期的那么糟糕？我们接下来会在原理那一小结来介绍。</p>
<h2 id="Svelte-劣势"><a href="#Svelte-劣势" class="headerlink" title="Svelte 劣势"></a>Svelte 劣势</h2><p>说完了<code>Svelte</code>的优势，我们也要考虑到<code>Svelte</code>的劣势。</p>
<h3 id="和Vue，-React框架的对比"><a href="#和Vue，-React框架的对比" class="headerlink" title="和Vue， React框架的对比"></a>和Vue， React框架的对比</h3><p>在构建大型前端项目时，我们在选择框架的时候就需要考虑更多的事情。<code>Svelte</code>目前尚处在起步阶段，对于大型项目必要的单元测试并没有完整的方案。目前在大型应用中使用<code>Svelte</code>, 需要谨慎评。</p>
<table>
<thead>
<tr>
<th>类目</th>
<th>Svelte</th>
<th>Vue</th>
<th>React</th>
</tr>
</thead>
<tbody><tr>
<td>UI组件库</td>
<td><code>Material design ( 坦率的说，不好用 )</code></td>
<td><code>Element UI / AntD</code></td>
<td><code>AntD / Material design</code>｜</td>
</tr>
<tr>
<td>状态管理</td>
<td>官网自带</td>
<td>Vuex</td>
<td>Redux/MobX</td>
</tr>
<tr>
<td>路由</td>
<td>Svelte-router</td>
<td>Vue-router</td>
<td>React-router</td>
</tr>
<tr>
<td>服务端渲染</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>测试工具</td>
<td>官方网站没有相关内容</td>
<td>@vue/test-utils</td>
<td>Jest</td>
</tr>
</tbody></table>
<p>我们在用 Svelte 开发公司级别中大型项目时，也发现了其他的一些主要注意的点</p>
<p>没有像AntD那样成熟的UI库。比如说需求方想加一个toast提示，或者弹窗，pm：”很简单的，不用出UI稿，就直接用之前的样式好啦~“<br>但是 Svelte 需要从0开始 ”抄“ 出来一个toast或者弹窗组件出来，可能会带来额外的开发量和做好加班的准备。</p>
<ul>
<li><p>Svelte 原生不支持预处理器，比如说less/scss，需要自己单独的配置 webpack loader。</p>
</li>
<li><p>Svelte 原生脚手架没有目录划分</p>
</li>
<li><p>暂时不支持typescript，虽然官方说了会支持, 但是不知道什么时候.</p>
</li>
</ul>
<p>还需要注意的一点是，React / Vue等框架自带的runtime虽然会增加首屏加载的bundle.js，可是当项目变得越来越大的时候，框架的runtime在bundle.js里面占据的比例也会越来越小，这个时候我们就得考虑一下是不是存在一个Svelte生成的代码大于React和Vue生成的代码的阈值了。</p>
<h2 id="原理篇"><a href="#原理篇" class="headerlink" title="原理篇"></a>原理篇</h2><p><code>Svelte</code>原理相对于<code>React</code> 和 <code>Vue</code> 来说，相对比较简单，大家可以放心的往下看。</p>
<p>首先，我们从一个问题出发：</p>
<h3 id="Virtual-Dom-真的高效吗"><a href="#Virtual-Dom-真的高效吗" class="headerlink" title="Virtual Dom 真的高效吗"></a>Virtual Dom 真的高效吗</h3><p>Rich Harris 在设计 Svelte 的时候没有采用 Virtual DOM 是因为觉得Virtual DOM Diff 的过程是非常低效的。</p>
<p>在他的一文《Virtual DOM is pure overhead》原文连接：<a href="https://www.sveltejs.cn/blog/virtual-dom-is-pure-overhead%EF%BC%8C%E6%84%9F%E5%85%B4%E8%B6%A3%E7%9A%84%E5%90%8C%E5%AD%A6%E5%8F%AF%E4%BB%A5%E7%BF%BB%E4%B8%80%E4%B8%8B%E3%80%82">https://www.sveltejs.cn/blog/virtual-dom-is-pure-overhead，感兴趣的同学可以翻一下。</a></p>
<p>人们觉得 Virtual DOM高效的一个理由，就是它不会直接操作原生的DOM节点。在浏览器当中，JavaScript的运算在现代的引擎中非常快，但DOM本身是非常缓慢的东西。当你调用原生DOM API的时候，浏览器需要在JavaScript引擎的语境下去接触原生的DOM的实现，这个过程有相当的性能损耗。</p>
<p>但其实 Virtual DOM 有时候会做很多无用功，这体现在很多组件会被“无缘无故”进行重渲染（re-render）。</p>
<p>比如说，下面的例子中，React 为了更新掉message 对应的DOM 节点，需要做n多次遍历，才能找到具体要更新哪些节点。</p>
<p>为了解决这个问题，React 提供pureComponent,shouldComponentUpdate，useMemo,useCallback让开发者来操心哪些subtree是需要重新渲染的，哪些是不需要重新渲染的。究其本质，是因为 React 采用 jsx 语法过于灵活，不理解开发者写出代码所代表的意义，没有办法做出优化。</p>
<p>所以，React 为了解决这个问题，在 v16.0 带来了全新的 Fiber 架构，Fiber 思路是不减少渲染工作量，把渲染工作拆分成小任务思路是不减少渲染工作量。渲染过程中，留出时间来处理用户响应，让用户感觉起来变快了。这样会带来额外的问题，不得不加载额外的代码，用于处理复杂的运行时调度工作</p>
<h4 id="那么-Svelte-是如何解决这个问题的？"><a href="#那么-Svelte-是如何解决这个问题的？" class="headerlink" title="那么 Svelte 是如何解决这个问题的？"></a>那么 Svelte 是如何解决这个问题的？</h4><p>React 采用 jsx 语法本质不理解数据代表的意义，没有办法做出优化。Svelte 采用了Templates语法（类似于 Vue 的写法），更加严格和具有语义性，可以在编译的过程中就进行优化操作。</p>
<p>那么，为什么Templates语法可以解决这个问题呢？</p>
<h4 id="Template-带来的优势"><a href="#Template-带来的优势" class="headerlink" title="Template 带来的优势"></a>Template 带来的优势</h4><p>关于 <code>JSX</code> 与 <code>Templates</code> ，可以看成是两种不同的前端框架渲染机制，有兴趣的同学可以翻一下尤雨溪的演讲《在框架设计中寻求平衡》：<a href="https://www.bilibili.com/video/av80042358/%E3%80%82">https://www.bilibili.com/video/av80042358/。</a></p>
<p>一方面， <code>JSX</code> 的代表框架有 <code>React</code> 以及所有 <code>react-like</code> 库，比如 <code>preact</code>、 <code>stencil</code>, <code>infernal</code> 等；另一方面， <code>Templates</code> 代表性的解决方案有 <code>Vue</code>、<code>Svelte</code>、 <code>ember</code>，各有优缺点。</p>
<h3 id="JSX-优缺点"><a href="#JSX-优缺点" class="headerlink" title="JSX 优缺点"></a>JSX 优缺点</h3><p><code>jsx</code> 具有 <code>JavaScript</code> 的完整表现力，非常具有表现力，可以构建非常复杂的组件。</p>
<p>但是灵活的语法，也意味着引擎难以理解，无法预判开发者的用户意图，从而难以优化性能。你很可能会写出下面的代码：</p>
<p>在使用 <code>JavaScript</code> 的时候，编译器不可能<code>hold</code>住所有可能发生的事情，因为 <code>JavaScript</code> 太过于动态化。也有人对这块做了很多尝试，但从本质上来说很难提供安全的优化。</p>
<h4 id="Template优缺点"><a href="#Template优缺点" class="headerlink" title="Template优缺点"></a>Template优缺点</h4><p><code>Template</code>模板是一种非常有约束的语言，你只能以某种方式去编写模板。</p>
<p>例如，当你写出这样的代码的时候，编译器可以立刻明白：”哦！这些 <code>p</code> 标签的顺序是不会变的，这个 <code>id</code> 是不会变的，这些 class 也不会变的，唯一会变的就是这个“。</p>
<p>在编译时，编译器对你的意图可以做更多的预判，从而给它更多的空间去做执行优化。</p>
<p>左侧 <code>template</code> 中，其他所有内容都是静态的，只有 <code>name</code> 可能会发生改变。</p>
<p>右侧 <code>p</code> 函数是编译生成的最终的产物，是原生的<code>js</code>可以直接运行在浏览器里，会在有脏数据时被调用。<code>p</code> 函数唯一做的事情就是，当 <code>name</code> 发生变更的时候，调用原生方法把 <code>t1</code> 这个原生<code>DOM</code>节点更新。这里的 <code>set_data</code> 可不是 <code>React</code> 的 <code>setState</code> 或者小程序的 <code>setData</code> ，这里的<code>set_data</code> 就是封装的原生的 <code>javascript</code> 操作<code>DOM</code> 节点的方法。</p>
<p>如果我们仔细观察上面的代码，发现问题的关键在于 <code>if</code>语句的判断条件——<code>changed.name</code>， 表示有哪些变量被更新了，这些被更新的变量被称为脏数据。</p>
<p>任何一个现代前端框架，都需要记住哪些数据更新了，根据更新后的数据渲染出最新的<code>DOM</code>.</p>
<h4 id="Svelte-记录脏数据的方式：位掩码（bitMask）"><a href="#Svelte-记录脏数据的方式：位掩码（bitMask）" class="headerlink" title="Svelte 记录脏数据的方式：位掩码（bitMask）"></a>Svelte 记录脏数据的方式：位掩码（bitMask）</h4><p>Svelte使用位掩码（bitMask） 的技术来跟踪哪些值是脏的，即自组件最后一次更新以来，哪些数据发生了哪些更改。</p>
<p>位掩码是一种将多个布尔值存储在单个整数中的技术，一个比特位存放一个数据是否变化，一般<code>1</code>表示脏数据，<code>0</code>表示是干净数据。</p>
<p>用大白话来讲，你有<code>A</code>、<code>B</code>、<code>C</code>、<code>D</code> 四个值，那么二进制<code>0000 0001</code>表示第一个值A发生了改变，<code>0000 0010</code>表示第二个值<code>B</code>发生了改变，<code>0000 0100</code>表示第三个值<code>C</code>发生了改变，<code>0000 1000</code>表示第四个<code>D</code>发生了改变。</p>
<p>这种表示法，可以最大程度的利用空间。为啥这么说呢？</p>
<p>比如说，十进制数字<code>3</code>就可以表示 <code>A</code>、<code>B</code>是脏数据。先把十进制数字<code>3</code>， 转变为二进制<code>0000 0011</code>。从左边数第一位、第二位是<code>1</code>，意味着第一个值<code>A</code> 和第二个值<code>B</code>是脏数据；其余位都是<code>0</code>，意味着其余数据都是干净的。</p>
<h4 id="JS-的限制"><a href="#JS-的限制" class="headerlink" title="JS 的限制"></a>JS 的限制</h4><p>那么，是不是用二进制比特位就可以记录各种无穷无尽的变化了呢？</p>
<p><code>JS</code> 的二进制有<code>31</code>位限制，<code>number</code> 类型最长是<code>32</code>位，减去<code>1</code>位用来存放符号。也就是说，如果 <code>Svelte</code> 采用二进制位存储的方法，那么只能存 <code>31</code>个数据。</p>
<p>但肯定不能这样，对吧？</p>
<p><code>Svelte</code> 采用数组来存放，数组中一项是二进制<code>31</code>位的比特位。假如超出<code>31</code>个数据了，超出的部分放到数组中的下一项。</p>
<p>这个数组就是<code>component.$.dirty</code>数组，二进制的<code>1</code>位表示该对应的数据发生了变化，是脏数据，需要更新；二进制的<code>0</code>位表示该对应的数据没有发生变化，是干净的。</p>
<h4 id="一探究竟component-dirty"><a href="#一探究竟component-dirty" class="headerlink" title="一探究竟component.$.dirty"></a>一探究竟component.$.dirty</h4><p>上文中，我们说到<code>component.$.dirty</code>是数组，具体这个数组长什么样呢？</p>
<p>我们模拟一个 <code>Svelte</code> 组件，这个 <code>Svelte</code> 组件会修改33个数据。</p>
<p>我们打印出每一次<code>make_dirty</code>之后的<code>component.$.dirty</code>， 为了方便演示，转化为二进制打印出来，如下面所示：</p>
<p>上面数组中的每一项中的每一个比特位，如果是1，则代表着该数据是否是脏数据。如果是脏数据，则意味着更新。</p>
<p>第一行<code>[&quot;0000000000000000000000000000001&quot;, &quot;0000000000000000000000000000000&quot;]</code>, 表示第一个数据脏了，需要更新第一个数据对应的<code>dom</code>节点</p>
<p>第二行<code>[&quot;0000000000000000000000000000011&quot;, &quot;0000000000000000000000000000000&quot;]</code>, 表示第一个、第二个数据都脏了，需要更新第一个，第二个数据对应的<code>dom</code>节点。</p>
<p>……</p>
<p>当一个组件内，数据的个数，超出了<code>31</code>的数量限制，就数组新增一项来表示。</p>
<p>这样，我们就可以通过<code>component.$.dirty</code>这个数组，清楚的知道有哪些数据发生了变化。那么具体应该更新哪些DOM 节点呢？</p>
<h4 id="数据和DOM节点之间的对应关系"><a href="#数据和DOM节点之间的对应关系" class="headerlink" title="数据和DOM节点之间的对应关系"></a>数据和DOM节点之间的对应关系</h4><p>我们都知道， React 和 Vue 是通过 Virtual Dom 进行 diff 来算出来更新哪些 DOM 节点效率最高。Svelte 是在编译时候，就记录了数据 和 DOM 节点之间的对应关系，并且保存在 p 函数中。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/lP9iauFI73z8zVrOwuwOCBxjsf0osDx8Nbmvp9xd7GszgEaaLrlRecCYD0WqicibAQR9jSJVucZfJgybB3hxQXWzw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p>
<p>这里说的<code>p</code>函数，就是 <code>Svelte</code> 的更新方法，本质上就是一大堆<code>if</code>判断，逻辑非常简单.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( A 数据变了 ) &#123;</span><br><span class="line">  更新A对应的DOM节点</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( B 数据变了 ) &#123;</span><br><span class="line">  更新B对应的DOM节点</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>为了更加直观的理解，我们模拟更新一下<code>33</code>个数据的组件，编译得到的<code>p 函数</code>打印出来，如：</p>
<p>我们会发现，里面就是一大堆if判断，但是if判断条件比较有意思，我们从上面摘取一行仔细观察一下：</p>
<p>首先要注意，<code>&amp;</code>不是逻辑与，而是按位与，会把两边数值转为二进制后进行比较，只有相同的二进制位都为<code>1</code> 才会为真。</p>
<p>这里的<code>if</code>判断条件是：拿<code>compoenent.$.dirty[0]</code>(<code>00000000000000000000000000000100</code>)和<code>4</code>（<code>4</code> 转变为二进制是<code>0000 0100</code>）做按位并操作。那么我们可以思考一下了，这个按位并操作什么时候会返回1呢？</p>
<p><code>4</code>是一个常量，转变为二进制是<code>0000 0100</code>， 第三位是<code>1</code>。那么也就是，只有<code>dirty[0]</code>的二进制的第三位也是<code>1</code>时, 表达式才会返回真。换句话来说，只有第三个数据是脏数据，才会走入到这个if判断中，执行<code>set_data(t5, ctx[2])</code>， 更新<code>t5</code>这个 <code>DOM</code> 节点。</p>
<p>当我们分析到这里，已经看出了一些眉目，让我们站在更高的一个层次去看待这 <code>30</code>多行代码：它们其实是保存了这<code>33</code>个变量 和 真实<code>DOM</code> 节点之间的对应关系，哪些变量脏了，<code>Svelte </code>会走入不同的if体内直接更新对应的<code>DOM</code>节点，而不需要复杂 <code>Virtual DOM DIFF</code> 算出更新哪些<code>DOM</code>节点；</p>
<p>这 <code>30</code>多行代码，是<code>Svelte </code>编译了我们写的<code>Svelte </code>组件之后的产物，在<code>Svelte</code> 编译时，就已经分析好了，数据 和 <code>DOM </code>节点之间的对应关系，在数据发生变化时，可以非常高效的来更新DOM节点。</p>
<p><code>Vue</code> 曾经也是想采取这样的思路，但是<code>Vue</code>觉得保存每一个脏数据太消耗内存了，于是没有采用那么细颗粒度，而是以组件级别的中等颗粒度，只监听到组件的数据更新，组件内部再通过 <code>DIFF </code>算法计算出更新哪些 <code>DOM</code> 节点。<code>Svelte</code> 采用了比特位的存储方式，解决了保存脏数据会消耗内存的问题。</p>
<h4 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h4><p>上面就是Svelte 最核心更新DOM机制，下面我们串起来整个的流程。</p>
<p>下面是非常简单的一个 Svelte 组件，点击<code>&lt;button&gt;</code>会触发onClick事件，从而改变name 变量。</p>
<p>上面代码背后的整体流程如下图所示，我们一步一步来看：</p>
<p>第一步，<code>Svelte</code> 会编译我们的代码，下图中左边是我们的源码，右边是 <code>Svelte</code> 编译生成的。<code>Svelte</code> 在编译过程中发现，『咦，这里有一行代码 <code>name</code> 被重新赋值了，我要插入一条<code>make_dirty</code>的调用』，于是当我们改写 <code>name </code>变量的时候，就会调用<code>make_dirty</code>方法把 <code>name</code> 记为脏数据。</p>
<p>第二步，我们来看make_diry方法究竟做了什么事情：</p>
<ol>
<li><p>把对应数据的二进制改为1</p>
</li>
<li><p>把对应组件记为脏组件，推入到 dirty_components 数组中</p>
</li>
<li><p>调用<code>schedule_update()</code>方法把<code>flush</code>方法推入到一帧中的微任务阶段执行。因为这样既可以做频繁更新 的截流，又避免了阻塞一帧中的 <code>layout</code>， <code>repaint</code> 阶段的渲染。</p>
</li>
</ol>
<p><code>schedule_update</code> 方法其实就是一个<code>promise.then()</code>，</p>
<p>一帧大概有 <code>16ms</code>, 大概会经历 <code>layout</code>, <code>repaint</code>的阶段后，就可以开始执行微任务的回调了。</p>
<p><code>flush</code> 方法做的事情也比较简单，就是遍历脏组件，依次调用<code>update</code>方法去更新对应的组件。</p>
<p><code>update</code>方法除了执行一些生命周期的方法外，最核心的一行代码是调用<code>p</code>方法，<code>p</code>方法我们已经在上文中介绍过很熟悉了。</p>
<p><code>p</code> 方法的本质就是走入到不同的<code>if</code> 判断里面，调用<code>set_data</code>原生的 <code>javascript</code> 方法更新对应的 <code>DOM</code>节点。</p>
<p>至此，我们的页面的DOM节点就已经更新好了。</p>
<blockquote>
<p>上面的代码均是剔除了分支逻辑的伪代码。<br>Svelte 在处理子节点列表的时候，还是有优化的算法在的。比如说[a,b,c,d] 变成 [d, a, b, c] ，但是只是非常简单的优化，简单来说，是比较节点移动距离的绝对值，绝对值最小的节点被移动。<br>所以，严格意义上来说，Svelte 并不是100%无运行时，还是会引入额外的算法逻辑，只是量很少罢了。</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一个前端框架，不管是<code>vue</code>还是<code>react</code>更新了数据之后，需要考虑更新哪个<code>dom</code>节点，也就是，需要知道，脏数据和待更新的真实<code>dom</code>之间的映射。<code>vue</code>, <code>react</code> 是通过 <code>virtualDom</code> 来 <code>diff</code> 计算出更新哪些<code>dom</code>节点更划算，而<code>sveltedom </code>是把数据和真实<code>dom</code>之间的映射关系，在编译的时候就通过<code>AST</code>等算出来，保存在<code>p</code>函数中。</p>
<p><code>Svelte</code> 作为新兴的前端框架，采用了和 <code>React</code>， <code>Vue</code> 不同的设计思路，其独特的特性在某些场景下还是很值得尝试的。</p>
<blockquote>
<p>免责声明：本文章来自转载，不会有任何盈利部分，如有侵权，请联系<code>jadeface.scholar@gmail.com</code>删除，遵循<code>开放知识共享协议--GNU</code>。</p>
</blockquote>
]]></content>
      <categories>
        <category>转载</category>
      </categories>
      <tags>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>Git commit info 大杀器 和 给你的 OSS 加防盗门</title>
    <url>/article/git-commit-info-and-oss-safe/</url>
    <content><![CDATA[<h2 id="Git-commit-info-大杀器"><a href="#Git-commit-info-大杀器" class="headerlink" title="Git commit info 大杀器"></a>Git commit info 大杀器</h2><p>我们应该在<code>git</code>提交上遇到过比较常见的一个问题：</p>
<hr>
<p>全局的<code>git Author</code>信息与本地仓库的信息不一致，但是有时候会忘记改动本地<code>git Author</code>信息，最终导致代码提交了，但是作者信息有误！</p>
<hr>
<p><strong>以下内容来源于翻译</strong></p>
<ol>
<li>通过运行以下命令，将存储库重新设置为您要更改的存储库的上一次提交：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rebase –i &#123;&#123;previous-commit-hash&#125;&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>上面的脚本会提示您以降序排列的提交列表。在这个VI / vim的观点，替换词pick，以edit每每次提交你想编辑。然后退出并保存。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 大白话讲就是：将 pick 换成 e，代表当前这条记录被编辑过</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>当重新设置基础过程开始时，通过运行来更改提交的作者。然后，使用以下命令继续下一次提交.</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rebase –<span class="built_in">continue</span> </span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意：这里的 &lt;&gt; 不能丢</span></span><br><span class="line">$ git commit --amend --author=<span class="string">&quot;Author &lt;your email&gt;&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>变基过程完成后，请通过运行以下命令来推送更改：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push -f</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面是简写</span></span><br><span class="line"></span><br><span class="line">$ git push --force</span><br></pre></td></tr></table></figure>

<hr>
<p><a href="https://stackoverflow.com/questions/3042437/how-to-change-the-commit-author-for-one-specific-commit">参考溯源</a> ： <code>https://stackoverflow.com/questions/3042437/how-to-change-the-commit-author-for-one-specific-commit</code></p>
<h2 id="给你的OSS加防盗门"><a href="#给你的OSS加防盗门" class="headerlink" title="给你的OSS加防盗门"></a>给你的<code>OSS</code>加防盗门</h2><p>近期在为自己的博客做优化：</p>
<ul>
<li>整体体积瘦身</li>
<li>访问速度优化</li>
<li>所有资源全部走<code>OSS</code></li>
<li>图片走<code>CDN</code>加速且压缩</li>
</ul>
<p>但是，这个时候我发现我的<code>OSS</code>访问量剧增，流量也剧增（这可是烧钱的买卖）</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2105/2151301.png?x-oss-process=image/quality,q_80" alt="alt"></p>
<p>偶然看到了阿里云控制台的防盗链：</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2105/2151302.png?x-oss-process=image/quality,q_80" alt="alt"></p>
<p>然后我们来康康不在白名单的域名访问效果吧！</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2105/2151303.png?x-oss-process=image/quality,q_80" alt="alt"></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>Git</category>
        <category>Ali OSS</category>
      </categories>
      <tags>
        <tag>经验</tag>
      </tags>
  </entry>
  <entry>
    <title>JS深入系列之闭包</title>
    <url>/article/js-deep-closure/</url>
    <content><![CDATA[<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2106/1297.jpg_wh300.jpg?x-oss-process=style/HANDLE_IMAGE"></p>
<p>今天是儿童节，然鹅，学习还是要的，但是还是要祝各位<code>大朋友</code>，儿童节快乐～～～</p>
<hr>
<p>紧接着上一篇的内容，我们来回顾一遍<code>JS</code>闭包。</p>
<p>什么是闭包？</p>
<p>列举下我所看到的相对比较官方的解释：</p>
<ul>
<li>闭包是指那些能够访问自由变量的函数。— MDN</li>
<li>从技术角度来讲，所有函数都是闭包。 — 《JavaScript权威指南》</li>
</ul>
<p>那意味着：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> temp = <span class="number">123</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(temp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码也相当于是闭包。</p>
<p>但是<code>ECMAScript</code>中的规范定义，闭包即便是上下文销毁，也依旧存在，且保持着对于自由变量的引用。</p>
<blockquote>
<p>自由变量是指在函数中使用的，但既不是函数参数也不是函数的局部变量的变量。<br>补充：这里的函数指的是闭包函数。</p>
</blockquote>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">localScope</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">123</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a++);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> print;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add = localScope();</span><br><span class="line"></span><br><span class="line">add()</span><br><span class="line">add()</span><br><span class="line">add()</span><br><span class="line">add()</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># print console</span></span><br><span class="line"></span><br><span class="line">/Users/wangbinlin/.nvm/versions/node/v14.16.0/bin/node /Users/wangbinlin/Project/daily_exercise/blog/test.js</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>现在，你可以清楚的看到闭包的魅力。</p>
<p>下面过两道面试必刷题：</p>
<p>题目来源于：<a href="https://github.com/mqyqingfeng/Blog/issues/9">https://github.com/mqyqingfeng/Blog/issues/9</a></p>
<h4 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  data[i] = (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i);</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data[<span class="number">0</span>]();</span><br><span class="line">data[<span class="number">1</span>]();</span><br><span class="line">data[<span class="number">2</span>]();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解析过程请参见：<a href="https://github.com/mqyqingfeng/Blog/issues/9">https://github.com/mqyqingfeng/Blog/issues/9</a></p>
<h4 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h4><p><code>请写一个计时器，每隔一秒打印一次</code>。</p>
<p>这道题，虽然实现思路很多，其实就像考察闭包！下面我来列举下常规解法：</p>
<p><strong>解法一</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;<span class="number">60</span>;i++) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;, <span class="number">1000</span>*i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>why?</code>为什么这样写可以呢？我想市面上百分之<code>50</code>的回答应该都是：</p>
<blockquote>
<p>因为<code>let</code>可以创建块作用域，完了结束。</p>
</blockquote>
<p>其实我这里再出一段代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span>(; i&lt;<span class="number">60</span>;i++) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;, <span class="number">1000</span>*i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果肯定不是预期，但是我也用了 <code>let</code>，请思考一分钟。</p>
<blockquote>
<p><code>for</code>循环头部的<code>let</code>声明有一个特殊的行为，在每次循环的时候不止被声明一次，每次迭代都会声明，且初始值用上次的，也就是会出现下面的伪代码：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一次</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;<span class="number">60</span>;i++) &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i);</span><br><span class="line">        &#125;, <span class="number">1000</span> * i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第二次</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i&lt;<span class="number">60</span>;i++) &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i);</span><br><span class="line">        &#125;, <span class="number">1000</span>*i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处省略 58 次</span></span><br></pre></td></tr></table></figure>

<p>现在能看懂吧，第二个写法虽然用了<code>let</code>，但是它不在<code>for</code>循环头部。</p>
<p><strong>解法二</strong></p>
<p>闭包现身</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">60</span>; i++) &#123;</span><br><span class="line">    (<span class="function">(<span class="params">i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i)</span><br><span class="line">        &#125;, i*<span class="number">1000</span>);</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">60</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(print(i), i*<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述两种写法，应该是比较常见的闭包写法，其实就是前文提到的<code>自由变量</code>与<code>闭包作用域</code>。</p>
<blockquote>
<p>当函数可以记住并且访问所在词法作用域，即使函数是在当前词法作用域外执行的，这时候就产生了闭包。<br>                               —– 《你不知道的JavaScript》上卷 p57</p>
</blockquote>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>闭包</tag>
      </tags>
  </entry>
  <entry>
    <title>Monaco 探索（一）</title>
    <url>/article/approval-monaco-1/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="db6ca102a9acd9f3024136663c1538e480232b6a2b4c3c77ff22bcdb7072aae1"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>web ide</tag>
        <tag>monaco</tag>
      </tags>
  </entry>
  <entry>
    <title>透过&quot;斐波那契数列&quot;，初探动态规划</title>
    <url>/article/dynamic-programming/</url>
    <content><![CDATA[<p>今天暂时先不介绍<code>Monaco（二）</code>，留着端午节给大家放大招～～～</p>
<p>步入正题，<code>斐波那契数列</code>，想必大家都耳熟能详：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">F(n) = F(n-1) + F(n-2)     (n&gt;1)</span><br></pre></td></tr></table></figure>

<p>下面开始<code>coding</code>时刻：</p>
<h3 id="递归版本"><a href="#递归版本" class="headerlink" title="递归版本"></a>递归版本</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc </span>简单、粗暴、但又不缺乏美感，nice</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;*&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fib = <span class="function"><span class="params">n</span> =&gt;</span> n &gt; <span class="number">1</span> ? fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>) : n;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>但是缺点很明显，会进行很多重复的计算。</p>
<p>接下来抛砖引玉～</p>
<blockquote>
<p>动态规划方法安排求解顺序，对每个子问题只求解一次，并将结果保存下来。如果随后再次需要此子问题的解，只需查找保存的结果，而不必重新计算。因此动态规划算法是付出额外的内存空间来节省计算时间，是典型的时空权衡的例子。</p>
</blockquote>
<p><a href="https://www.zhihu.com/question/24347044">上述解释来源</a>: <a href="https://www.zhihu.com/question/24347044">https://www.zhihu.com/question/24347044</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> memoRes = &#123;</span><br><span class="line">    <span class="number">0</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fib = <span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">2</span>; i&lt;=n&amp;&amp;n&gt;=<span class="number">2</span>; i++) &#123;</span><br><span class="line">        memoRes[i] = memoRes[i<span class="number">-1</span>] + memoRes[i<span class="number">-2</span>] % <span class="number">1000000007</span>;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span> memoRes[i<span class="number">-2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> memoRes[n]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这大概就是传说中的空间换时间，一次 for 循环记录完所有的结果，返回最终需要的结果；</p>
<p>这里解释下，为什么每次都要 <code>delete memoRes[i-2]</code>，因为本次用完之后可以最快释放内存，下次顶多用到<code>i-1</code>,但是需要注意<code>i</code>必须大于<code>3</code>;</p>
<p><strong>需要再解释下：为什么要对求和结果取模 1000000007</strong></p>
<p><a href="https://www.zhihu.com/question/49374703">知乎传送门</a>: <a href="https://www.zhihu.com/question/49374703">https://www.zhihu.com/question/49374703</a></p>
<p>这里引用一段比较直观的回答：</p>
<blockquote>
<p>b乎莫名其妙给我推荐了一番，那我就来解释一番1e9+7这个数，满足[0,1e9+7)内所有数，两个数相加不爆int，两个数相乘不爆long long还有一点，由于1e9+7是质数，所以在[1,1e9+7)内所有数都存在关于1e9+7的逆元（这样就可以做除法）至于998244353，是个质数并且可以表示成a<em>2^b+1的形式，其中b大概为20多（？），假设我们有一个原根g使得g^0,g^1,…,g^998244351取得所有[1,998244353)的数，由于b中有很多2的因子，这样g^n可以代替单位根  ；由于fft需要下标为2的幂次的单位根，这样代替使得n取得整数；从而进行数论上的fft(ntt)操作，这种数字一般会提示你这题要用ntt，类似的数字还有1004535809然后vfk就说以后所有要取模的题就都写998244353就好了（来迷惑选手），这个数也被称为uoj素数。（其实不满足这种a</em>2^b+1的也可以，参见任意模数NTT然后这些数字由于很常用（包括某人的生日19****17），经常被毒瘤出题人卡哈希，写哈希慎用</p>
</blockquote>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2106/Snipaste_2021-06-11_01-12-05.png?x-oss-process=style/HANDLE_IMAGE"></p>
<p><code>LeetCode</code>是完美通过的～</p>
<p>大概做一下小结，透过一道简单的算法题目，简要理解一下”动态规划”的初级奥义，后续会继续跟进相关题目做题解～～～</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>斐波那契数列</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx 配置 SPA 路由 和 mkcert 添加 https 授信证书</title>
    <url>/article/nginx-spa-mkcert-https/</url>
    <content><![CDATA[<h2 id="Nginx-配置-SPA路由"><a href="#Nginx-配置-SPA路由" class="headerlink" title="Nginx 配置 SPA路由"></a><code>Nginx</code> 配置 <code>SPA</code>路由</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">  server &#123;</span><br><span class="line">       listen       80;</span><br><span class="line">       server_name www.yunquna.com;</span><br><span class="line"></span><br><span class="line">       <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">      location  / &#123;</span><br><span class="line">        root   html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">         try_files <span class="variable">$uri</span> /index.html;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当<code>React</code>项目打包后，处于单页应用下，路由是无法生效的，需要配合服务端或者<code>nginx</code>，实现当页面刷新后，应用始终指向的是根目录下的<code>index.html</code>。</p>
<h2 id="mkcert添加https证书访问"><a href="#mkcert添加https证书访问" class="headerlink" title="mkcert添加https证书访问"></a><code>mkcert</code>添加<code>https</code>证书访问</h2><p>如何玩转自授权的<code>https</code>证书呢？</p>
<p>这里依旧是借助<code>mkcert</code>这个工具来玩的，具体的文档请参照官网自行研究：</p>
<p><a href="https://github.com/FiloSottile/mkcert">mkcert</a> : <a href="https://github.com/FiloSottile/mkcert">https://github.com/FiloSottile/mkcert</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Step 1</span></span><br><span class="line"></span><br><span class="line">mkcert myDomain.com</span><br></pre></td></tr></table></figure>

<p><strong>注意：这里需要保留 80 端口的配置，同时监听 443 端口的访问，进行颁发证书</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Step 2</span></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">      listen *:443 ssl http2;</span><br><span class="line">      root html;</span><br><span class="line">      server_name myDomain.com;</span><br><span class="line">      ssl_certificate xxxx/localhost+1.pem;</span><br><span class="line">      ssl_certificate_key xxx/localhost+1-key.pem;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="号外号外！"><a href="#号外号外！" class="headerlink" title="号外号外！"></a>号外号外！</h2><p>最近跟我的前同事成立了一个<code>github</code>组织：</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2105/Snipaste_2021-05-17_20-53-11.png?x-oss-process=image/quality,q_80"></p>
<p>有兴趣的小伙伴可以点个<code>Star</code>参与进来，如果你也是一个足够自律的人，前端客栈欢迎你！👏</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>经验</tag>
      </tags>
  </entry>
  <entry>
    <title>JS深入系列之作用域</title>
    <url>/article/deep-learning-js-for-scope/</url>
    <content><![CDATA[<p>近期做了一个比较有意义的决定，深入学习总结前端知识的每一个系列，然后形成知识树。</p>
<p>希望也能为正在阅读的你带来一定的温习或者提升～</p>
<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>什么是作用域？</p>
<blockquote>
<p>作用域是一套规则，用于确定在何处以及如何查找变量（标识符）。<br>                  ——   《你不知道的JavaScript》（上卷）p12</p>
</blockquote>
<h2 id="从引擎、编译器、作用域三个纬度认识作用域"><a href="#从引擎、编译器、作用域三个纬度认识作用域" class="headerlink" title="从引擎、编译器、作用域三个纬度认识作用域"></a>从引擎、编译器、作用域三个纬度认识作用域</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> args = <span class="string">&#x27;scope&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>引擎拿到这段代码后开始编译；</p>
</li>
<li><p>引擎借助编译器开始编译，在编译时，编译器会在当前所在的作用域内（全局作用域）声明一个<code>args</code>的变量（从未声明过）；</p>
</li>
<li><p>引擎开始执行代码，在当前作用域中继续寻找这个变量，如果找到了，那么就进行赋值操作；</p>
</li>
</ol>
<hr>
<p>以上用步骤拆分就是：先编译后执行;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Step 1</span></span><br><span class="line">var args = undefined;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 2</span></span><br><span class="line"></span><br><span class="line">args = <span class="string">&#x27;scope&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<p><strong>从编译运行维度来讲：</strong></p>
<p>作用域分类：词法作用域 &amp; 动态作用域</p>
<p><strong>从空间范围来讲：</strong></p>
<p>作用域分类：</p>
<ul>
<li>全局作用域</li>
<li>函数作用域</li>
<li>块作用域</li>
<li>模块作用域（ES6 Module &amp; CommonJS Module）</li>
</ul>
<h4 id="什么是词法作用域？"><a href="#什么是词法作用域？" class="headerlink" title="什么是词法作用域？"></a>什么是词法作用域？</h4><p>以下示例分析来自于：<a href="https://github.com/mqyqingfeng/Blog/issues/3">https://github.com/mqyqingfeng/Blog/issues/3</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value = <span class="number">2</span>;</span><br><span class="line">    foo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果是 ???</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>假设JavaScript采用静态作用域，让我们分析下执行过程：</p>
<ol>
<li><p>执行 foo 函数，先从 foo 函数内部查找是否有局部变量 value，如果没有，就根据书写的位置，查找上面一层的代码，也就是 value 等于 1，所以结果会打印 1。</p>
</li>
<li><p>假设JavaScript采用动态作用域，让我们分析下执行过程：</p>
</li>
<li><p>执行 foo 函数，依然是从 foo 函数内部查找是否有局部变量 value。如果没有，就从调用函数的作用域，也就是 bar 函数内部查找 value 变量，所以结果会打印 2。</p>
</li>
</ol>
<p>前面我们已经说了，JavaScript采用的是静态作用域，所以这个例子的结果是 1。</p>
<h4 id="我们可以欺骗词法吗？"><a href="#我们可以欺骗词法吗？" class="headerlink" title="我们可以欺骗词法吗？"></a>我们可以欺骗词法吗？</h4><blockquote>
<p>答案：可以！</p>
</blockquote>
<p>可以借助<code>eval</code>&amp;<code>with</code>，可以看<code>demo</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">eval</span>(str);</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="string">&quot;var a = 2&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>这里的欺骗词法也可以理解为<code>动态的作用域</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> (obj) &#123;</span><br><span class="line">    a = <span class="number">3</span>;</span><br><span class="line">    b = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123; a: 3, b: 4 &#125;</span></span><br></pre></td></tr></table></figure>

<p><code>with</code>可以为<code>obj</code>开辟一片新的词法空间去修改，但是会有<code>隐式声明</code>的诟病（泄漏变量到全局）；</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> (obj) &#123;</span><br><span class="line">    a = <span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">//&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 123 </span></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>作用域</tag>
      </tags>
  </entry>
  <entry>
    <title>一场盛会，我的深思</title>
    <url>/article/a-party-and-my-thinking/</url>
    <content><![CDATA[<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2105/thinking.jpeg?x-oss-process=style/HANDLE_IMAGE"></p>
<p>随着紧张又忙碌的峰会，<code>525</code>终于离我远去了，离大家远去了。几乎所有的同事都投入到了峰会工作中，而我也被安排了进去，负责峰会<code>showcase``demo</code>开发。</p>
<h2 id="峰会前夕"><a href="#峰会前夕" class="headerlink" title="峰会前夕"></a>峰会前夕</h2><p>我做了什么？接到的需求是，做一个阉割版离线官网，因为考虑到现场<code>2.4 HZ</code>信号爆棚，所以会存在定量网络延迟，延误预期时间。</p>
<p>接到需求后，我收到了两种方案：</p>
<ul>
<li>静态部分直接上图（但是弊端，图片会拉伸，会模糊，会丢失一些交互效果）</li>
<li>模拟请求（已采用）</li>
</ul>
<p>几乎在那一刻，对于第二种方案，我已经有了具体的技术方案，<code>mock.js</code>，因为以前接触过，它的实现原理就是：</p>
<blockquote>
<p>拦截原生的<code>XMLHttpRequest</code>，并且建立自己的<code>XMLHttpRequest</code>，并且不会在<code>network</code>发出任何<code>XHR</code>请求。</p>
</blockquote>
<p>按照这个思路，就地造数据，中途数据问题改了好多，感谢我的好拍档<code>圈圈</code>的帮助，顺利完成任务。</p>
<h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><p>在<code>surface</code>上每次使用新包总是要手动去<code>CDN</code>下载，很是麻烦，不过山人自有妙计，以前就喜欢捣鼓，所以自己玩过<code>bat</code>编程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CD C:\xxx\</span><br><span class="line"></span><br><span class="line">wget xxxxxx</span><br><span class="line"></span><br><span class="line">tar -cvzf xxxx.zip -C path</span><br></pre></td></tr></table></figure>

<p>命名<code>525xx.bat</code>,双击简直爽爆，这可能就是自动化的力量。</p>
<h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><p>最强悍的在本地模拟最真实线上的环境：</p>
<p>什么意思呢？</p>
<p>本地<code>nginx</code>指向目标域名，模拟线上真实链接；</p>
<p>本地服务<code>https</code>协议，最真实线上环境模拟；</p>
<p>采用<code>mkcert</code>生成证书，这里有一个坑。</p>
<ul>
<li>第一步：<code>mkcert localhost 127.0.0.1 xxx.com ::1</code></li>
<li>第二步：<code>mkcert -install</code></li>
<li>第三步：配置<code>nginx</code>，配置在之前的博客里有。</li>
</ul>
<p>临近峰会，我也被安排成了技术人员，负责现场调试设备，应付紧急改动需求。</p>
<h2 id="峰会中"><a href="#峰会中" class="headerlink" title="峰会中"></a>峰会中</h2><p>一切顺利，万事大吉！</p>
<p>观摩了很多大佬的讲话，从行业入手，再到资本家对于创业者的要求和期盼。</p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>一个有高度的技术管理者，他是不会过度关注技术细节的！</p>
<p>企业文化价值决定了这个公司能不能赚钱，他是不是在走下坡路，以后的发展趋势！</p>
<p>技术源自业务，为业务服务的技术，才是价值观最大化！</p>
<p>不为业务服务的技术始终处在幻想的沙盒中，没有任何价值！</p>
<p>用合适的技术，服务合适的业务，以业务推动营收，为企业创造价值，才是这条技术之路的王道！</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title>Monaco 探索（二）</title>
    <url>/article/approval-monaco-2/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="c2d34783e9610122579cd3fe7a8ff47d147ca72b879f4267b53f72c1c8921ee5"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>JavaScript</category>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>web ide</tag>
        <tag>monaco</tag>
      </tags>
  </entry>
  <entry>
    <title>回望初心，笑看那年盛夏</title>
    <url>/article/life-and-me/</url>
    <content><![CDATA[<p>我猜你肯定是被标题吸引了，其实，你没看错，这是一篇”记叙文”或者说是”议论文”。</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><del>开头的话，我可以义正言辞的声明，我肯定不会在本文中去写代码或者技术啥的，因为男人的嘴骗人的鬼。</del></p>
<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>回望初心，初心是什么呢？初心当然是在技术的海洋里自由翱翔，曾经写过<code>毕业于MIT大学</code>，因为热爱开源，当然也想站在开源的立场去更多的对待技术。</p>
<p>大智若愚说的是那些智者，回首毕业这么久，我遇到了很多人，也结识了一些志同道合的技术人，像<code>小夕</code>，<code>淘戏卡字辈</code>……</p>
<p>每当深夜去读大家的文章的时候，总有一种望尘莫及的感觉，在深思，我能不能像这样，然后又给自己打气：<code>我能这样，我可以的，完全没问题</code>，那一字一句中，透露着那个时候的不羁与中二。</p>
<p>看过《惊悚乐园》，至今怀念<code>不觉</code>与<code>若雨</code>那种情调，怀念甚至向往一代<code>笔者</code>的风范（<del>我不会告诉你至今我还文笔稚嫩，稚嫩到半天写技术爽文章的时候，憋不出一句屁来。</del>），害！算了，那段过去的，就让它过去吧。</p>
<p>我有时候确实想过，去做一个好的作者，去做一个好的技术产出者，或许是疲于<code>内卷</code>，难道我的目标就是成为<code>卷王</code>？一次又一次的在内心呐喊，向着那个另一面的自己（<del>我相信一个人存在双重人格，真的，我相信</del>），这个时候的我应该露出玩味的笑容，然后看着你：<code>嗨，好兄弟（好姐妹），你看过《暗黑魔女库伊拉》吗？就那个一半头发白的，一半头发黑的，拥有者双重人格的外国女人。</code>当然这里的”外国女人”不包含任何歧视的语气，女主还是很漂亮的……</p>
<p>不好意思，又扯远了，刚刚我们聊到了初心，然后到了内卷，然后到了<del>库伊拉（电影）</del>接下来，我要介绍的那年盛夏：</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>那年盛夏究竟发生了什么呢？</p>
<p>此处省略<code>10w</code>字。</p>
<h2 id="番外篇：AMD-UMD-CMD-CJS-ESM究竟怎么玩，怎么玩？"><a href="#番外篇：AMD-UMD-CMD-CJS-ESM究竟怎么玩，怎么玩？" class="headerlink" title="番外篇：AMD\UMD|CMD|CJS|ESM究竟怎么玩，怎么玩？"></a>番外篇：<code>AMD\UMD|CMD|CJS|ESM</code>究竟怎么玩，怎么玩？</h2><p>第一个怎么玩的意思就是怎么去认识它，了解它：</p>
<p>像我们了解鲁迅先生，从<code>百草园</code>到<code>三味书屋</code>，再到儿时的玩伴<code>少年闰土</code>……</p>
<p><strong><code>AMD</code>：将代码写成让浏览器认识的样子。</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">define([<span class="string">&#x27;jQuery&#x27;</span>], <span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// todo some</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>它作为<code>Require.js</code>的模块定义规范，（这里提一嘴，<code>Require.js</code>是什么呢？RequireJS不是框架，是模块加载器；）</p>
<p>虽然我不太了解，甚至只有在刷面试题的时候才了解，但是不得不说这是时代的产物，是<code>ES Module</code>之前的杰作，其实想一想<code>jQuery</code>，在<code>React</code>、<code>Vue</code>、<code>Angular</code>、<code>Sevlte</code>…..这些杰作未出来之前，再想想，从<code>真实DOM</code>到<code>虚拟DOM</code>。这些东西都是时代的产物，过去的东西并没有死去，过去的东西只是慢慢的在被取代。</p>
<p><strong><code>CMD</code>是在<code>sea.js</code>中被提出来的，当然也是针对于浏览器端。</strong></p>
<p>只不过针对与<code>AMD</code>而言，它属于哪里需要再在哪里加载。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;  </span><br><span class="line">	    <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">&#x27;xxx.js&#x27;</span>)</span><br><span class="line">	    <span class="built_in">console</span>.log(a)</span><br><span class="line">	    <span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">&#x27;yyy.js&#x27;</span>)</span><br><span class="line">	    <span class="built_in">console</span>.log(b)</span><br><span class="line">	&#125;)</span><br></pre></td></tr></table></figure>

<p>但是这里的就地加载，并不是说，碰到<code>require</code>再去加载：</p>
<p>可以看下<code>sea.js</code>的源码中是这样干的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.define = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id = getCurrentJs()</span><br><span class="line">    <span class="keyword">var</span> depsInit = s.parseDependencies(callback.toString())</span><br><span class="line">    <span class="keyword">var</span> a = depsInit.map(<span class="function"><span class="params">item</span> =&gt;</span> basepath(item))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实用大白话讲就是，<code>AMD</code>&amp;<code>CMD</code>都是会提前加载所有模块，但是<code>AMD</code>是加载完就执行，而<code>CMD</code>是碰见<code>require</code>再执行。</p>
<p>当然也可以推翻市面上的说法：</p>
<blockquote>
<p>ADM 是异步的，CMD是同步的。</p>
</blockquote>
<p>加载当然都是异步的，只不过<code>CMD</code>执行是一个同步过程。</p>
<p><strong><code>CJS</code>：CommonJS</strong></p>
<p>不要被<code>CJS</code>吓到了，这玩意儿就是个缩写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>适用于<code>Node</code>端的模块加载使用方案，同步引入。</p>
<p>这里可以顺带提一口，<code>TS</code>下的引入：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> _ = <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>这种语法是合乎规范的：</p>
<p>可以参见： <a href="https://www.typescriptlang.org/docs/handbook/modules.html">https://www.typescriptlang.org/docs/handbook/modules.html</a></p>
<p>也可以看看<code>stackoverflow</code>上，大佬们的讨论：  <a href="https://stackoverflow.com/questions/52534910/difference-between-import-x-requirex-and-const-x-requirex-in-typ">https://stackoverflow.com/questions/52534910/difference-between-import-x-requirex-and-const-x-requirex-in-typ</a></p>
<p><strong><code>UMD</code>：既适用于<code>Node</code>端，也适用于客户端</strong></p>
<p>可以理解为<code>AMD</code>/<code>CMD</code>/<code>ESM</code> + <code>CJS</code>的结合。</p>
<p>看过常用库（<code>jQuery</code>,<code>pubsub.js</code>）的同学肯定见过如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">root, factory</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">&#x27;function&#x27;</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">                <span class="comment">// AMD</span></span><br><span class="line">                define([<span class="string">&#x27;jquery&#x27;</span>], factory);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">exports</span> === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">// Node</span></span><br><span class="line">                <span class="built_in">module</span>.exports = factory(<span class="built_in">require</span>(<span class="string">&#x27;jquery&#x27;</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 浏览器全局变量(root 即 window)</span></span><br><span class="line">                root.returnExports = factory(root.jQuery);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;(<span class="built_in">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        &#125;));</span><br></pre></td></tr></table></figure>

<p><strong><code>ESM</code>也是大势所趋，浏览器端支持良好，<code>Node</code>端也开始慢慢支持</strong></p>
<p>对于时下，广为人知的几个模块，我们先讨论到这里，这里可以先打个预备草稿：</p>
<p>另外一个玩一玩，当然指的是，知道他们后，抛砖引玉，去玩一玩主流的打包工具：</p>
<p>像<code>rollup</code>、<code>gulp</code>、<code>webpack</code>、<code>tsdx</code>……</p>
<p>真的太多太多了，但是各有优势，然后我想，我还可以就这个打包工具再出一篇文章：《从零开始打造组件库/工具库》</p>
<p>期待下一期再与你见面～</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2106/234750-158921207008d8.jpg?x-oss-process=style/HANDLE_IMAGE"></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>初探 gulp</title>
    <url>/article/gulp-first-view/</url>
    <content><![CDATA[<p>上一篇文章中我们有提到<code>UMD</code>、<code>CJS</code>、<code>AMD</code>、<code>ESM</code>的区别，今天这篇呢，就打包代码，抛砖引玉，我们来探索下<code>gulp</code>。</p>
<p><code>gulp</code>比较清晰深刻的两个概念就是<code>流（Stream）</code>和<code>任务（Task）</code>。</p>
<p>以函数式编程的形式，一个函数一个<code>Task</code>，去执行任务，<code>Task</code>之间的数据传输是以<code>Stream</code>的形式去流动的，最终输出到指定目录。</p>
<p>快速开始<code>Hello World</code>，参考<a href="https://www.gulpjs.com.cn/docs/getting-started/quick-start/">传送门</a></p>
<h3 id="名词一：任务"><a href="#名词一：任务" class="headerlink" title="名词一：任务"></a>名词一：<code>任务</code></h3><p>任务分为<code>共有任务</code>、<code>私有任务</code>。</p>
<p>提前声明的是：</p>
<blockquote>
<p>gulp 不再支持同步任务（Synchronous tasks）</p>
</blockquote>
<blockquote>
<p>gulp 不再支持同步任务（Synchronous tasks）了。因为同步任务常常会导致难以调试的细微错误，例如忘记从任务（task）中返回 stream。<br>当你看到 “Did you forget to signal async completion?” 警告时，说明你并未使用前面提到的返回方式。你需要使用 callback 或返回 stream、promise、event emitter、child process、observable 来解决此问题。</p>
</blockquote>
<p>那就意味着，我们的任务函数需要这么去编写：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">myFirstGulpTask</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// todo some</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>建立<code>私有任务</code></strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">privateTask</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.build = privateTask</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><em>Note: 需要注意的点是，私有任务不能被外部使用者直接调用，例如：</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gulp </span><br></pre></td></tr></table></figure>

<p><strong>建立<code>公有任务</code></strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">publicTask</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.default = publicTask</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其实，不难猜测的是，对于一连串的任务，肯定是有一定的顺序的，但是也会有并行执行的场景：</p>
<p>那么这个时候<code>series</code>和<code>parallel</code>就闪亮登场了。</p>
<p>其中，<code>series</code>控制顺序执行，<code>parallel</code>控制并发执行。</p>
<p>二者可以随意判断且嵌套使用，诸如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 判断</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">devTask</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">proTask</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (process.ENV === <span class="string">&#x27;prod&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">exports</span>.build = proTask</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">exports</span>.build = devTask</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套</span></span><br><span class="line"><span class="built_in">exports</span>.default = series(devTask, proTask)</span><br><span class="line"><span class="built_in">exports</span>.default = parallel(devTask, proTask)</span><br><span class="line"></span><br><span class="line"><span class="comment">// OR</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.default = parallel(devTask, series(proTask))</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.default = series(devTask, parallel(proTask))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>说到这里，你肯定会有些疑问，异步方案的替代品是否存在？</p>
<ol>
<li>回归原始，回调控制执行时机</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">task</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    cb()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>任务的执行机制如何？</p>
<blockquote>
<p>当从任务（task）中返回 stream、promise、event emitter、child process 或 observable 时，成功或错误值将通知 gulp 是否继续执行或结束。如果任务（task）出错，gulp 将立即结束执行并显示该错误。</p>
</blockquote>
<blockquote>
<p>当使用 series() 组合多个任务（task）时，任何一个任务（task）的错误将导致整个任务组合结束，并且不会进一步执行其他任务。当使用 parallel() 组合多个任务（task）时，一个任务的错误将结束整个任务组合的结束，但是其他并行的任务（task）可能会执行完，也可能没有执行完。</p>
</blockquote>
<h3 id="任务执行"><a href="#任务执行" class="headerlink" title="任务执行"></a>任务执行</h3><p>总结三点：读取（输入） –&gt; 处理传输 –&gt; 写入（输出）</p>
<p>以一个<code>demo</code>入手：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gulpfile.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; src, dest, series &#125; = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> ts = <span class="built_in">require</span>(<span class="string">&#x27;gulp-typescript&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">&#x27;gulp-babel&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">cjs</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> tsProject = ts.createProject(<span class="string">&#x27;tsconfig.json&#x27;</span>, &#123;</span><br><span class="line">        <span class="built_in">module</span>: <span class="string">&#x27;CommonJS&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tsProject.src()</span><br><span class="line">        .pipe(tsProject())</span><br><span class="line">        .pipe(babel())</span><br><span class="line">        .pipe(dest(<span class="string">&#x27;cjs/&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">esm</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> tsProject = ts.createProject(<span class="string">&#x27;tsconfig.json&#x27;</span>, &#123;</span><br><span class="line">        <span class="built_in">module</span>: <span class="string">&#x27;ESNEXT&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tsProject.src()</span><br><span class="line">        .pipe(tsProject())</span><br><span class="line">        .pipe(dest(<span class="string">&#x27;es/&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.default = series(cjs, esm)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>到此，<code>gulp</code>初步探索就结束了，下篇将探索<code>gulp</code>高级玩法，诸如，结合 <code>rollup</code>、结合<code>webpack</code>……</p>
]]></content>
      <categories>
        <category>gulp</category>
      </categories>
      <tags>
        <tag>模块化</tag>
      </tags>
  </entry>
  <entry>
    <title>三分钟带你彻底搞懂`new`关键字</title>
    <url>/article/how-to-implement-new/</url>
    <content><![CDATA[<p>一年前的我对于一道面试题，虽然最后知道了答案，但是一直没有机会将它讲的通透。</p>
<p>借此机会，（<del>当一面面试官，面试候选人，但是有好多候选人都不是很清晰</del>），首先，了解这个知识点，你会收获什么？</p>
<ul>
<li><code>new</code>的实现原理</li>
<li>构造函数的注意事项</li>
</ul>
<p><strong>看懂本章的前提：你要理解原型链</strong></p>
<h4 id="析题（拆解步骤）"><a href="#析题（拆解步骤）" class="headerlink" title="析题（拆解步骤）"></a>析题（拆解步骤）</h4><p><code>new</code>做了什么事：</p>
<ul>
<li>绑定 <code>this</code> 的经典操作</li>
<li>拥有自己的构造函数</li>
<li>当返回非引用类型的时候，<code>new</code>返回的是构造函数的<code>prototype</code>.引用类型，返回构造函数的执行结果（这里其实与<code>java</code>的执行结果有所区别）</li>
<li>我们的构造函数名都有一个约定俗成的规范：<code>大驼峰</code>，例如：<code>Person</code>……</li>
</ul>
<p>直接上代码！</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myNew</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 记录函数参数</span></span><br><span class="line">    <span class="keyword">const</span> _args = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 拆分构造函数</span></span><br><span class="line">    <span class="keyword">const</span> constru = [].shift.call(_args);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测构造函数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> constru !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">            <span class="string">`</span></span><br><span class="line"><span class="string">                myNew Error: The constructor should be a function</span></span><br><span class="line"><span class="string">            `</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 校验函数名</span></span><br><span class="line">    <span class="keyword">if</span> (constru.name.charAt(<span class="number">0</span>).toUpperCase() !== constru.name.charAt(<span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">            <span class="string">`</span></span><br><span class="line"><span class="string">                myNew Error: The constructor name&#x27;s first char should be a Uppercase</span></span><br><span class="line"><span class="string">            `</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以构造函数的原型链创建原型对象</span></span><br><span class="line">    <span class="keyword">const</span> obj = <span class="built_in">Object</span>.create(constru.prototype);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行构造函数，并且绑定 this 到新建的Obj上，且传入参数</span></span><br><span class="line">    <span class="keyword">const</span> result = constru.apply(obj, _args);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (result &amp;&amp; (<span class="keyword">typeof</span> result === <span class="string">&#x27;object&#x27;</span> || <span class="keyword">typeof</span> result === <span class="string">&#x27;function&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>验证<code>返回值为非引用类型：</code></strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = myNew(Test, <span class="string">&quot;name&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure>

<p>打印</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Test &#123; name: <span class="string">&#x27;name&#x27;</span> &#125;</span><br></pre></td></tr></table></figure>


<p><strong>验证<code>返回值为引用类型：</code></strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        age: <span class="number">14</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = myNew(Test, <span class="string">&quot;name&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure>

<p>打印</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123; age: 14 &#125;</span><br></pre></td></tr></table></figure>

<p>今天，你学废了吗？</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>年中复盘，自我考核</title>
    <url>/article/the-life-in-middle/</url>
    <content><![CDATA[<p>简单复盘一下上半年自己做的一些事情，以及下半年的规划。</p>
<h3 id="上半年主要从业务线调整到了架构组："><a href="#上半年主要从业务线调整到了架构组：" class="headerlink" title="上半年主要从业务线调整到了架构组："></a>上半年主要从业务线调整到了架构组：</h3><ul>
<li>业务线支援（完成跨境电商、货代赋能相关专项一期）</li>
<li>配合 <code>Sentry</code> 监控(<code>Sentry</code>升级是我老板在做)，开发针对 <code>React Error Boundry</code>的后备渲染组件。</li>
<li>拆分项目（老项目 -&gt; 新项目）</li>
<li>重构完成<code>60%</code></li>
<li>接入<code>Cypress</code>，<code>UI</code> 自动化测试（暂时还没写测试用例）</li>
<li>简易版<code>Monaco Web IDe</code>开发</li>
</ul>
<p>做的事情不多，大部分还是在支援业务线上。</p>
<hr>
<p>其实我想出去看看了，看看外面的世界，换一个环境，继续开始我的路途。</p>
<p>天下没有不散的宴席，对别人也是，对我也是。</p>
<p>以目前的工作能力应该可以对标<del>3</del>5<del>1</del>3年经验的前端。</p>
<h3 id="下半年的规划："><a href="#下半年的规划：" class="headerlink" title="下半年的规划："></a>下半年的规划：</h3><ul>
<li>找到一份相对满意的工作</li>
<li>在公司内做出一点成绩来</li>
<li>深入研究技术领域，闲暇时间给开源社区做做贡献（<del>Antd 还有一个我提的 bug ，等我去提 mr</del>）</li>
<li>锻炼自己的产品思维、测试思维，完善一整条流水线的思维能力</li>
<li>在对技术热爱的同时，掌握一项运动（想跑步），感兴趣一件事（可以谈个恋爱，可以学习摄影）</li>
</ul>
<p>年已过半，不忘初心，再接再厉，爱惜身体！好好赚钱。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>从业务思考再次邂逅加密算法</title>
    <url>/article/first-know-md5/</url>
    <content><![CDATA[<p>在介绍骚操作的时候，先：</p>
<p>着重介绍下常见的加密摘要函数：</p>
<p>首先可以先介绍下盐的用途。</p>
<blockquote>
<p>盐（Salt），在密码学中，是指在散列之前将散列内容（例如：密码）的任意固定位置插入特定的字符串。这个在散列中加入字符串的方式称为“加盐”。其作用是让加盐后的散列结果和没有加盐的结果不相同，在不同的应用情景中，这个处理可以增加额外的安全性。</p>
</blockquote>
<p>为什么要加盐？</p>
<blockquote>
<p>通常情况下，当字段经过散列处理（如SHA-1），会生成一段散列值，而散列后的值一般是无法通过特定算法得到原始字段的。但是某些情况，比如一个大型的彩虹表，通过在表中搜索该SHA-1值，很有可能在极短的时间内找到该散列值对应的真实字段内容。</p>
</blockquote>
<blockquote>
<p>加盐后的散列值，可以极大的降低由于用户数据被盗而带来的密码泄漏风险，即使通过彩虹表寻找到了散列后的数值所对应的原始内容，但是由于经过了加盐，插入的字符串扰乱了真正的密码，使得获得真实密码的概率大大降低。</p>
</blockquote>
<h2 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a><code>MD5</code></h2><p><a href="https://zhuanlan.zhihu.com/p/191446610">下面的解释来自知乎</a> : <a href="https://zhuanlan.zhihu.com/p/191446610">https://zhuanlan.zhihu.com/p/191446610</a></p>
<blockquote>
<p>MD5（信息-摘要算法5）：MD5将任意长度的“字节串”映射为一个128bit的大整数。MD5以512位分组来处理输入的信息，且每一分组又被划分为16个32位子分组，经过了一系列的处理后，算法的输出由四个32位分组组成，将这四个32位分组级联后将生成一个128位散列值。</p>
</blockquote>
<h2 id="SHA"><a href="#SHA" class="headerlink" title="SHA"></a><code>SHA</code></h2><blockquote>
<p>SHA（安全哈希算法）：该算法的思想是接收一段明文，然后以一种不可逆的方式将它转换成一段（通常更小）密文，也可以简单的理解为取一串输入码（称为预映射或信息），并把它们转化为长度较短、位数固定的输出序列即散列值（也称为信息摘要或信息认证代码）的过程。可以对任意长度的数据运算生成一个160位的数值。SHA将输入流按照每块512位（64个字节）进行分块，并产生20个字节的被称为信息认证代码或信息摘要的输出。SHA-1是不可逆的、防冲突，并具有良好的雪崩效应。</p>
</blockquote>
<h2 id="数据传输加密算法流程"><a href="#数据传输加密算法流程" class="headerlink" title="数据传输加密算法流程"></a>数据传输加密算法流程</h2><p>前后端约定加密算法，在后端生成<strong>公钥</strong>&amp;<strong>私钥</strong></p>
<p>前端请求接口拿到<strong>公钥</strong>｜<strong>盐</strong>加密后，给后端：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加盐加密</span></span><br><span class="line"><span class="keyword">import</span> JsSha <span class="keyword">from</span> <span class="string">&#x27;jssha&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> encryptPwdWithSalt = <span class="function">(<span class="params">pwd, salt</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> JsShaObj  = <span class="keyword">new</span> JsSha(<span class="string">&#x27;SHA_256&#x27;</span>, <span class="string">&#x27;TEXT&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 加密加盐，必要时可以二次加密再加盐</span></span><br><span class="line">    JsShaObj.update(<span class="string">`<span class="subst">$&#123;pwd&#125;</span><span class="subst">$&#123;salt&#125;</span>`</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回 16 进制的 hash 散列值</span></span><br><span class="line">    <span class="keyword">return</span> JsShaObj.getHash(<span class="string">&#x27;HEX&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 公钥再次加密</span></span><br><span class="line"><span class="keyword">import</span> JsEncrypt <span class="keyword">from</span> <span class="string">&#x27;jsencrypt&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setRSAPKAndEncrypt = <span class="function">(<span class="params">publicKey, pwd, salt</span>) =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> encrypt = <span class="keyword">new</span> JSEncrypt();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置RSA公钥</span></span><br><span class="line">    encrypt.setPublicKey(publicKey);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> JsEncrypt.encrypt(encryptPwdWithSalt(pwd, salt))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>后端拿到前端的加密结果后，根据服务端存储的<strong>私钥</strong>解密。</p>
<p>对比数据库密文，判断<code>hash</code>是否一致。</p>
<p><strong>Case：需要注意的几点</strong></p>
<ul>
<li>盐通常加在前面，不过也无所谓</li>
<li>在使用<code>客户端请求盐</code>这种操作的时候，一定要注意不要直接用<strong>用户名</strong>去做请求，因为，恶意攻击者可能会通过脚本拿我们的有效用户名。</li>
</ul>
<h2 id="另外的用途"><a href="#另外的用途" class="headerlink" title="另外的用途"></a>另外的用途</h2><h4 id="需求盘点"><a href="#需求盘点" class="headerlink" title="需求盘点"></a>需求盘点</h4><p>在修改数据流图时，且切换所在<code>tab</code>时，检测是否有改动，弹出二次确认弹窗。</p>
<h4 id="拆分逻辑"><a href="#拆分逻辑" class="headerlink" title="拆分逻辑"></a>拆分逻辑</h4><ul>
<li>切换 <code>tab</code> 拦截</li>
<li>改动校验</li>
</ul>
<h4 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h4><ul>
<li><code>tab</code>切换使用<code>Antd  tabs</code>组件的受控模式（注入<code>onChange</code>属性与<code>activeKey</code>）</li>
<li>改动校验，使用<code>MD5</code>加密序列化字符串做对比</li>
</ul>
<h4 id="开发过程中的坑"><a href="#开发过程中的坑" class="headerlink" title="开发过程中的坑"></a>开发过程中的坑</h4><ul>
<li>组件封装独立性过高，借助<code>PubSub</code>消息通知，唤起二次确认，与确认完毕后，<code>tab</code>切换操作续命。</li>
<li><code>MD5</code>相同的内容，但是多一个空格，<code>hash</code>值都会不同，加密前先过滤空格</li>
<li>存储初始<code>MD5</code><ul>
<li>考虑多个<code>tab</code>打开相同的页面</li>
<li>生命周期</li>
</ul>
</li>
</ul>
<p>解决多<code>tab</code>问题</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; nanoid &#125; <span class="keyword">from</span> <span class="string">&#x27;nanoid&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pageM: Partial&lt;Record&lt;<span class="built_in">string</span>, <span class="built_in">any</span>&gt;&gt; = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gNanoId = <span class="function">(<span class="params">key: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!pageModal[key]) &#123;</span><br><span class="line">        pageModal[key] = nanoid();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">plantStore</span>(<span class="params">key: <span class="built_in">string</span>, value: <span class="built_in">string</span></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">    gNanoId(key);</span><br><span class="line">    sessionStorage.setItem(<span class="string">`<span class="subst">$&#123;pageModal[key]&#125;</span>_<span class="subst">$&#123;key&#125;</span>`</span>, value);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStore</span>(<span class="params">key: <span class="built_in">string</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sessionStorage.getItem(<span class="string">`<span class="subst">$&#123;pageModal[key]&#125;</span>_<span class="subst">$&#123;key&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rmStore</span>(<span class="params">key: <span class="built_in">string</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">    sessionStorage.removeItem(<span class="string">`<span class="subst">$&#123;pageModal.id&#125;</span>_<span class="subst">$&#123;key&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;pageModal.id&#125;</span>_<span class="subst">$&#123;key&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clearStore</span>(<span class="params">key: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.keys(sessionStorage).forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.includes(key)) &#123;</span><br><span class="line">            sessionStorage.removeItem(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    plantStore,</span><br><span class="line">    rmStore,</span><br><span class="line">    getStore,</span><br><span class="line">    clearStore</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>在最后提到的，脚本伪造请求的时候，其实我们目前的请求都有<code>Referer</code>,但是要在 <code>Nginx</code> 层配置请求:</p>
<p>这里暂时列举图片请求的<code>防盗规则</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> location ~* \.(gif|jpg|png)$ &#123;</span><br><span class="line">    valid_referers none blocked *.phptest.com;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$invalid_referer</span>) &#123;</span><br><span class="line">        <span class="built_in">return</span> 403;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>最后</p>
<ul>
<li>感谢我的现任同事龙哥（<code>javaer</code>）给予的耐心解释～</li>
<li>感谢我的现任同事圈圈(<code>jser</code>)在周会过程中分享的<code>nanoid</code></li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://wooyun.js.org/drops/%E5%8A%A0%E7%9B%90hash%E4%BF%9D%E5%AD%98%E5%AF%86%E7%A0%81%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%96%B9%E5%BC%8F.html">加盐hash保存密码的正确方式</a></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>md5</tag>
        <tag>sha1</tag>
        <tag>sha256</tag>
      </tags>
  </entry>
  <entry>
    <title>万般思量，我选择离开</title>
    <url>/article/for-furture/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="78d1da7c2dd837fd7dcc51a22abc93b707e5a888a6e9cbc85b02837f86f38919">837d5b8d3dc3a6e0d45727afd13e616510a1570de173eee7dbb20ed13064660b8fd618f7b08631499fd6acbff0ade50f1f818fc6df09423b3231e543fdb4445b323828a1f4f20823344421db04342b0b014b828ec13be2ee300c7cbb3355f8fd47bad5d78806e4b243f8ec44c25cf23b4941221d12cf79ed05fa3deb01f1296c435583eb6e7a3ae39184d930702bd2e583d0622f612404f7a520482662a9faf965b378e11a43e2f51f434a9dbb961cb7481785091cc5ffb4bbc4332b7f699ec60fb4cc6fd9dd1be0e062cac7c3fe7251e426538fac6e5c141fe8d054f1ad25f6e5c426894e6e1dd37c51488a3c60b9e4e35ea31296b5b9be753838c5bd47c2bad3130c3b1351bf88a7952633efeb58f875a872b6810bdcceee3510e667be5325d6ebdae0eb4e152f68db0bcdd4f4cb852a658a129b496f7e4757b2b6192b13013f4621cf4db5af54f4d400da76b114b0ef3de6cf30ba3d013b108d998d273ce6d991f18a424cb48d12921789e5b0e4dc2973b9ae8ee752fb0ec8946b0efcffbc27f742a7fbeb166d6fbaa774f9942894428ae473b958e2da9185c6a47eb591e7a4d8651ff10c6b06dc659b3e1144f2ad08beb9ae6d0abb055bab98ff5809d0ce1a4bf0d1c4c3f12f3abb8e553ddbbe0d5c5728a42258afcc6a6ed5c2b0eba8b23ad9048bbfc206ac1af108444869d864164c01943981c9ff706d318440482d33cda2c857eba240b7c26ef3c16591b3ce0de885dbf33146fa84bae6e870725ff5e51597b5e3004b67cd361e8a1a9e394877fddcff25667d06a9248d4f54d891b4d75167e8e35a0baec8ecbfaf809038fa8d4713ed64a985e8ad9d944c219e53bc8637be35ffbc6689f26b6555a439a90b1ac3ef03fa3698cb075970aba52427174123ad073422c7e0e71b79070ed4aa3e43784d6301217ab2ee041a8fabd0c1222b554dcb38323416046094cb33990e687d511d43de53d5ffb50f7cbdb51e8b014449429e99638b47d407e54593002da207da3a1db0fd9970aab28b505c728616695b40148041f513d0079c4e352b55d872eb2f8f3450afeed39fe3fcb122650486a1780d7d7269aef1aa72f2c561cceaf67b5f0de598c9679073fecf136f584db70fce27174d0a7bdbfd0a9531f8f17f2bef1f35818bb558dabc6f5949ef3a846e2ffa2e3d754d6b4d43b5440501b3966290f3959824627f0221a1fd86550f1bebaae387c7a0a62525f9d0793b4dea4b473782c68dc919587ca062632b9147d4a6f1b62449ff16afc4d0f339d54d72a775542010aea58ec4e43d1abfc644a72e5360dd4290ca7b7c81a264811ad1f4eaea2bddd9a4b62bfa036b34a929ec6244af28e5c36b13321caf292c5b79d4326530eea1c10f8e1ef610aea3820d94a79f2668c06713424e7eee2354b8b7340ed9bca3f26c4c8eaaee0c27efd84d80d0fee565360dba50dd46ca84c70be33f94c04d56324c25a1e9d6e8c2b9d840646b94fc39c4634944a439a603fbf6b639d112461e965ba1a820d7626a50ad0812a91fb94f4ce2ac9cb5839ac87965a9fa87d9bc21fd62b43ddaad1e4514880c23deff1d3e4716385265611cc6a6a7c9f8a697255ee8b58423b90d3571cc5ae79e3dc05c155ef2c05fd53a00f4ff158f3d0570cf0ea5050214e75468d87016448913613e194e9b7ab43bb5cf80bffae0659709f1c2fc30ac65f86eee803984e78f3826f6797d0769883875b96a3b83e02ca30144f3ce347f3b6c8408869dc06c465941c4f695911eaf574142bff2443d388de702a2dbd6b4284f2e0be6dadc32688e2538532a727e254cf5e26839e77b5a818aba1ac7d2cfc545e9a13b4e2c9b03735635157664f51864b6dc7cdf8c8919cc82348350bfee573828fc5d3ce119c43a03077335049e0839a8e8e62a3105e125af5b3d563bddb23ae61054aa03a60c465da4d7e9ca1b45eaf6de57e07b36a9dddb921da2d82ed1e062b5a125f07c21578381d9f4cf18ec67c2131209089c9dcbf54d2977050755af9f220767bc1c9896c1f3121d69c3c47ec3895107a7ea77d49f9e1098cd58a154fe54f4e7c680fe0223ec18894b5bd8c13824604725bc73648863ddceb3334e3090dc5b3eac1ff2c9eb4e6fde032088bfdaad53dac77e6b03ef183b8abf6d0c4682910d4daf213903040bb88c738b9ceeabc420e14f2f6c29003ff2a57ecb279e1ea9ecbcc136c1d36d916a798e497cb426f236fade4640c0184da0f7654175666949c27c2a6f55967eebf8451a279090cf05d4f337cf063944abd06fbda8c99d4216e6b834ceb08b6e3796673fecee0721087bb222a11268d706c7a4b2859fb358514ca0d324b1a29284ce4c1f7aefda26221c69c8758d2f50caf4c2dd931ca32bfb9f279bd3c83a2ccc7b5eb35bc4547c94cbe5a76b53cd97ffa6f9ecbcbedf68abbfba4f99cca868b2f4e28fa56c3740e62e029500497e445b66af74eaa87270c50183ab72699a9de81b5ba0a0a63c2297c320b6b0682ccc882046e4837016b3f020abb0918d3195f9311c7a6a449a59f5f2e0cf45270d644735d2ed8199901694a8a0508eb59ee898b2e94125b9474e68a6372b4842844ca40acc3bee22b7fb1c659e4f9da060a4fb03191a019020de865ce1ceb360061cb8b11d7f0c482768312a93ca691d3514244f631ecf0b5fedfd21368496fc5e4baf3fdec48fac789f3bafa16b8f00ad7d1fac25c9faf43fafae7270e1f036da062fb1755f50519763f67bad20933a922a2fce8b9090c7fbb0eac85ae7315291eea6554e66dcc07b68e0b2f34edba158d0f5551546469b04db8a4f3c44bd1c3c2c30261bb4b62f05b23ef875b1040e9f635ecaf4397a3d45c716bfa95f64c2cb42ced6c4abc4c760c6908c3948c98ba577e85bce7b3f703f1a4c4cfaf41f2334ffee42c78b87115bd6be2e57a844c9033e022cc096de303c265225e8fc8142c1da5f512dcad26f1bc4f8980a9ee49b69d445afbffddf628884ce9e4f5ea0bc90539665265fe9033153f563ea5ffc9bb14c3c390c671e768539a86c9c739a8bb2b24c357e8a5f8acbc18de0a3bfd1d2700517e9d5b6da4b13fccc8b7bec56d96f13d612d5ec4f9ab02880b75e964bb602f97e5f165e231cb07d843b21d35cbb4f0c244bead47ce385363a22e04fc7653d58ef9bed64511e10912416cacfb30e44130296ad012aa3ec3b60194bce27ef9325dbdf1c14234b4d197d86e444cab4b7a885f7f2777ea27293e516a9671132c0c7ff2da5165676b99f78d6b1ffc651410727164319328085d02060cf298c7de02545d86d8c03192ec00c7e9d0f6f7be22cf1e4f323648880de07f02c21c9fa3fefd066d95116353006b002b0b3c4b7bc179ef059217eb9a8aa00f27a4e0daea7b208b078b6eeef5eedf2ce061756ab19bacdba4a0e1e5d9c01acbd3e4c667c0273db0873b2597585e99d5e38c43025cb4dd18528d60815c3c6bbcd7f10319ba349b74e8fb29bcfc6e360fc60385f67c5038f3068072b15257a9c8a2fa9d0cdc2a50c82fe335846ff40a69b015f2a7aa19dff885c1e1d8b9564bc5e3a59dcf1410f04329f63039404dea409dbbc73f2eb885bb19af93507a0c0a00e46234fe85f23ef4904842873131d96eb85a76ba8527655eebcf87c7ffaf6e552c3cdc0efd0873baa89597b4f1f9e0a742907a57b1ca0f497f7d3de3d2131b9c24b0409246e4ada6fb43738df70e274ebcefa5ed978495145aaacc970b53611c7b06867e6efc123c2a105e9bf2707fcae1d5f8da6715992e5547e1bd27d52f0f631873eb7b9a70639c700eb6ed01908b03775464119c47c9974b35caafdbad642a0c9768546eb81c4a41a82b30a34f3b066a8792526a84de15a83816f539d10117d4fb579f30c386d4588d889c4115d416bd6459f19a9664c60c48053cda80d95cee97607175ca1215f4c72e4237b35e15861e3325abd9c885a5e20ed272aa2a7979e34b3a199bc09ef5c4d2acdb075d33916a8a7c2dc843ea24f446c49b706e580318eb6cc8941c1a905142e13db84199b5ba80956cdb9a5b2f5e390e27f971f03377cddaca3654b1a4606cce7e639dcf2c168cbf065b92641cbf3a48d76960574edda187a8b67cb9b0b0969bbb02fad0c1e81e96c530e02eaeeb5db3d711075cb1a5dfd01a22edf9ba30b5a0b22a730f5cfb48b2a16c6ec4fbe639fb6908675bd0bede28bf887c6d4c48ffb83005077ec0f7d05d220b89b2bc4a9721a476f3bbb8eb34450682808a1764b6cb7f9fa18617cf636c06909da23375899644272177924ac30092e920ea64fe14b150ec24f251170a50e6cbaeebd9743bbb341edb89696d94dd8be4af369426844a6725470b6183118385f5cb87982a64fc0316ae1a54c146d4c9f9151fb45792ef24f1866728fcd81eccfccbe7c21338c04696e94718c12dc14f3ac5becea465dfd3eff202c3ba2543bad8aa1c09baeb0ac9a7cade161fbad6d5663b5747699b31d2a19e36ba2bbf6623a0bfeb999325dce470b036e3ac3a5b312e5f35bb8f5b73b1d47753e25e4439865ecc3d1a88b1440220560a2d931952310ac0c18aa369e308c766846eff33d7668e35c51edbf84e13f3dd3383110a67d7defa84e88e87f3caf68b409edb3fdac200ba3445d3a0e1cba44b111c321ade94388c5b0c1a65cd49ed6938ce14d42a821a21a481203fefe44360740373da6228ee861fe9e5fbf0f9079e8ae4933785fbfd157957f8c0f18f6df61d07fcb852c7298f87a1a507bdd45f98bd3b401696af6c053621bcf3953d5012d460144f88c569fa07b9206951f118f587ca89b5d6bca22c82b6892df57fecb20a2d52915d21175863b718654c93a088601d5b7c74f40c2ecfe33950b1cf2dbd889a2b06ae881dff6fef28a3d3b8d6a0048abc2db8c9cd42dabf74b8677ee20b3ca1cd8e1bb636de487bb5a9f316d6d07a46a76f5e1447f03712b73736729ca3b0201eb65f5b5112d9dcf4ffaf3ad4ec5b839f04cda5be9d02f559b8a064e8e65c0f88b5e1d9575c80d46237811cf5ad1c8abad72deadc4237d1f25efbf445824205bcd47074960b1fdc2769b5180eb6fa6691e6aca4f7b64a878a00e6a149ce2be896ebbc08830ce4f7b9c389f8dc2b814f8de9772e959f9bd8e1fcf34945c2a8bf793dab6b8389fed38da5473a6774441acc82968189f1f1085785ba954d8e1a58047dc596dcd3bcb878deaa9e2b256313b990798a4b92d24005e158774d1025d06a73a2dfaa6c5779a4c46a3daf3b1a7573a05a53a05483f3c34dd21bfc2f72ac52ae736a60de38c04e566e06483d7b43a390cf28d235b6dfa8df289116f2ea9ea3859f376b5579edf5ed9c1359c9553e182d353b8b8b805f2654915262fe2f7e582c724cf6de7245461d0e8c79b6a3f12f8e953fcc0924fb7e0df24dd4a5710e5731d8de43c9402648433d0a638666ceb211a335b724006486c840bc07fbdd7699f59e0a1adc350f3925f7dcdc6a4bb321b54aa21c26ef0c115937f98d7341713839756e9eda5b88a8ea62c8bc71191fd01559cb38d73eea6337399940673072b0ce82c4a073690c005eaa5f02ae8b4abad3cd78b05aafb686fbcbaba516b7b139e647236b5b54d0cbebbf650f634f3b41fe75448e7bf5f7fcdfcd1682a8c026ef854bb93d01516875b62f9d6cd40bf2ebe4b5ccf49fb5733ae45afc1e075ac101edf7a7db061f80d2a9a43a2581533121514e2388fbd95a41380a8c1188f692988e1943fc5fed963e0f12325f1342b574bdc2b9a2d378058a14e43a816411392ce8f0ca94f764af2f61f3b4cc473e945af8834514393b76ccd86d814516b5b84477c363a4680b7f9d844a88ca2ba5dcfe870250e2b03dc8f3ae1d615f0a109ea581996ce1f0e7c4e7aeef9aa32fa5df8f440c249b32d9d2b8aae5ef809881e32dbc3904c971abf0dd8bbadfd0d182c00d3bfea303874643e62089fa54cd14e6c318ba87e359c2d4ce260b42021fbf97fd9c0bcd4fef28beac15f63b61423836d26d0198d6375b55e6fc4affb8a05ce7b34d39cda118cd5c61c18b793f404a97cdffdca7a6dd32ad36f748c973748d33e8b8d615c277ce816c5291e0bef7a92e7b063d5b83cb3e83744926d8afc243b5f2df0f6a93b3e82ef6c285d8c06f412d9a7ddfb03ee7262e4c3258da5336d2a11809ba74d6e6b11cd0bdf4264ed926bdfa014703aef1523efd5aae76668cb65b9213255b4b7d46a233971581e36ccbae51d772cb34907f1c3ff3ab550ae16173308ec5bd9ea8a59bfad9ee19b45d87be0a8e3ffc576d36188fc5d5806e5d759cc2b55c35cfca4f0254f8ed5ded0e36c613162c9b8b9187d11590d627cdadab7a0240b0a60a1d0eeb6b887a6667669f2b2e4ca40be90e2d2fd9425592243a5a9461ab2e196ca5cace1e508beaabf21220591cedd705da70e5f77caea67636f0cb5c50436d83ff01999abf4f226fd6483a9ec8ba0276d5109ff8db5c0c11328a1387fbf85f5ad8a1e7fd1392730cb7f484d2a8a4cab896b75594bf995d3cdeb22a8c17e60590ebfad3c3dd4b067cacc763f86d73b542dcc7bc3de2f193bb8e8c6f191140cef273279977e58118cd65d06c1ce2cec0e491a9d5e93ab62aba00ec5c8b377ce818f0c4eba4fd36b2178481a98bc73c0aa26e8265f0bd44382f4ba34ed4638360a3d8733adc1bba4a24b1254de731578815c01c8cb2c868a196b6212d263aecaf5a0bfb0184999a820e7a66db05a8a886336758bfb78284f35dab7299b65228260f5f1c72cb76e16d4964420997538ab400c4529b2ae008f9c18707ff96d1c50696649639bfb736f0513c2e8ad5d2948490efe31a024658feeac64d6c91c0b0a26f44859e55dcd594dd1d909cf8c15ee215505baff20d7bda67fb9a4496e6506ac9b4d653405ad06a3af1c059b58da70f0ee70b941e2cdb7ce618e2612528da9ffe9aeb993a9eeccdfe3f8dca6bd74911b2971dc7131c6f592f5bc35fa55a5f4130f3ed9552aa6af8d787ebc318355e643192ff0d4db654d950b96ccd5716f2d36109312e81d5130219b0ca52d685e67cf6d417bc21c30e9c790f2b9262013868db426ac0597dddf50f8d7320543c5db355f57b924c9c25d87b372e590a3b8394ed771a9e800059a51f5ddc3bac79bd1bb367167bc7b314b02332df866ca5ec98f0dbf4ce1507a75ac1ee0b88bd9e8c96fdc85a050cf0cbbae0a389a913fb38fc6be29ef4d9339416ef2e146335563094ccb44f814190a3901d79bdbf6762570e19922c2589f4e17279fc08db95e18a3c826c3341bdf9286d06344eb2a46acfca1218f0203d06d74113d0315d87d897ad63c58c7682c198b9f5106155e53f9f175977a8644db5c786ed0cf916efb3c6ac0335d8b9a652311751892bde890f2db51e1467f839e24c87874f50fd82fcee2884cfda68e17367e75f196e50e35816f92545aa28f5730f1e158cdc34d6979d0246e43ccb75822dc39b6f4d962bae5336c54a9901e364b47f0c9d834f90599eedc67ef0e26bf9f88d2a8bdeaef197fe3d97b42caf93cc2089cc3da227c34e33fad45c1fcd25cf6292c2f4f0d5bec6c0701643a6f601ace30bcb0f88e3ed0f59973483191190a9a60e807a0764c820356491a07d59982cc1e1cfc65e276b798217cfe39ff65e016f390e7e6d101c05292f1ce88f9bc19d6af21ab727defaa76de3d33c33369d71b56babc5791f591a56f70663faee40b54bfcf911884771b993c3528f33c0d848f418c7232c064423001561087c23ad79d6ec953f520b52902ec7ac9d502e947d64c0e89f776650b05c5a3694897ad0f5bfb0580ed08015b83c7e412291a74c10725dffa10a1a1602db69a5337551f3d90f170dd47cf28a23d97c021ab3d875292f856c204273a6f3f5ca33610f7460c09e38d744b74ee3f58f40d241da7b0abb852e073924371f6c12480712625b470ec3e0935ba88bb237e83dc68bacf9c5816e9cf9f84e3a3bf6226bb2f21bb9629d4dcc99f9eaa46e479182500eed6a5a6e044bbdc6654f4e844ade916263216cc977dd243532ac3450d38d4eab537f7772f989482ff255afffdc41ee480ce19da4f6bc736d951f790a6c9c333c52e4af077d690bd55304fb4135b8facc9be79d762b55bf6b32280d82f9a55df2d413c18629362e26b04d94cdbd923f0b0f27ffbb1f51aa2c202acc941c6bd10fc2df4d09f0c5f682702071d2f17a7c950b761f4dc5f14a423f751fadd73bdfebc8e254d5b245a5e3a07b504e68f2ca9c28b7cabc573212c850d900bed6c97e56622472e24a1b3ec67c73be8b8fb1293601b847b749b6700f1c30a023779789eef2853299c3ace6b0fc6585d7b8c09cf9e78842984f5511e3a133cd1cab29049aa42ebf58d2a08729d4e591fa620ab582e469f986a879bb030a21cf820c5ce0b552d20d135e164f01740675a1e387a818b15f283128f88d2fa65ac8fa25393946e2a2fd56533697dc4e78b35311f79a56b8554f9caf9180de28ab60aaa4aa7ed3cdf4298a837bbe145f46a04c00ec1939c568e677c257667c820508048f1bc6a252161cef9ffde11e985ee0eccb52fb0b6d11902aba717594d34e570dde38a6a70ef8213c75954beb887a3f034bf9328c5a4cf2895e4b03e350022be7938457f377e6931069e9fdaf0583a6a113c25c343d4003296ddc93c794436c7d378e320e09f3169df95740533f38c0f36546f394dd99200a2a5bc2e3bd66879b8494b978cb486d6358018b429aacdc7be00eabf37c3c7e64e81fc27ad78c78371d5192bce3b6463734202a0352d5a9bbbc25251759dea8ce436ba171778f7ac8b7c107c54bed33af80c7a71546c9d507d817ebcbdd2f697ab112c04291039de541bc03cc2609452b1bc2cf0c9a0ccfdf25b8a417f9206fb1dd17e5014aa56e935ad69b749e936b415255c8a1496d7ccba78e28db591166ba0ebf163a5667d2312fc59e874d01b819ec95a38eabd7375852338df6df441eb0e7eaf59bd26a5a864f495113ef1e61daef3d8483677c02937d24898ad8ea62faca9a8c7d6c138ddad6b2672c241c85bc80fca64c26376ceee405e78378a40811562c43ba7a0b3b22b3c75c033f4ccee8e870a907a70e23eddbcdb601e62a935388b8772efa99ceea9f579d15ff1d92b374396c78707bc0deb3066630150b5dc614016ede3f1ca666295f29b0c97917a57824dc9f0b1f56dded3208746877608ca7fb26d644fed5df990e6d3f78de171dbad8e8b3cb8d88b215fa2ab2f463f1550fea802e9f2eec0076c16e7e9bd4025bb2b0dc880295221ebb7f1da1b455078fa8ff8835a2e86ddd34e1118c27e5199838b2cab6a4f9d19d4bcc9d55c544f1007bb2833184d538c9f6c54b4c0691b220f26aca18e0be0c57240825d7865382cb36a9cbd8970a35a56d1da32fddcad79a34ffdfda8f655a6d72de064fce089caadc61ce3f940e517cf2b5fde43ce75fc0bd666517712f550b9629827e2329f8249f11c0b53ad20560cf956552e61b4c2a48ac57e268692b24f94624190a73d66bff5c21fb9af64992b1d67207c337682ea9673f25fb389b6da833b6f67377f2ec784333287e68d6527673e24fb504ed86714f0115ebb6d710977102107d0b5bb6a6228adc9869efbc44626ce2f95ece1bb958750ca34b32e281c7ea4fc1a1f3656b9eeb888a3f96f0c12cff19696f907313f02cef1116ab995d0f446d44406c608408e662053dc97c8259aed9807addafe156cb568ef94053a3e7bf3621c11571e852805b14b06064e10024c155245064ecc8df95df32b21d644232fc032f034f692c60e536957e808eaa96169cd75c4d400029f8920516b416b22715bf40c62b610215547531b0a4770f68a795aeceb823e6a18535ab99008673fbb8ed417bf2a51b16d69544c52371f51344fd96fcbeafde625e47e2a5af3b89e18e2c53a054c92a57cae91f6b8cd1eb311b3395a35ce45654519170ffa19f3157528cdb3f119c1dfcdb120568db7e21c6fd02e27704f316176aa59217d4b0db1de7edadee2281df664d91a4b456b5f31ea419fb393e0ac3353055494b8aa433a7d83d7e3be1ce8fdeeb8b6345dbdd17a2192272ddf20dc2f768fc807b6e40c8a4076396abbbd27de06cca1000fda9c425895d572eff51336cd6ee00e3fb4e882832b0fd33000f6710491274133dfe649f9c9bea394bc5669e6b3af8cf7bcf08398a65cbb355cd96755217b9d040cbae1d2f7fbab68fca11ca19ef257cde4bc7d881272ea4dc62d5e1bdc37c48ad46c6e1b4e44886bb5bcac3200eeee1b9eb0098b037c5a5cfa268fcd871916f686274561a48a2041d6265654fb30e386e616f938f29f22394db4d68b81da166c136e76a2ed72df2cdf1ebe1c11a6c85b73e1989145bbe8c505fe5a20cdb85425d8b2e171f11dfab0776d25a39d1524fbe937687567fc61acc4089e4ed13820b44b150cc11137cad798f057e11fbf0a0098a0fe870e8c30c9e70b0aeaa4b9fe86662539abf1abaea47058898318178b23145b0b485cf5797a4adecb18f6e5d2cc227c1e0cda2569ee0363e89dd4462e893f0a0853d25c01aa31432d988b820180caa2311430b6ceb2fa5f24f2751291bfc8bf56a466214d9f9fccc9bec040a085c06833919a1e967e9c237b1511cbf042cb8a5d5224767a42546d0ca8ae1368ae4041ff04721b943220aaa87267e998e9f81e208e6bf7dc9496fff508d237b05a5c3525f2ed4ab790021146ff91798e2df5c04de772cc64981c03e41ce30f11b5f9cb27037034f861e1e4fa7ac7787efcec32109272c0f3b1aee83e4d6c30ada97c60e9dbf0980e8994ab4659cfdc2295e022bc9d1ad7f7d0abaf37a7995e5bca005c9fe62fac5c6e37b6b29b21e73fdd38da05cb80d88feaa70622ea87ddcdaa18f9e6837129f2ce071528e14a8269100ff84b2f723ca2ae07eb1439e29aabcd557b824ea7faebed44768d2ed8d5b9ac0d278b81a7cc4128fd7f7709416f7ad8f78483680a3ecf40a91b0ff20b5986f2bbfe745fa49bf5fb916ef57a681257dcfa46902caec9313591b08c08facda58aa28b5aba92a5472a674b19df167dd763e7f96796f7f5b18b60b4ab73aa4eb2dd59711eed8446625a3a14dd9924fd87a106216d31958b249f21278bc1bbf84798f6a0e463435cc78b92f926ff7b45d9941c90c43c343740ce3034139639c27ef98cec86a44661c38ae82ac09e1ee44544eba4b4b504f3f6fa99cf85b28911b0c73c6c86be08356f1bc74dd76f764f2dcebdaf0dca34c905a0b717efce3b74a62190dacb6801feeba68213a39a82d88387c4c827a9f68777a7b372e013e8867bed8c970b0a6fad3e96375745afa9a26633b74dae7cf9f1c06481f8ef125681668930dfbb7590d8fe20f4a77b02c1039150b9e3a16f73c195ac7fda4abc6d47da061a203f8b9c33b666afad3c74d7478cb628e09b1b1545edfd366dc95530f6b90bff8a6959de985b5283fe041218409a47de353da412fd5b08bf8e8ebee868a03354d54a42ef83657e603062c9d6849fa1d40445d8f217390050a247d3856d4c9bfec289eebc2c4eb35a197b2ddcade19a321061dd9b6ff3ef6df9b4b6bf9d486e560a31f35b213239374151a0d83a16063bc336f95beaf232949490b8152a7c06d61f5745ce6c0219f4a4d712e2201f0e9bba164d5c6b4cbb447811538589903081c9bee32b0d04cfe9653f08931f0b3c0125a83f9eca4d23800f5f9630aeeff69f1f6336882df9436df822f95b1f3d7a3a216a7f32ccc7df36939091c2bb80a492cbf84e0ce8eb928756200237b914c054400730a0c9294660929ac50834537d00920fc3855ed4f9b6f0796a4ff4a46d01b6db0d0c09d80b8a53de484fc88880c0a0e3e6c9d6a346ebd526ba0a56dca485ea44a3e7f3f9737f4231e9d125257e47702b1dd2d4b1691686c2749bf9c3ea2d06f913c0c9026abe3b6ee1e4c08bb8b533b91a1fe4e9e13f246967ae0d80901dd9e44287e8b1273d883b1ba4d25f71968a2b819bd9457087dddc8a007c971a1bc51cfab57e60fa03458f473b60aa49106e871deda9b8cefaeb5336ba11ce60aba1293e3374c82a599ed54d3450ce58c07f5e4ce32e5ab4c1fbbd0c95553e0b3918aa22a4ffec504ac9f476ef8809e499a8bed8c83281a3239ab0c4087018a77ae67b37cc2e88474aac06cdbe95ac10567fd52c0ae2bd9ae21153730679e4c07ab1de7cc7c542da18971d18d7ee1b8ceb81425d1752c82f5f83b51f39f5a8bc6cffd1daaac0a6621ee9aa8d767c49df3a6dbd9131c49a2f664dc6285d526f6a7008712dd1945cdeb3fa24a3df9842dbdae33ec4367aafd273ef16d98a71634533b37234f3f48b39edfee4cab848f39a4cf2974018f868c3cc594b35ac2d0cefa5f82880eb218ae99e875ee29865d142650aa95f50f3a622d1127039b4daf5085a847da5955ca49575da1326065dc0cbd1bfa49b8ba3bfb312b8eeb11aedd09c6ba9a472603cd0dce771de6ff2aaf76d1d7d3d8804e705afb6f076032ddbf3ed1fd8ba82a95af5c7febad30f420775b3ac03543e1999f9fd3f39a4e40c5f64a96b1e0d3987c3bf584fd44094f0275e9450c629f7a816908c2f763f07c82a474e9c517c290507200d1a0e2ce404300b31c1994f7867aaff078cf1f58ec918e7053e4e9b89fa97ac77c418a06f7acf4f7bbb0157f46dffbee0781c47e592278a7b2c26c3d643e375a23c003a2dbf9d8a0007a26f07b8f4036e5a00d1c8529524586ec0dc09c547076d191746380297e7f7ac17baff63e733dc2882dee9966e6fcd35fdc1b21c9294c713078e9c006e78cfb4112d8792c3a641017e241e6e47913ebacc6ab460fd283e9f373f3b016d6ffdfb78092a32ce3fa0136a50dff69441b08d4071df854228a860a87b604975942e9b2dbf63dd4ddb63004977d97d728a2a47d085ad28bdef43c256e10f50d3f576b773820b3446af2a334fe5e648bf031af6473846bd816bdddf644d91f6ed408e381f585d40d515bf734374ba4d7b1bca40f09495a4a0aa9680adf62691c976cee41b8e2616117b029bad8a4e8940567e93c3f423af26d8d4b367b0ec11917e49e4aac84f476f6e34c29221545d4a91c8958371671597dffe697a98e3ef50722a7d8ab5687ecc86dc93c14e1cd7909584b425d07949c710f1e852ac25984c89a0bd02cfa43c6f2d58f8834569d6b56c4b3a94ba52988f7416524572544b1edf41880b2275852ed84b53b9a1b404984b4580cb7187edb90a7ac9b671138ea83f3e4f1af76554046fb275c78194a4d541bf59b1fcb6b1ed021a6d8cc75464284633a71d06eed8740c9504d796f9fc5519eb26dcf1d4ccac0b0436bb4544cba3c3831334ac9307c5eb1d530b611a228cf146b62b642e1cecb02a25dc75784207ae821574abebc768aa6c9d5908fd783f4a767fa2d01ecc2fc5bff07182af89d8fe1374fe3c922c83e5a770551a923365ee0a890b08e09801af01e6c02432f2c4db07144cc4f6b4a8af127f25f19f20c8990ff9c68efa922845cbcd4de878a44045b78be4c3b97f6a4b7f19ebbd079239e15dfe29f16a82b65cc02504fb5220951ca8aacde43f5ffcba334fda052ecd5b0455e8cf90e3766ffb642b251289528981b3c01e451eb6824ea607dc0dcb603c3907bdfd610263c4148a85cf969af27d6d64080c84862c65f36f2f93e91791c5dbe8482c82f31c77579358d5c1612a1fe471a94559a7c60ebd59f24f9ce7136ca763554a5d44477a88eb845d6c3efd80bb0cb93e261c5f7a9f926546bf83eccc8822446c0399b25b3750110435c4533c5b4a7dcafa77ae3c05a914ea41a54839b5dd7c53f4f17ff97991fc12fc01713d49cbae8511cf3ccf7d90b73cde2a63fe91b3ede8046f024e669803803776a800709b23ec1b8fe84a93bf737723f30aa95773d368c41cc293faa53a79bd8e5feeb4c761f088c156e8761df2f931889855336a7a1374d6a3acfa14e8cdc09087616635092db948126c890dd85b17e6529863e239c8fe62331b9495579956882bed406166f7cb11413b980ba4e0ccc2ee8fdce17542154d51950352076f0291977a017eec66d2eece0478ef1960e1f1ad1e753e3888e579b4ad4eab6835d5fc5281b131dca8d24b63ff836e235d8af354c3a515859cf1f25aef32b724aaa0815c86c4c5785d5eb423062694a46b5b3340e286d625bfbc8152d94587590ef78b255eb1f2d1600bb2b1b4a3f1864254e753145e552d5962f3bc75a30e5ffd9f299a87c3491804c34adfa2cdf2c3bd9e3253a5e227b8a897d8c3fbd78cc5b1e93a79573a42f6fb909df505113a5cdc91272a0ff86b66d63eda21bb1a4c6b054cd863997f59dab11eff8eabd89f1bb6f57a53789f9a7abfd7d42809a78ac781feedbe288758772af585bc282f41127ac8527242554f6a83b5c60977d3fce373bf9cbeaeb9eebde38366ddf74fc54d2d3560d5c1588a39ab9602421efad59d85412790574d3007c97375524ed8d5d0ac0cfe72be21bc3312e758eef453223a75ff32607db745c15103580f28fa9484a61e329effdea14542279b06b19c00513ef8c38def69d097fb608e40ed555da73ce35c21384b16fd6f77259b66cec58a4cef5d8a56c357885c035b73ce6c6f2bf4ba4ac7950d0faf2d99649862de43314824df1da3106c73a82d493e082dced27cf4ac023ccc5c20c896877c3a821495968b8321b9953e93969bc10e36d6f251c50c3efc2afbf371793e574be77cbbe9692663bcff37ea9c8eeb5c94fc03d0359e369bdd52f8e9b967527205586e567c33a5cefc0b463da31bca8b2209d9d8294ea2915577da064fe7164866bf94da3fa61a47e319f795cf63d13e4b3f91b7278f12a8d6eb8a072ef94a43296939d371d060f02afc611d0b3acee18449fa4365f899911db18c5fa41a11902f05412f4ee8474017d0ae6843208c90db7f0336e576ce252bfdc6e043f949587adbca3f43093fff741e5a1f4226c637193c0e44974587d38cca68abbc40a6668d98d84f690dbdbafd433290d62707e4e674b1c88baeb6aee6129ac88a25ad858bfb959b644664ef28c90ee32e917be733b592ae797c57be7462a49b854668cba4d66984cb98f8981e51e790f5bce65dca5032b5bb49f1bf320afd69de5e2bb6d940d28ef3b5eba191839afb17e43b9696dbb1e767d3eedd16c7f25387a9b0789ac35c1006e40e94f7592f810a1e9f54be0884f3d978297f137217175969f1e0fb0b14c9a8ac7815de212be3fcb6781f9285cdbbb7bb1d8631f3bac4221a7057afa76b99fd7cc66dde0aac6e4c5649c547597d70e413579a32a99726d49d15d1876c41f3416cb1a265836b7729c99f8e2d6a75bbd3ffa54eff5a4407970e73e1bd8acaa5cc737f5bdec495a545ba70b3c8dd1750f0a8bec2aee000fc83f1a349e845d68b7f30faeef647535e10e4ba62db11f33278c9367359933f87b7909fc0ac46f503ab0bd648997d126be301119e712368c0f9bb1e22269c3f402f24c21cc76fba6094e92c784342c2961eb8aabacd88147b23de8eb54d3acec8d71db4685d8ed6c53dfccc3013dae1a3ac6f24c7cbc1775ccb85236f94c50ffd27e71a1b7eb6f061285f1814007fa4ce4f502f806a86e39027b101bf98a9f7bab8ea4abe34368a5c994dc5f0308225b56d5b17ecd3780c3f066b003e2f8714172f4309cacc23938139167518cfaf427767dde207aa2bccfef1f32a6889d19fb02101e97f7704654336a83152dee9299d107f4e94e5d845405a1654320cd8b5ca6c73171f1dc691a8929d9e5a53f78402aa8a1d16591fdf0d32d122013d319c5c22706d028c6f1d63d2e038a801d160655060c65bb68d64df56e1a37664382d384fc2d75f2909e123a68e09ccc584701e23127172ba2629d033738ebba83d8ff9b6c190ba665adbe53572c5eafabd2ae9bec88ca5b4ada5447ebf1a37c0656395fcf3aea758d95835c336270f6f1509e89ae0da36a9bffc086640c41a4e1dd340200e98ad9db0b0e999581ff6681b569f6065cf741610839fbfc81850c917a122e58a81963ec94b8761fcb3938c77c5ce67fac816303b7da46d3686f4ad3e425474becb7d38a61eb5d918a5db3a1e3616044b7fd2aeac531723eb4e4d5a0a65b71bf211a41aa18d2865a60a90e7adcd970013a83fe5c5ba05e8bdf503193c10ad3aa69bc286e79c0785812f0a371437c423a7d5b201069a3a098a324544422b598372143768d9a4fba6780b28fad6bac1c6c00c758798462dbeeafe82b94e50d15d00b46236ba9b30821701af3ba32bd708cab5a089c977a269ccb25c14245955e85be78891b663f01a32d645590a7e4a9dbdfbbedae2c4607eca05937b8b33ea620c536d7d66bb9edb9951c06c0289173f756ad2b425e0eb3ca47f40910b73faafef0e4a345ed36e36c51d727aeb7735466c89b4792926135f9eebf83b55035e5afc82c6fe4dc6239f77ab6b89dbbd88520b5e02967ea1c00a896574c583d536a74a77e4fefce397f7924b12264858d1709f7dfe996e0df6fc3902220f7b932fb51e55fdcf4f5e4addb5238f58b7cf3b1ce1619ab510a697e7802ecc881a41d904f6c41c429e3b9fa96392643f32388e4a2e46ecf600ef43cc3de8375c066adb7e973912fd6b1f0c3e57567782edb42666fefe7cea3107c066f30e441d0652bde923c0e97c5e4c4be9eb86fa7f583b651dbdbf4ebd247839c880ce7bee5670ba9dc12cb82c43ed4aef9f5aca79317fb9837320165fe2e094286c2ef7feb853a920e6bce06ad1bf0f5e7e84d9ff58b3a1b029ed4169d02feb44efdc86a027202a19c07bce0a083dac59c7a86f9ccda7af20e49f6ae2c18d8893fcbc02d2b3a8fb4c0a2bebb5086429e69aec2fc6d1bc4f0054032e18aec57292ec0664c97e4c34c3a4805c74be8dfb924419d71d75b5cf0f0426eb63d8f2ebe40913856b931645d8cce8d6eb77d39738bec1c8b3c31fb1233e3cefa5b66c1cd30be6d7900beb6d48f5da2a4afb7aef24fbacf70b5ea01501a8f7d14f7542f4c4f98495e61b45f7322a6bb26749aa05ad1db284ef0c4d1a9eec85f89f14d1c60aabd66dd72b3a59e1c1080d478c575c9092929587c59518cb8a5058d6e149e77234c7a735717cec8356f03b313ac51d9de10bad2c31bce50528212d2bca5f21fc2a3a78bbf8e54ae21fe7f16cd935a9e0a715dea50f45d1660107878735efc40cf1ff15e3a0c0dd26e8a5374f98bcb0ced77c7351d5a728b86a7b78a24bd6c3191b37d58c1fbfa0e43dec2ca5db3d1e24c44d4e21d35ff88a609d3b6fdaaeefd9749e81324c1b562cb00d2bbee1b9006ac8fbe58f2a94571616d1c92691a40443dfef083e584c11dc8a81e353cd0353b5d38d40ffefafaf2ef53e2c7cf5143166b46c681e6f37c7679972272ca2949642c0c70b7ce840a8ffaab8cffacc908d434a8cc4a07907bfe1b9b937e101d1ed8f610506392e5d4dd8a4d5247073de7bc4ff6afa30b40421ac056a21aad1093518cf1ba7edd1afb631fb927cf8444281ec1dd0d678d78a9f347a0d4c8c909200fb35e9d1a4ba85cb7a0fc80bec8b9cd4ecc762fd93f09864735d5236ed55a511f0d3fac935eaf56126aaa1dd1c4d83a053a917fd44f7b03a15a42cb4ad2cecfe6b8ad95f641a904369eccdd44dfae9844cecd71c210eac8690551c4763e04de7fdcb96a2e84dea18f39dc52983862374a76f3e6e454c993394bf56c8119585a0e2182082c7d9f3cd56a4d463fa11527d1c28cf4ab4f81a990d91f3b0c6679cdd0cddbdec7ed3177ec5db996e9056a2aafc288f2aa426965d30d33786bc0c3124a3548e07045702d390430d3bfbb34ca9b501d32e136710821de8c184785e4dc9db8f11729f6d84f14b80cddef130ab41ec8feac63ae8ccddac2c2ad8c51d95f822a0af53938920d6d4c548d7756d96920608245763b7f9a20b005db2a680951779fba3cd3bb28122fae2986b8017238e6c4e5492afda35aa78dcb1b1d9ae05f13431286dedc1467bdff47b8825a7508e00e91a411e9679e08fb0dfd1cf82ff3a6b31d760416d25c6b2c8aec75d2d8d9f6453960b3aca3f36157bad21889ebb774919cda251ce009cdb625dd42e4a351a71d8dc95c14d6b6893ca6354a048940a1e9da6f9592f09080a55cbc347bb54a1534cf9a3681788a0af20205223c7dc0f05a6bf82941d010ed7e94cab2b2cd6ac06caba12a35b502b12b6f9a2b225535e1f3ad9fe2b7900b144c5ca40564b7697ce316a87e8c7b3d44bd2233a88e433bd2b8d7a90f39706931e0584f0fcec58f0b4840b84fa7beb2a3e91c3b80f290b014533350d21df987bd0f0f6bd2852b9cbe75db35551800501bf03cb0492b595599cf3f8a2315c11f2015fdf07b5bad00d74c9f5d2dcd49c4eb502c6383462b945e0d96cb58a900c9758d60fb4fa5e2a273abeb87be63f0bd4fcc1193d52a3e85d2e4fbe37ed4beccd840d49b4efd7728d05f989c28493d9802f57c4f1dc5df866d28fedf7354a07bac141aeb56eacfffcbe242d8c6c62174ca9d48f83045cd5fd56464d2d14ea6c01bd309ee139e8c07461828c25f00a8de816c784362b40d3439f2d2de58d6dcdada21273ba167b95a7af86526d4d96844408a03744adea9b9f6bec220ee733376a1cdd89931ad5e358728457ac4d029feeacba9a</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面经</tag>
      </tags>
  </entry>
  <entry>
    <title>单元测试-认知篇</title>
    <url>/article/unit-test-know-first/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hi，各位，好久不见，甚是想念。</p>
<p>总算是安顿下来了～</p>
<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>单元测试是什么？</p>
<p>市面上的单元测试泡影以及相关资料基本都停留在：</p>
<ul>
<li>什么是单元测试？</li>
<li>怎么去做单元测试？</li>
</ul>
<p>然而，并没有所谓的：</p>
<ul>
<li>为什么要做单元测试？</li>
<li>单元测试最佳实践</li>
<li>…</li>
</ul>
<p>其实上面的然而也并非是绝对的，还是有一些比较优秀的文章集合，像：</p>
<p><a href="https://www.infoq.cn/article/asmlfdi3pi_vepxpo3lu">React 单元测试策略及落地</a></p>
<ul>
<li>微信内链接：<a href="https://www.infoq.cn/article/asmlfdi3pi_vepxpo3lu">https://www.infoq.cn/article/asmlfdi3pi_vepxpo3lu</a></li>
</ul>
<p><a href="https://github.com/linesh-simplicity/linesh-simplicity.github.io/issues/200">React 单元测试策略及落地</a></p>
<ul>
<li>微信内链接：<a href="https://github.com/linesh-simplicity/linesh-simplicity.github.io/issues/200">https://github.com/linesh-simplicity/linesh-simplicity.github.io/issues/200</a></li>
</ul>
<hr>
<p>且不考虑测试代码的好坏与优劣，单纯针对单元测试，对于不同的测试<code>case</code>而言。</p>
<p>需要去不断的领悟测试技能，测试方案与测试方法，尝试形成自己的测试风格与规则规范。</p>
<p>笔者是从去年下半年开始接触单元测试的，从一开始的邯郸学步到形成一套相对成熟的测试方案。</p>
<p>一定要戒骄戒躁。</p>
<h2 id="为什么要做单元测试？"><a href="#为什么要做单元测试？" class="headerlink" title="为什么要做单元测试？"></a>为什么要做单元测试？</h2><p>其实，大家在开发流程（我这里指的是比较完备的开发流程下）下工作的时候，会经常性的出现<code>qa</code>与<code>dev</code>的各种<del>撕逼</del>，<del>怼人</del>的情节，但是即便是不出现，也会新增一些沟通 -&gt; 复现 -&gt; 流程上的成本消耗。</p>
<p>以上是其一，其二而言的话，考虑整个技术团队的流动性会比较高，一些复杂的代码块，功能模块肯定会让后来的人难以理解，即便是理解了，也很难动手去重构优化，重构优化的前提的，理解所有代码的运转以及功能需求。</p>
<p>当然，上面说的也仅仅是两个主观因素罢了，还有一些暂时就不一一列举了。</p>
<h2 id="单元测试最佳实践"><a href="#单元测试最佳实践" class="headerlink" title="单元测试最佳实践"></a>单元测试最佳实践</h2><p>这一部分会在后面的文章中持续输出～</p>
]]></content>
      <categories>
        <category>单元测试</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>infer备忘录</title>
    <url>/article/know-infer/</url>
    <content><![CDATA[<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2108/001300-16286983801d1c.jpg"></p>
<h2 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h2><p>同志们，好久不见，甚是想念哎！这段时间，小王忙完了工作生活的琐事，之后更新的频率会高一点的。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><code>infer</code>是<code>typescript</code>开发中很少用的一个关键字，但是在类型设计中会比较实用，它的主要作用做<strong>条件中的</strong>类型推导，配合 <code>extends</code> 关键字使用：</p>
<p>举个栗子：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> GetArrayType&lt;T&gt; = T <span class="keyword">extends</span> (infer U)[] ? U : T;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a: GetArrayType&lt;<span class="built_in">number</span>&gt;; <span class="comment">// a: number</span></span><br></pre></td></tr></table></figure>

<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul>
<li><p><strong>协变</strong></p>
<p>  什么是协变呢？大白话讲就是<strong>类型收敛</strong>，类型收敛还不够大白话，再大白话一点就是<code>A|B</code>，非<code>A</code>即<code>B</code>嘛。这就是协变。收敛了类型可能出现的范围。</p>
</li>
<li><p><strong>逆变</strong></p>
<p>  什么是逆变呢？大白话讲就是<strong>类型发散</strong>，类型发散也不够大白话，在大白话一点就是<code>A&amp;B</code>，并集嘛，这就是逆变，扩大了可能出现的范围。</p>
</li>
</ul>
<h2 id="需要注意的点是"><a href="#需要注意的点是" class="headerlink" title="需要注意的点是"></a>需要注意的点是</h2><p>对象的<strong>逆变</strong>与<strong>协变</strong>与值的<strong>逆变</strong>与<strong>协变</strong>截然相反；</p>
<p>举个栗子：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> A = &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B = &#123;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> C = A | B;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> D = A &amp; B;</span><br></pre></td></tr></table></figure>

<p>其实不难理解，对于<code>C</code>来说，虽然是 <code>|</code>，但是发生了<code>逆变</code>，也就是新的 <code>C</code> 演变为了:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> C = &#123;</span><br><span class="line">    name?: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>范围更大了，可以是如下四种范围：</p>
<ul>
<li>范围一：</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> C = &#123;</span><br><span class="line">  name?: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>范围二：</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> C = &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>范围三：</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> C = &#123;</span><br><span class="line">  name?: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>范围四：</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> C = &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另外一种，对于<code>D</code>来说：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> D = &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相比于<code>C</code>而言，缩小了范围，所以也就不难理解下面的类型推导：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> E = D <span class="keyword">extends</span> C ? <span class="literal">true</span> : <span class="literal">false</span>; <span class="comment">// E: true</span></span><br></pre></td></tr></table></figure>

<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2108/Snipaste_2021-08-25_00-46-33.png"></p>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>推荐阅读：</p>
<ul>
<li><a href="https://github.com/ascoders/weekly/blob/master/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF/207.%E7%B2%BE%E8%AF%BB%E3%80%8ATypescript%20infer%20%E5%85%B3%E9%94%AE%E5%AD%97%E3%80%8B.md">精读<code>infer</code></a><ul>
<li>公众号链接：<a href="https://github.com/ascoders/weekly/blob/master/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF/207.%E7%B2%BE%E8%AF%BB%E3%80%8ATypescript%20infer%20%E5%85%B3%E9%94%AE%E5%AD%97%E3%80%8B.md">https://github.com/ascoders/weekly/blob/master/%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF/207.%E7%B2%BE%E8%AF%BB%E3%80%8ATypescript%20infer%20%E5%85%B3%E9%94%AE%E5%AD%97%E3%80%8B.md</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>typescript</category>
      </categories>
      <tags>
        <tag>TS</tag>
      </tags>
  </entry>
  <entry>
    <title>如何看待架构之道</title>
    <url>/article/know-architecture/</url>
    <content><![CDATA[<p>如何看待架构之道？这个题目看起来肯能有些大，有些宽泛，但是我却思考了很久，可能我说的不对，但是确实是我自己的一些想法，当然立场也仅代表我个人。</p>
<p>有接触过创业公司的”现状”：</p>
<ul>
<li>各种外包同学写不同风格的代码，<strong>大驼峰</strong>、<strong>小驼峰</strong>、<strong>帕斯卡</strong>等等，单论命名就够头疼了，且不说写的人怎么看，但是维护的人来说，”我到底维护一套风格还是维护两套风格？”</li>
<li>自己为了方便，把封装的<code>npm</code>包发布在<code>npm.org</code>上，我第一次看到这个操作的时候，着实有些震惊的！<ul>
<li>你走了其他同学怎么办？</li>
<li>如果需要二次开发怎么办？</li>
</ul>
</li>
<li><code>git</code>代码管理用<code>阿里云管理</code><ul>
<li>不是说不好，只是有些太矬，<strong>是真的矬</strong></li>
</ul>
</li>
</ul>
<p>也有接触过比较好的公司，各种设施都很完善：</p>
<ul>
<li>组件库</li>
<li><code>私有gitlab</code>平台</li>
<li>构建工具</li>
<li><code>npm</code>仓库</li>
<li><code>jekins</code></li>
<li><code>sentry</code></li>
<li>…</li>
</ul>
<p>就我现在接触的到完善的东西来看，我对于架构的理解是：</p>
<blockquote>
<p>一个公司的架构需要适应自己的业务与现状。</p>
</blockquote>
<p>第一句话我想表达的意思呢，就是，每个公司都有自己的架构思想在里面：</p>
<p>好比，之前公司的组件库是完全不编译给业务侧用的，目的是考虑用到各种<strong>系统环境变量</strong>，但是实际真实是不需要的。</p>
<p>但是我现在完全用不到这个思想，<code>rollup + esbuild</code>就完事了。【生产上的实践也是比较好的】，既加快了业务侧代码的构建速度，也加快了打包的编译速度。目前组件库打包速度<code>100ms - 2s</code>内。</p>
<p>再好比，每个人的编码风格不一样，我们去碰一碰，碰出一个大家都认同的规范出来，一起落地。</p>
<p>这就比较合理的解释了上面的概括，适应现状。</p>
<blockquote>
<p>架构不是银弹。</p>
</blockquote>
<p>再回到我上面举例的创业公司的现状来看，创业公司，为了拿到融资，自然是先出成绩再出架构，所以我理解那些五花八门的写法与用法。</p>
<p>但是这些东西迟早是技术负债，还是要看负责人怎么去想去看待了。</p>
<p>所以架构不是银弹，没有架构一样可以做事，有架构又怎么样呢？没有业务推动，凭空架构，就是费钱。</p>
<blockquote>
<p>架构一定是来源于业务的推动的，如果经历了不同的业务压力，业务负担才会考虑去做架构。</p>
</blockquote>
<p>好比，</p>
<ul>
<li><p>业务侧使用<code>umi/request</code>做<code>http</code>请求，但是<code>umi</code>人家支持的标准的<code>http</code>请求方案，所以为了更好的兼容现有服务端的错误代码兼容，就需要去二次处理<code>axios</code>。</p>
</li>
<li><p>不同团队的应用需要做集成处理，那么这个时候，就需要架构去做兼容，可以用<code>iframe</code>，也可以用<code>微前端</code>，我觉得<strong>乾坤</strong>做的就比较好。</p>
</li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>至少目前的我觉得，花费<code>50%-60%</code>的时间去做做业务，看一下业务到底需要怎么去改善，在考虑做全局的架构，会比较好。</p>
]]></content>
      <categories>
        <category>认知</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title>Rollup 高效打包组件库</title>
    <url>/article/how-to-use-rollup/</url>
    <content><![CDATA[<h2 id="Rollup"><a href="#Rollup" class="headerlink" title="Rollup"></a>Rollup</h2><p><code>Rollup</code>是什么，这里就不再过多的赘述了，具体详情见<a href="https://rollupjs.org/guide/zh/">官网</a> : <a href="https://rollupjs.org/guide/zh/">https://rollupjs.org/guide/zh/</a></p>
<p><code>Rollup</code>是自带<code>scope hoisting</code> 和 <code>tree-shaking</code>的。</p>
<p><strong>强烈建议：在使用之前认真阅读一遍官方文档</strong></p>
<h2 id="package-json-配置解读"><a href="#package-json-配置解读" class="headerlink" title="package.json 配置解读"></a>package.json 配置解读</h2><p>参考：<a href="https://docs.npmjs.com/cli/v7/configuring-npm/package-json#main">package.json官方 Docs</a> : <a href="https://docs.npmjs.com/cli/v7/configuring-npm/package-json#main">https://docs.npmjs.com/cli/v7/configuring-npm/package-json#main</a></p>
<p><strong>核心解读1：<code>module</code>、<code>main</code>、<code>types</code>、<code>typing</code></strong></p>
<ul>
<li><p><code>main</code></p>
<blockquote>
<p>程序主入口，如果没有设置，默认会在根目录查找<code>index.js</code>，通常给予<code>CommonJS</code>去使用，例如<code>require(&#39;xxxxx&#39;)</code>。</p>
</blockquote>
</li>
<li><p><code>module</code></p>
<blockquote>
<p>程序主入口，虽然不成官方标准，但是正在趋向于主流，主要用于<code>es6</code>。</p>
</blockquote>
</li>
<li><p><code>types</code> &amp; <code>typings</code></p>
<blockquote>
<p>如果打包的是<code>ts</code>代码，需要为你的包显式的指定<code>type</code>的声明文件；<br>这两个字段没任何区别，是同义的，<a href="https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html">参考</a> : <a href="https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html">https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html</a></p>
</blockquote>
</li>
</ul>
<h2 id="基础的配置文件"><a href="#基础的配置文件" class="headerlink" title="基础的配置文件"></a>基础的配置文件</h2><p><strong>所需要用到的包</strong></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// babel</span>
<span class="token keyword">import</span> babel <span class="token keyword">from</span> <span class="token string">'@rollup/plugin-babel'</span><span class="token punctuation">;</span>
<span class="token comment">// typescript</span>
<span class="token keyword">import</span> tsc <span class="token keyword">from</span> <span class="token string">'rollup-plugin-typescript2'</span><span class="token punctuation">;</span>
<span class="token comment">// resolve</span>
<span class="token keyword">import</span> resolve <span class="token keyword">from</span> <span class="token string">'@rollup/plugin-node-resolve'</span><span class="token punctuation">;</span>
<span class="token comment">// 处理 commonjs</span>
<span class="token keyword">import</span> commonjs <span class="token keyword">from</span> <span class="token string">'@rollup/plugin-commonjs'</span><span class="token punctuation">;</span>
<span class="token comment">// 处理图片</span>
<span class="token keyword">import</span> image <span class="token keyword">from</span> <span class="token string">'@rollup/plugin-image'</span><span class="token punctuation">;</span>
<span class="token comment">// 压缩代码</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> terser <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'rollup-plugin-terser'</span><span class="token punctuation">;</span>
<span class="token comment">// 处理 json 文件</span>
<span class="token keyword">import</span> json <span class="token keyword">from</span> <span class="token string">'@rollup/plugin-json'</span><span class="token punctuation">;</span>
<span class="token comment">// 使rollup可以使用postCss处理样式文件less、css等，需要同时安装 postcss</span>
<span class="token keyword">import</span> postcss <span class="token keyword">from</span> <span class="token string">'rollup-plugin-postcss'</span><span class="token punctuation">;</span>
<span class="token comment">// 处理 less 定义的变量</span>
<span class="token keyword">import</span> simplevars <span class="token keyword">from</span> <span class="token string">'postcss-simple-vars'</span><span class="token punctuation">;</span>
<span class="token comment">// 处理less嵌套样式写法</span>
<span class="token keyword">import</span> nested <span class="token keyword">from</span> <span class="token string">'postcss-nested'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>rollup.config.js</strong></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">
<span class="token keyword">const</span> extensions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'.ts'</span><span class="token punctuation">,</span> <span class="token string">'.tsx'</span><span class="token punctuation">,</span> <span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.jsx'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> external <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'react'</span><span class="token punctuation">,</span> <span class="token string">'antd'</span><span class="token punctuation">,</span> <span class="token string">'react/jsx-runtime'</span><span class="token punctuation">]</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
    input<span class="token operator">:</span> <span class="token string">'./src/index.ts'</span><span class="token punctuation">,</span>
    output<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
            file<span class="token operator">:</span> <span class="token string">'./lib/index.js'</span><span class="token punctuation">,</span>
            sourcemap<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            format<span class="token operator">:</span> <span class="token string">'cjs'</span><span class="token punctuation">,</span>
            esModule<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span>
            file<span class="token operator">:</span> <span class="token string">'./es/index.js'</span><span class="token punctuation">,</span>
            sourcemap<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            format<span class="token operator">:</span> <span class="token string">'esm'</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    external<span class="token punctuation">,</span>
    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token function">image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">postcss</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
            plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token function">simplevars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token function">nested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token comment">// 内部使用 cssnano 去做压缩的，外部不需要再次安装 </span>
            minimize<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token comment">// 处理.css和.less文件</span>
            extensions<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">'.css'</span><span class="token punctuation">,</span> <span class="token string">'.less'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token comment">// 帮助 rollup 查找 node_modules 里的三方模块</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> extensions <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token comment">// 帮助 rollup 查找 commonjs 规范的模块, 常配合 rollup-plugin-node-resolve 一起使用</span>
        <span class="token function">commonjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">tsc</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
            tsconfig<span class="token operator">:</span> <span class="token string">'./tsconfig.json'</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">babel</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
            extensions<span class="token punctuation">,</span>
            babelHelpers<span class="token operator">:</span> <span class="token string">'runtime'</span><span class="token punctuation">,</span>
            exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">terser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>tsconfig.json</strong></p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"esnext"</span><span class="token punctuation">,</span>
    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"esnext"</span><span class="token punctuation">,</span>
    <span class="token property">"moduleResolution"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span>
    <span class="token property">"importHelpers"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"jsx"</span><span class="token operator">:</span> <span class="token string">"react-jsx"</span><span class="token punctuation">,</span>
    <span class="token property">"esModuleInterop"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"sourceMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"declaration"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"."</span><span class="token punctuation">,</span>
    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"."</span><span class="token punctuation">,</span>
    <span class="token property">"strict"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"allowSyntheticDefaultImports"</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"node_modules"</span><span class="token punctuation">,</span>
    <span class="token string">"lib"</span><span class="token punctuation">,</span>
    <span class="token string">"es"</span><span class="token punctuation">,</span>
    <span class="token string">"dist"</span><span class="token punctuation">,</span>
    <span class="token string">"typings"</span><span class="token punctuation">,</span>
    <span class="token string">"**/__test__"</span><span class="token punctuation">,</span>
    <span class="token string">"test"</span><span class="token punctuation">,</span>
    <span class="token string">"docs"</span><span class="token punctuation">,</span>
    <span class="token string">"tests"</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>babel.config.js</strong></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    presets<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">[</span><span class="token string">'@babel/preset-env'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> loose<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span>
            <span class="token string">'@babel/preset-react'</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#123;</span>
                runtime<span class="token operator">:</span> <span class="token string">'automatic'</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">'@babel/plugin-transform-runtime'</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>以上的配置基本就可以打造一个组件库了，麻雀虽小，五脏俱全。</p>
<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><ul>
<li>打包完，发现<code>antd</code>或者自生样式丢失？</li>
</ul>
<pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">
module.exports = &#123;
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   presets: [
</span><span class="token prefix unchanged"> </span><span class="token line">       ['@babel/preset-env', &#123; loose: true &#125;],
</span><span class="token prefix unchanged"> </span><span class="token line">       [
</span><span class="token prefix unchanged"> </span><span class="token line">           '@babel/preset-react',
</span><span class="token prefix unchanged"> </span><span class="token line">           &#123;
</span><span class="token prefix unchanged"> </span><span class="token line">               runtime: 'automatic',
</span><span class="token prefix unchanged"> </span><span class="token line">           &#125;,
</span><span class="token prefix unchanged"> </span><span class="token line">       ],
</span><span class="token prefix unchanged"> </span><span class="token line">   ],
</span><span class="token prefix unchanged"> </span><span class="token line">   plugins: [
</span><span class="token prefix unchanged"> </span><span class="token line">     '@babel/plugin-transform-runtime',
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">     [
</span><span class="token prefix inserted">+</span><span class="token line">       'import', &#123;
</span><span class="token prefix inserted">+</span><span class="token line">       "libraryName": "antd",
</span><span class="token prefix inserted">+</span><span class="token line">       "libraryDirectory": "es",
</span><span class="token prefix inserted">+</span><span class="token line">       "style": "css"
</span><span class="token prefix inserted">+</span><span class="token line">     &#125;
</span><span class="token prefix inserted">+</span><span class="token line">     ]
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   ],
</span></span>&#125;;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>这里需要使用<code>babel</code>中的 <code>import</code>实现<code>lazy</code>加载。</p>
</blockquote>
<ul>
<li>如果我打包完后，想实现类似于<code>antd</code>的懒加载样式，可以做到吗？</li>
</ul>
<blockquote>
<p>可以的，需要在<code>rollup.config.js</code>的<code>postcss</code>配置中加入：<code>extract</code>，单独输出样式文件，然后在项目中像加载<code>antd</code>一样，配置<code>babel</code>就可以了。</p>
</blockquote>
<hr>
<p>最后，我叫<strong>小王</strong>，花名<strong>书生</strong>，今日份知识分享到此<code>over</code>，下一期再见～</p>
]]></content>
      <categories>
        <category>前端工程化</category>
      </categories>
      <tags>
        <tag>rollup</tag>
        <tag>ts</tag>
        <tag>组件库</tag>
      </tags>
  </entry>
  <entry>
    <title>Node打包堆栈溢出？慌什么！淡定！</title>
    <url>/article/how-to-resolve-stack-maxin/</url>
    <content><![CDATA[<p>今天是周五，可是为什么我却一点也感受不到周五的快乐呢？可能是明天需要再补班的缘故吧！<code>hhhhh</code></p>
<p>问题不大，牢骚话暂时略过，今天主要记录下工作上碰到的问题，以及我是怎么解决的。</p>
<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>我还是像往常一样，帮同事在<code>jekins</code>上构建代码，我在等待着我的机器人通知我，构建完成的消息，等了<code>10</code>分钟、<code>20</code>分钟…..，终于，耐不住一看界面，<strong>打包失败！</strong></p>
<p>我直呼一个好家伙！立马<code>clone</code>项目，本地打包，本地打包是<code>ok</code>的。</p>
<p>然后询问同事，是不是加了新代码：”确实是引入了一个新的包”。</p>
<p>打开了<code>analyze</code>分析工具一看：<code>3.5M</code>未压缩，<strong>够大！</strong></p>
<h2 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h2><p>好奇的我，打开了<code>jekins</code>构建日志：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>--- Last few GCs ---<span class="token operator">></span>

<span class="token punctuation">[</span><span class="token number">103099</span>:0x310aab0<span class="token punctuation">]</span>   <span class="token number">392901</span> ms: Scavenge <span class="token number">1343.8</span> <span class="token punctuation">(</span><span class="token number">1424.1</span><span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">1342.9</span> <span class="token punctuation">(</span><span class="token number">1424.6</span><span class="token punctuation">)</span> MB, <span class="token number">16.4</span> / <span class="token number">0.0</span> ms  <span class="token punctuation">(</span>average mu <span class="token operator">=</span> <span class="token number">0.117</span>, current mu <span class="token operator">=</span> <span class="token number">0.025</span><span class="token punctuation">)</span> allocation failure 
<span class="token punctuation">[</span><span class="token number">103099</span>:0x310aab0<span class="token punctuation">]</span>   <span class="token number">394779</span> ms: Mark-sweep <span class="token number">1344.0</span> <span class="token punctuation">(</span><span class="token number">1424.6</span><span class="token punctuation">)</span> -<span class="token operator">></span> <span class="token number">1343.1</span> <span class="token punctuation">(</span><span class="token number">1424.1</span><span class="token punctuation">)</span> MB, <span class="token number">1853.9</span> / <span class="token number">0.0</span> ms  <span class="token punctuation">(</span>average mu <span class="token operator">=</span> <span class="token number">0.078</span>, current mu <span class="token operator">=</span> <span class="token number">0.037</span><span class="token punctuation">)</span> allocation failure scavenge might not succeed


<span class="token operator">&lt;</span>--- JS stacktrace ---<span class="token operator">></span>

<span class="token operator">==</span><span class="token operator">==</span> JS stack trace <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>哟嚯，<code>GC</code>内存不够了，怎么解决呢？</p>
<p>当然是上<code>google</code>咯！</p>
<p><strong>可以是：直接执行</strong></p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2109/Snipaste_2021-09-18_00-44-14.png"></p>
<p><strong>也可以是：设置系统的环境变量</strong></p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2109/Snipaste_2021-09-18_00-54-24.png"></p>
<p><strong>也可以是：设置执行时环境变量</strong></p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2109/Snipaste_2021-09-18_00-57-06.png"></p>
<p><a href="https://stackoverflow.com/questions/38558989/node-js-heap-out-of-memory">stackoverflow回答地址</a> : <a href="https://stackoverflow.com/questions/38558989/node-js-heap-out-of-memory">https://stackoverflow.com/questions/38558989/node-js-heap-out-of-memory</a></p>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>最终，当然是生效啦，但是你以为这就结束了吗？</p>
<p><code>No</code>、<code>No</code>、<code>No</code>，才刚开始！</p>
<p>为什么会内存不够呢？</p>
<p>我打开了<code>v8</code>查询那个设置参数：</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2109/Snipaste_2021-09-18_01-23-15.png"></p>
<p>其实这个搜索关键字也是观察<code>jekins</code>日志发现的：</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2109/Snipaste_2021-09-18_01-28-04.png"></p>
<p>哟嚯，是不是，惊人的相似，请把<strong>可能二字</strong>去掉。</p>
<p>然后，我们去命令行看下这个鬼东西：</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2109/Snipaste_2021-09-18_01-43-07.png"></p>
<p>然后注意下箭头标注的，然后计算下最终的内存大小，以<code>G</code>为单位：</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2109/Snipaste_2021-09-18_01-43-52.png"></p>
<p>再回过头来看下，<code>Node</code>官文中的说明：</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2109/Snipaste_2021-09-18_01-47-56.png"></p>
<p>老的<code>Node</code>版本，基本在<code>1.5~1.7G</code>左右，一旦打包时候的空闲内存少了，就会这样。</p>
<hr>
<p>到此为止，这个问题的<strong>根</strong>已经被小王拔起了，期待下次分享～</p>
]]></content>
      <categories>
        <category>前端工程化</category>
      </categories>
      <tags>
        <tag>构建</tag>
        <tag>打包</tag>
      </tags>
  </entry>
  <entry>
    <title>组件库打包---答疑篇</title>
    <url>/article/how-to-build-component/</url>
    <content><![CDATA[<p>作为九月的收尾文章，分享一下我已经应用于若干生产项目的组件库打包方案以及难题解决～</p>
<p>以下的每个问题点，都以<code>Topic</code>的形式展开讲述。</p>
<h2 id="组件库的样式怎么解决？"><a href="#组件库的样式怎么解决？" class="headerlink" title="组件库的样式怎么解决？"></a>组件库的样式怎么解决？</h2><p>其实在之前的文章中有分享过组件库的样式解决方案，但是还是有一些问题的，不过经历了一个多星期的钻研尝试，总算是找到了样式解决方案的最优解～</p>
<p><strong>怎么处理第三方样式？</strong></p>
<p>拿目前的<code>antd</code>样式来看，为了避免打包过程中产生额外的<code>三方库</code>样式赘余，所以我们使用<strong>按需</strong>&amp;<strong>peer依赖方案</strong></p>
<p>具体对应到<code>rollup</code>配置里，我们可能会这么做：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> external <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">'react'</span><span class="token punctuation">,</span>
    <span class="token string">'react/jsx-runtime'</span><span class="token punctuation">,</span>
    <span class="token string">'antd'</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 省略若干配置</span>
    external<span class="token punctuation">,</span>
    <span class="token comment">// 省略若干配置</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其次，对应到<code>babel.config</code>中，我们可能会这么做：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    presets<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">[</span><span class="token string">'@babel/preset-env'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> loose<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span>
            <span class="token string">'@babel/preset-react'</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#123;</span>
                runtime<span class="token operator">:</span> <span class="token string">'automatic'</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">'@babel/plugin-transform-runtime'</span><span class="token punctuation">,</span>
        <span class="token comment">// 下面的配置是要点！</span>
        <span class="token punctuation">[</span>
            <span class="token string">'import'</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#123;</span>
                libraryName<span class="token operator">:</span> <span class="token string">'antd'</span><span class="token punctuation">,</span>
                libraryDirectory<span class="token operator">:</span> <span class="token string">'es'</span><span class="token punctuation">,</span>
                style<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>告诉工具，我们的打包配置是按需的，其次，我们的样式走的是<code>less</code>文件。为了保证<strong>不和项目中的<code>antd css</code>产生冲突，那么我们同样需要在项目中做相同的处理</strong></p>
<p><strong>项目中的配置</strong></p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"babel"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">[</span>
        <span class="token string">"@babel/plugin-proposal-decorators"</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span>
          <span class="token property">"legacy"</span><span class="token operator">:</span> <span class="token boolean">true</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span>
        <span class="token string">"import"</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span>
          <span class="token property">"libraryName"</span><span class="token operator">:</span> <span class="token string">"antd"</span><span class="token punctuation">,</span>
          <span class="token property">"libraryDirectory"</span><span class="token operator">:</span> <span class="token string">"es"</span><span class="token punctuation">,</span>
          <span class="token property">"style"</span><span class="token operator">:</span> <span class="token boolean">true</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">"react-app"</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>当然这里是需要借助<code>webpack</code>的<code>less loader</code>做一些事情的：</p>
<p>需要在 <code>less</code> <code>options</code>中添加如下配置：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>
    lessOptions<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        javascriptEnabled<span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>保证和组件库的配置依赖保持一致，让组件库的按需<code>es</code>能够找得到项目中的按需样式，这样就可以做到<strong>样式不丢失</strong>。</p>
<h2 id="多个组件包的管理怎么处理"><a href="#多个组件包的管理怎么处理" class="headerlink" title="多个组件包的管理怎么处理"></a>多个组件包的管理怎么处理</h2><p><strong>工具</strong></p>
<p>最常见的使用工具，当然是<code>lerna</code>了，我们可以配置<code>lerna</code>。</p>
<p><code>lerna</code>的配置详细规则，这里不再做过多的阐述，重点我们去解决下面的问题：</p>
<p><strong><code>lerna</code>管理多个包，怎么处理包的碰撞<code>log</code>，也就是不相关的包会触发版本升级</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># **Note:** Version bump only for package xxx</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上面的内容就是包版本发生碰撞之后的<code>changelog</code>内容，怎么解决呢？</p>
<p>我个人想了一个比较好的方案：</p>
<p><strong>解决痛点：lerna只能一次性控制所有的包打包构建，那么单独精确控制呢？</strong></p>
<p><strong>思路：提供可视化的打包选择<code>shell</code>，提供更加语意化的<code>commit</code>信息</strong></p>
<h6 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h6><p>解析命令行：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> Command <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'commander'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

program<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h6 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h6><p>获取<code>lerna</code>管理项目的所有包信息：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> shell <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'shelljs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> res <span class="token operator">=</span> shell<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> lerna ls --json</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> silent<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>上面的<code>silent</code>的意思是，控制命令行执行不输出语句，因为我们更希望我们的<code>shell</code>是干净的。</p>
<h6 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h6><p>命令行答询</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> inquirer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'inquirer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

inquirer
    <span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
            type<span class="token operator">:</span> <span class="token string">'checkbox'</span><span class="token punctuation">,</span>
            message<span class="token operator">:</span> <span class="token string">'Please select your want publish packages'</span><span class="token punctuation">,</span>
            name<span class="token operator">:</span> <span class="token string">'packages'</span><span class="token punctuation">,</span>
            choices<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">inquirer<span class="token punctuation">.</span>Separator</span><span class="token punctuation">(</span><span class="token string">' = Lerna All Packages = '</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>isTtyError<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// Prompt couldn't be rendered in the current environment</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// Something else went wrong</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面的文档，其实在人家<code>github</code>仓库中已经给了案例了，这里做一个传送门：</p>
<p><a href="https://github.com/SBoudrias/Inquirer.js/tree/master/packages/inquirer/examples">传送门</a> : <a href="https://github.com/SBoudrias/Inquirer.js/tree/master/packages/inquirer/examples">https://github.com/SBoudrias/Inquirer.js/tree/master/packages/inquirer/examples</a></p>
<p>选择自己适合的方案去做。</p>
<h6 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h6><p>借助<code>lerna</code>命令去遍历精确打包；</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> inquirer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'inquirer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

inquirer
    <span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span>
            type<span class="token operator">:</span> <span class="token string">'checkbox'</span><span class="token punctuation">,</span>
            message<span class="token operator">:</span> <span class="token string">'Please select your want publish packages'</span><span class="token punctuation">,</span>
            name<span class="token operator">:</span> <span class="token string">'packages'</span><span class="token punctuation">,</span>
            choices<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">inquirer<span class="token punctuation">.</span>Separator</span><span class="token punctuation">(</span><span class="token string">' = Lerna All Packages = '</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">answers</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        answers<span class="token punctuation">.</span>packages<span class="token operator">?.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            shell<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">lerna run --scope </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>item<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> build</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其实<code>lerna</code>的官方文档里有说明<code>lerna run --scope [包名] [script 命令]</code> 可以做到精确控制某个包的命令执行，那我们遍历就可以做一个<code>宏观并行处理</code>。</p>
<h6 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h6><p>借助<code>commitizen</code>控制<strong>发布信息的规范化</strong></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">starderedCommmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    shell<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">git add .</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> bootstrap <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'commitizen/dist/cli/git-cz'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>bootstrap<span class="token punctuation">;</span>
    <span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
        cliPath<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../node_modules/commitizen'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        config<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
            path<span class="token operator">:</span> <span class="token string">'cz-conventional-changelog'</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这个东西呢，在<code>库</code>的官方文档里也有写：</p>
<p><a href="https://www.npmjs.com/package/@marionebl/git-cz">传送门</a> : <a href="https://www.npmjs.com/package/@marionebl/git-cz">https://www.npmjs.com/package/@marionebl/git-cz</a></p>
<p><strong>解释一下，为什么这么做呢？</strong></p>
<p>因为，这么做的原因是，在<code>shell</code>中如果执行<code>git cz</code>是无法触发交互的，是因为<code>shell</code>开启了子进程做的命令执行。</p>
<p>最后，我们想实现的效果可能就是这样：</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2109/Snipaste_2021-09-28_01-28-01.png"></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>最后，小结一下吧，其实每一个问题都是可以解决的，我们欠缺的并不是实现技术的细节，而是一个思路。</p>
<p>有思路就代表可行，或者可以尝试下，这样我们有路才会选择去走还是坐飞机，还是坐火车，骑车……</p>
]]></content>
      <categories>
        <category>前端工程化</category>
      </categories>
      <tags>
        <tag>构建</tag>
        <tag>打包</tag>
      </tags>
  </entry>
  <entry>
    <title>聊一聊最近的一些想法</title>
    <url>/article/word-in-furture-and-now/</url>
    <content><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><blockquote>
<p>凡事皆是修行。</p>
</blockquote>
<blockquote>
<p>此生理想，近期规划，今日功课。</p>
</blockquote>
<blockquote>
<p>你能不能，在于你想不想。</p>
</blockquote>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>你最近累吗？是否感觉到很累，是否也有感觉到些许疲惫？</p>
<p>好多个深夜，看着黑漆漆的天花板，偶尔看看窗外的夜色，听着不远处来来往往飞行的飞机的轰鸣声，但是有时候却好像已经习惯，习惯在静谧中夹杂着些许嘈杂。</p>
<p>唔……</p>
<p>“明天会有太阳吗？”</p>
<p>“明天穿什么衣服呀！”</p>
<p>“……”</p>
<p>两点一线的生活，好像缺点什么，但是又好像不缺点什么。</p>
<p>本来我是打算长篇大段写好多东西的，但是，好久没写总结了。</p>
<h2 id="番外"><a href="#番外" class="headerlink" title="番外"></a>番外</h2><p><strong>使用<code>shelljs</code>的<code>exec</code>函数执行别的命令怎么可以保持命令行中的颜色维持？</strong></p>
<p>参考：</p>
<ul>
<li><a href="https://stackoverflow.com/questions/7725809/preserve-color-when-executing-child-process-spawn">https://stackoverflow.com/questions/7725809/preserve-color-when-executing-child-process-spawn</a></li>
<li><a href="https://newbedev.com/preserve-color-when-executing-child-process-spawn">https://newbedev.com/preserve-color-when-executing-child-process-spawn</a></li>
<li><a href="https://github.com/shelljs/shelljs/issues/86">https://github.com/shelljs/shelljs/issues/86</a></li>
</ul>
<p>其实道理很简单，因为它开了子进程去处理别的命令，主进程就只能拿到它的输出，所以会丢失颜色，不过我找了几种方案去解决：</p>
<p><strong>方案一：这种方案只适用于通过原生的<code>node</code> <code>API</code>中的<code>spawn</code></strong></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">"command"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"args"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> env <span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token constant">FORCE_COLOR</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>重点是：<code>FORCE_COLOR</code></p>
<p><strong>方案二：这种方案只适用于<code>zsh</code>风格的<code>shell</code>，我不确定其他机器是否<code>ok</code></strong></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> ps <span class="token operator">=</span> <span class="token function">_spawn</span><span class="token punctuation">(</span><span class="token string">'npm'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'outdated'</span><span class="token punctuation">,</span> <span class="token string">'--color=always'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> stdio<span class="token operator">:</span> <span class="token string">'pipe'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ps<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>重点是：<code>--color=always</code></p>
<p><strong>方案三：这种方案有一个弊端，就是无法通过<code>shelljs</code>或者<code>child_progress</code>获取执行结果！</strong></p>
<p>参考<code>issue</code>: <a href="https://github.com/nodejs/node/issues/2333">https://github.com/nodejs/node/issues/2333</a></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> spawn <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>spawn<span class="token punctuation">;</span>

<span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">'node'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'./child.js'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> shell<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> stdio<span class="token operator">:</span> <span class="token string">'inherit'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>重点是：<code>crossplatform solution that worked for me was to use both shell: true and stdio: &#39;inherit&#39;</code></p>
<h2 id="回到正文"><a href="#回到正文" class="headerlink" title="回到正文"></a>回到正文</h2><p>小小的番外，不成敬意，还请笑纳。</p>
<p><strong>顺手推荐下一个百度大佬的<code>ppt</code>：<code>高工的个人发展</code>。</strong></p>
<p>关于生活，关于工作，关于现在，关于将来，做个小的想法总结：</p>
<ul>
<li>价值观没有对错，别人的价值观可能只对别人有价值，随着时间，自己的价值观也会改变。—— 关于生活（价值观）</li>
<li>你愿意做一个<code>10</code>年重复经验的<code>10</code>年工作经验的工程师吗？这就是你被一年工作经验的人吊打的原因。—— 关于工作（意识认知）</li>
<li>把握好自己当下，自己的职业生涯在自己手上，你的主管只负责你的工作。—— 关于现在</li>
<li>寻找方向，多寻求一些刺激的东西，居安思危，逃离舒适区。—— 关于将来</li>
</ul>
<p>前段时间，去听了听大老板的一点分享：</p>
<p>作为技术者，你即便是花再多时间，研究再牛逼的东西，它没办法提升效率，没办法解放生产力，它就没有价值，至少是对公司没有价值。</p>
<p>的确啊，对于管理层来说，明确点是对于雇主来说，我们在任职期间做的每一件事都应该是有价值的，不要在自己的幻想沙盒中迷失自我。</p>
<p>我觉得这应该是职场的黄金法则。</p>
<p>其次呢就是，在平时的学习研究中，每一次的深入研究前，都应该思考，这次的时间花费，我能收获什么？事后要做总结，避免后续再浪费时间去消化。</p>
<p>最后，剧透一下，下一篇文章，我准备详细解释下<code>react-router</code> &amp; <code>react-rouetr-dom</code>的在<code>version 6.0.0-beta.6</code>版本中做的事情。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title>懒渲染背后有多细节？</title>
    <url>/article/lazy-end-for-details/</url>
    <content><![CDATA[<p>这片文章可能略微有些标题狗了，不过，大致差不多～</p>
<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>最近在做一个东西，因为后端同学比较忙的缘故<code>+</code>跟他关系好，所以答应了对于某个接口的数据的查询做全量数据返回，前端做滚动懒渲染<code>+</code>模糊查询。</p>
<p>听起来可能比较高大上，但是实际上想明白了就很简单了。</p>
<h2 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h2><p>首先说明下，这个数据量有多大？预计<code>8000+</code>左右，也就是如果不做懒渲染的话，前端界面的某一个部分一次性要渲染<code>8000+</code>个<code>DOM</code>。</p>
<p><strong>1. 这一定会很卡的！</strong>（至少我听到后的第一反应是这个）</p>
<p><strong>2. 没有一个正常人会在<code>8000+</code>条数据中找某一条数据的，眼睛都看花了，但是不排除有，大概定级为使用场景出现频率低</strong></p>
<h4 id="How-to-do-it？"><a href="#How-to-do-it？" class="headerlink" title="How to do it？"></a>How to do it？</h4><p>怎么做呢？我们来理一下思路：</p>
<p><strong>正常渲染</strong></p>
<ul>
<li>收集数据</li>
<li>切割数据</li>
<li>滚动渲染</li>
</ul>
<p><strong>模糊搜索</strong></p>
<ul>
<li>模糊搜索</li>
<li>切割数据</li>
<li>滚动渲染</li>
</ul>
<p>思路理清楚了，我们做一下代码展示和代码分析吧～</p>
<h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> filter <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'lodash-es'</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">DataShape</span> <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>
    <span class="token punctuation">&#123;</span>
        id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
        name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token operator">&amp;</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">></span>
<span class="token operator">></span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">DataEngine</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// 分割 chunk 片的阈值</span>
    <span class="token keyword">static</span> <span class="token constant">SPLIT_CHUNK_UNIT</span> <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>

    <span class="token comment">// 并发时间范围的阈值, 10 毫秒</span>
    <span class="token keyword">static</span> <span class="token constant">CONCURRENT_TIME_DELAY</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

    <span class="token comment">// 初始化数据，一般指代的是全量数据</span>
    <span class="token keyword">private</span> _dataList<span class="token operator">:</span> DataShape<span class="token punctuation">;</span>
    <span class="token comment">// 分片_chunkData数据</span>
    <span class="token keyword">private</span> _chunkDataList<span class="token operator">:</span> DataShape<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 记录分割的 chunk 数目</span>
    <span class="token keyword">private</span> _recordGetChunkCount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    <span class="token comment">// 工作区数据（常规状态 + 模糊搜索态）</span>
    <span class="token keyword">private</span> _WIPDataList<span class="token operator">:</span> DataShape<span class="token punctuation">;</span>
    <span class="token comment">// 是否处于模糊搜索态</span>
    <span class="token keyword">private</span> _isWIP<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
    <span class="token comment">// 时间阈值</span>
    <span class="token keyword">private</span> _actionTime<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token comment">// 单例 chunkData，应付在一定时间阈值内的并发调用获取</span>
    <span class="token keyword">private</span> _singleChunkDataList<span class="token operator">:</span> DataShape<span class="token punctuation">;</span>

    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_dataList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_WIPDataList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_chunkDataList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_recordGetChunkCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_isWIP <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_actionTime <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_singleChunkDataList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">setData</span><span class="token punctuation">(</span><span class="token parameter">data<span class="token operator">:</span> DataShape</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_dataList <span class="token operator">=</span> data<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_WIPDataList <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * @desc 模糊搜索值，且不区分到底是哪个属性
     */</span>
    <span class="token function">fuzzySearch</span><span class="token punctuation">(</span><span class="token parameter">keyword<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_WIPDataList <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_dataList<span class="token punctuation">,</span> <span class="token parameter">obj</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">const</span> idList <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>orgId<span class="token punctuation">)</span><span class="token operator">?.</span>includes<span class="token operator">?.</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> nameList <span class="token operator">=</span> obj<span class="token punctuation">.</span>orgName<span class="token operator">?.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?.</span>includes<span class="token operator">?.</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> idList <span class="token operator">||</span> nameList<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * @desc 数据 chunk 分割
     */</span>
    <span class="token function">splitChunk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_chunkDataList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_isWIP<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>_WIPDataList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_dataList<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">/** 重置 chunk 切割索引 */</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_recordGetChunkCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_WIPDataList<span class="token operator">?.</span>length <span class="token operator">/</span> DataEngine<span class="token punctuation">.</span><span class="token constant">SPLIT_CHUNK_UNIT</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>_chunkDataList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>_WIPDataList<span class="token operator">?.</span><span class="token function">slice</span><span class="token punctuation">(</span>i <span class="token operator">*</span> DataEngine<span class="token punctuation">.</span><span class="token constant">SPLIT_CHUNK_UNIT</span><span class="token punctuation">,</span> DataEngine<span class="token punctuation">.</span><span class="token constant">SPLIT_CHUNK_UNIT</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * @desc 获取分片数据
     */</span>
    <span class="token function">getChunk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> DataShape <span class="token punctuation">&#123;</span>
        <span class="token comment">// 优先判断有没有设置时间值（其实就是第一次获取），其次判断时间阈值的范围</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_actionTime <span class="token operator">||</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_actionTime <span class="token operator">></span> DataEngine<span class="token punctuation">.</span><span class="token constant">CONCURRENT_TIME_DELAY</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>_singleChunkDataList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_chunkDataList<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>_singleChunkDataList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_chunkDataList<span class="token operator">?.</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>_recordGetChunkCount<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>_chunkDataList<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>_recordGetChunkCount <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>_actionTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_singleChunkDataList<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * @desc 及时销毁内存，避免浪费或者内存溢出
     */</span>
    <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_dataList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_WIPDataList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_chunkDataList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_recordGetChunkCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_isWIP <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_actionTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * @desc 检测 chunk 片区是否为空
     */</span>
    <span class="token keyword">get</span> <span class="token function">chunkIsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">/** 最直观的方式是检测，它的记录长度是否等于分割长度，分割长度取天花板 */</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_recordGetChunkCount <span class="token operator">===</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_WIPDataList<span class="token operator">?.</span>length <span class="token operator">/</span> DataEngine<span class="token punctuation">.</span><span class="token constant">SPLIT_CHUNK_UNIT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">get</span> <span class="token function">cacheData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_WIPDataList<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">get</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_dataList<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">set</span> <span class="token constant">WIP</span><span class="token punctuation">(</span><span class="token parameter">flag<span class="token operator">:</span> boolean</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_isWIP <span class="token operator">=</span> flag<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这一大段可能看着有些累，没事，我们从头开始分析～</p>
<p>先解释下一些堆栈<code>list</code>的含义：</p>
<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token comment">// 分割 chunk 片的阈值</span>
<span class="token keyword">static</span> <span class="token constant">SPLIT_CHUNK_UNIT</span> <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token comment">// 并发时间范围的阈值, 10 毫秒</span>
<span class="token keyword">static</span> <span class="token constant">CONCURRENT_TIME_DELAY</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token comment">// 初始化数据，一般指代的是全量数据</span>
<span class="token keyword">private</span> _dataList<span class="token operator">:</span> DataShape<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token comment">// 分片_chunkData数据</span>
<span class="token keyword">private</span> _chunkDataList<span class="token operator">:</span> DataShape<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token comment">// 记录分割的 chunk 数目</span>
<span class="token keyword">private</span> _recordGetChunkCount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token comment">// 工作区数据（常规状态 + 模糊搜索态）</span>
<span class="token keyword">private</span> _WIPDataList<span class="token operator">:</span> DataShape<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token comment">// 是否处于模糊搜索态</span>
<span class="token keyword">private</span> _isWIP<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token comment">// 时间阈值</span>
<span class="token keyword">private</span> _actionTime<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token comment">// 单例 chunkData，应付在一定时间阈值内的并发调用获取</span>
<span class="token keyword">private</span> _singleChunkDataList<span class="token operator">:</span> DataShape<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>首先是数据收集：</strong></p>
<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token operator">:</span> DataShape<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_dataList <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_WIPDataList <span class="token operator">=</span> data<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里的数据收集，主要是保存在<code>_dataList</code>和<code>_WIPDataList</code>中，其中<code>_dataList</code>单纯是做全量数据缓存，而<code>_WIPDataList</code>是做工作态的数据收集，其中初始态也属于工作态。</p>
<p>这里解释下<strong>工作态</strong></p>
<ul>
<li>初始化的状态</li>
<li>模糊搜索时的状态</li>
<li>销毁时的状态</li>
</ul>
<p><strong>其次是切割数据</strong></p>
<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token comment">/**
 * @desc 数据 chunk 分割
 */</span>
<span class="token function">splitChunk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_chunkDataList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_isWIP<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_WIPDataList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_dataList<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/** 重置 chunk 切割索引 */</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_recordGetChunkCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_WIPDataList<span class="token operator">?.</span>length <span class="token operator">/</span> DataEngine<span class="token punctuation">.</span><span class="token constant">SPLIT_CHUNK_UNIT</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_chunkDataList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>_WIPDataList<span class="token operator">?.</span><span class="token function">slice</span><span class="token punctuation">(</span>i <span class="token operator">*</span> DataEngine<span class="token punctuation">.</span><span class="token constant">SPLIT_CHUNK_UNIT</span><span class="token punctuation">,</span> DataEngine<span class="token punctuation">.</span><span class="token constant">SPLIT_CHUNK_UNIT</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>每一次的数据切割都是对全量数据的操作，所以我们大可每次都初始化<code>_chunkDataList</code>、<code>_recordGetChunkCount</code></p>
<p><code>WIP</code>态的含义是：</p>
<ul>
<li>全量数据态一定是<code>false</code><ul>
<li>初始态全量</li>
<li>模糊搜索，搜索条件为空是全量</li>
</ul>
</li>
<li>搜索条件不为空时，一定是<code>true</code></li>
</ul>
<p>数据分割的<code>chunk</code>范围是：<code>i*DataEngine.SPLIT_CHUNK_UNIT</code> ~ <code>DataEngine.SPLIT_CHUNK_UNIT * (i + 1)</code>.这样可能不好理解，大白话叙述一下：</p>
<blockquote>
<p>假如有90条数据，数据固定按照40条分割，那么可以分3块。</p>
<p>第一块：<code>0*40～40*1  === 0 ～ 40</code>（不包含40）</p>
<p>第二块：<code>1*40～40*2  === 40 ～ 80</code>（不包含80）</p>
<p>第三块：<code>2*40～40*3  === 80 ～ 120</code>（总共90条，一定可以拿全的）</p>
</blockquote>
<p><strong>模糊搜索</strong></p>
<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token comment">/**
 * @desc 模糊搜索值，且不区分到底是哪个属性
 */</span>
<span class="token function">fuzzySearch</span><span class="token punctuation">(</span>keyword<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_WIPDataList <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_dataList<span class="token punctuation">,</span> obj <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> idList <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token operator">?.</span>includes<span class="token operator">?.</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> nameList <span class="token operator">=</span> obj<span class="token punctuation">.</span>name<span class="token operator">?.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?.</span>includes<span class="token operator">?.</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> idList <span class="token operator">||</span> nameList<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>获取chunk</strong></p>
<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token comment">/**
 * @desc 获取分片数据
 */</span>
<span class="token function">getChunk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> DataShape <span class="token punctuation">&#123;</span>
    <span class="token comment">// 优先判断有没有设置时间值（其实就是第一次获取），其次判断时间阈值的范围</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>_actionTime <span class="token operator">||</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_actionTime <span class="token operator">></span> DataEngine<span class="token punctuation">.</span><span class="token constant">CONCURRENT_TIME_DELAY</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_singleChunkDataList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_chunkDataList<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>_singleChunkDataList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_chunkDataList<span class="token operator">?.</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>_recordGetChunkCount<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>_chunkDataList<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_recordGetChunkCount <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_actionTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_singleChunkDataList<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>获取<code>chunk</code>这个方法其实还是值得推敲的，因为每次一调用就会触发分割。那么我们在调试时候的打印，也会触发分割，其实还是不希望的。</p>
<p>所以，这里做了一个时间为<code>10</code>ms的数据分割阈值控制，做一个阀门控制住分割的并发数，在并发的时间内，返回同一个<code>chunk</code>单例。</p>
<p><strong>最后，销毁重置所有数据态</strong></p>
<pre class="line-numbers language-ts" data-language="ts"><code class="language-ts"><span class="token comment">/**
 * @desc 及时销毁内存，避免浪费或者内存溢出
 */</span>
<span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_dataList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_WIPDataList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_chunkDataList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_recordGetChunkCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_isWIP <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_actionTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>说了那么多，其实我们并没有看到实际的效果，可以大致观摩下～</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2110/Kapture%202021-10-25%20at%2023.37.30.gif"></p>
<p>模糊搜索</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2110/Kapture%202021-10-25%20at%2023.40.58.gif"></p>
<p>怎么样，还不错吧，这个效果，对于我们的数据加载，甚至性能都有很大的优化～</p>
]]></content>
      <categories>
        <category>懒渲染</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端人的工匠精神之&quot;我终于征服Antd了&quot;</title>
    <url>/article/front-end-feeling-i-got-antd/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>从早期写代码时候的<strong>潦潦草草</strong>到现在的<strong>工匠精神</strong>，我觉得是我对于代码的<strong>认知</strong>、<strong>蜕变</strong>、<strong>一种态度</strong>。同时我也觉得这应该是每一个<code>coder</code>应该具备的潜意识。</p>
<p>我也不止一次的跟我现在的小伙伴一再强调：<strong>见代码如见人</strong>。好的代码是对自己的思维感知的一种体现以及对于整个软件工程体系生命周期的把控。</p>
<p>试想一下，当你的代码满是糟粕，久而久之，整个软件中也充斥着大量的糟粕，我们姑且把它称之为”坏味道”，而这种坏味道正是加速软件死亡的<strong>毒瘤</strong>。</p>
<p>所以，一个对自己职业负责的<code>coder</code>应该对每一行代码负责！保持对代码的敬畏之心，保持对前端的敬畏之心。</p>
<p>另，<code>Code is life</code>，而非<code>Code is money</code>的认知是比较重要的。甚至可以区分同一个工作领域的两极分化。</p>
<h2 id="征服Antd的前夕"><a href="#征服Antd的前夕" class="headerlink" title="征服Antd的前夕"></a>征服<code>Antd</code>的前夕</h2><h5 id="故事一-Table"><a href="#故事一-Table" class="headerlink" title="故事一(Table)"></a>故事一(<code>Table</code>)</h5><p>在一个月黑风高的夜晚，小王还在开发需求以及完善组件库时，碰到一个自然而然就想到的场景。</p>
<ul>
<li><code>table</code>同时出现<strong>横向+纵向滚动条</strong>的时候，怎么展示？<ul>
<li>方案一：常规显示【有个弊端就是，无触摸板用户无法横向滚动，必须拉到最底部，且无法观测表头对应数据】</li>
<li>方案二：表格内滚动【完美解决方案一的问题，但是<strong>小屏幕用户怎么办？页面内容多的时候，就只有一条数据，慢慢滚。</strong>】<blockquote>
<p>提及这个，说来惭愧，产品带着我的<strong>杰作</strong>去演示，结果拿了个<code>mini</code>版的电脑去演示，丢人丢大发了。一瞬间稍微有点挫败感，但是我想把它做到极致！</p>
</blockquote>
</li>
<li>方案三：粘滞表头，粘滞虚拟滚动条！【近乎完美】</li>
</ul>
</li>
</ul>
<hr>
<p>遇到这种问题该怎么做呢？首先肯定是查看 <code>antd</code> 的解决方案。</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2111/Snipaste_2021-11-11_23-25-16.png?x-oss-process=style/HANDLE_IMAGE"></p>
<p><code>wow!</code>，这不就是我想要的吗。…….然而，好景不长。</p>
<hr>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2111/Snipaste_2021-11-11_23-29-44.png?x-oss-process=style/HANDLE_IMAGE"></p>
<p>掉下来了，，，但是我又看了一遍官方的示例，没我这个问题，几乎在那一瞬间，，我就想到了是上下文的问题，抱着怀疑的态度，我翻到了开发这个特性的小伙伴的源代码。</p>
<hr>
<p>先看下<code>merge request</code>:</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2111/Snipaste_2021-11-11_23-34-26.png?x-oss-process=style/HANDLE_IMAGE"></p>
<p>看的出来，这个大佬也是一个交互细节狂，确实挺钦佩的。不过，真正的<code>file changes</code>可不在这里，而是在<code>rc-table</code>里。</p>
<hr>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2111/Snipaste_2021-11-11_23-38-32.png?x-oss-process=style/HANDLE_IMAGE"></p>
<p>直接搜索<code>sticky</code>关键字下的<code>MR</code>。</p>
<hr>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2111/Snipaste_2021-11-11_23-40-51.png?x-oss-process=style/HANDLE_IMAGE"></p>
<p>果然，这就是元凶，直接挂在了<code>window</code>，我用的时候之所以<strong>掉下来</strong>是因为，我是容器内滚动的，<code>window</code>下并无滚动条，所以它并没有自动消失。</p>
<hr>
<p>我们其实看文档的时候就看到了在<code>4.17.0</code>支持了<code>getContainer</code>的属性，我们先来看看，<code>4.17.0</code>做了什么修改。</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2111/Snipaste_2021-11-11_23-45-52.png?x-oss-process=style/HANDLE_IMAGE"></p>
<p>一样的操作，继续搜索<code>sticky</code>，找到<code>getContainer</code>那条<code>mr</code>。</p>
<hr>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2111/Snipaste_2021-11-11_23-47-06.png?x-oss-process=style/HANDLE_IMAGE"></p>
<p>这下就搞明白了原由如何～</p>
<hr>
<p>所以最终，对症下药，项目的<code>antd</code>升级到<code>antd@4.17.0-alpha.9</code>，完美解决！</p>
<h5 id="故事二-Table内的Popover、Tooltip、Popconfirm如何定位方案"><a href="#故事二-Table内的Popover、Tooltip、Popconfirm如何定位方案" class="headerlink" title="故事二(Table内的Popover、Tooltip、Popconfirm如何定位方案)"></a>故事二(<code>Table</code>内的<code>Popover</code>、<code>Tooltip</code>、<code>Popconfirm</code>如何定位方案)</h5><p>由于这个故事并没有故事，所以我就直接出解决方案了～</p>
<ul>
<li>方案一：二次封装，检测滚动隐藏。<blockquote>
<p>其实是合理的，我们姑且可以认为，当用户滚动的时候，忘记关闭了，像<code>Popconfirm</code>、<code>tooltip</code>等。</p>
</blockquote>
</li>
</ul>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token constant">FC</span><span class="token punctuation">,</span> useCallback<span class="token punctuation">,</span> useState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Tooltip<span class="token punctuation">,</span> TooltipProps <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useEventListener <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'ahooks'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> DIYTooltip<span class="token operator">:</span> <span class="token constant">FC</span><span class="token operator">&lt;</span>TooltipProps<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> children<span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>visible<span class="token punctuation">,</span> setVisible<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">useEventListener</span><span class="token punctuation">(</span>
        <span class="token string">'scroll'</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>visible<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span>
            capture<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> onVisibleChange <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token parameter">flag</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token function">setVisible</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Tooltip</span></span> <span class="token attr-name">visible</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>visible<span class="token punctuation">&#125;</span></span> <span class="token attr-name">onVisibleChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>onVisibleChange<span class="token punctuation">&#125;</span></span> <span class="token spread"><span class="token punctuation">&#123;</span><span class="token operator">...</span>rest<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
            </span><span class="token punctuation">&#123;</span>children<span class="token punctuation">&#125;</span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Tooltip</span></span><span class="token punctuation">></span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> DIYTooltip<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>方案二：手动添加<code>Container</code></li>
</ul>
<pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx">getTooltipContainer<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.ant-table-body'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLElement<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>路还很长，故事也很长。</p>
<p>追求极致的路上是一次次细节的思考，设身处地的从实际业务出发，从使用人的角度去思考基建、架构设计，才足够<strong>接地气</strong>。</p>
<p>有小伙伴经常抱怨：我每天都在写业务，我怎么学习提升啊！</p>
<blockquote>
<p>你真的100%的时间在写业务？</p>
</blockquote>
<blockquote>
<p>你不写业务的时候你在干嘛？</p>
</blockquote>
<blockquote>
<p>有想过在业务中提升自我吗？</p>
</blockquote>
<p>技术的本质就是创造业务价值，为业务服务，在业务中思考，哪里需要优化，从小到大，小到组件设计（设计模式），大到系统设计（构建工具，组件库，<code>CLI</code>工具，微前端）。停止抱怨，那是愚蠢的想法！</p>
<p>当然后续发展可能就是持续集成（<code>jekins</code>、<code>Gitlab Runners</code>、<code>Docker</code>）</p>
<p>加油吧，<code>Code is Life</code>，你会发现其实生活如工作，工作如生活，代码即生活～</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>Antd</tag>
        <tag>心得</tag>
      </tags>
  </entry>
  <entry>
    <title>狂人月记</title>
    <url>/article/madman&#39;s-daily/</url>
    <content><![CDATA[<p>文章的开头自然是避嫌了，并非蕴含了鲁迅先生《狂人日记》中的思想，只是题目略微相近。</p>
<p>没有被压迫，更没有”吃人主义”。</p>
<p>之所以叫狂人，是因为最近一个月都比较张狂，主要表现在，想几点睡就几点睡等等，此处省略一万字。</p>
<p>之所以叫月记呢，是因为，一个月记了一次吧，哈哈。</p>
<p>简单记录下这接近一个月的生活、工作、情绪、思想等等。</p>
<h2 id="生活大事记一"><a href="#生活大事记一" class="headerlink" title="生活大事记一"></a>生活大事记一</h2><p><strong>部门团建</strong></p>
<p>接下来有请摄影师<code>小王</code>登场以及诗人<code>书生</code>登场。【诗词即兴创作】</p>
<p><strong>风景照耶</strong></p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2112/AAE7784EFE4DE5DB336A730016C82CD1.jpg?x-oss-process=style/HANDLE_IMAGE"></p>
<p>枯蒿微曳清风里，余晖尽落长兴巷。</p>
<p><code>注：长兴意指浙江湖州长兴县</code></p>
<p><strong>含苞待放</strong></p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2112/F516695394C2F6F76A398E8FB3C96D94.jpg?x-oss-process=style/HANDLE_IMAGE"></p>
<p><strong>苞已待放</strong></p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2112/C00BACB40578EA6740628DA267C5128C.jpg?x-oss-process=style/HANDLE_IMAGE"></p>
<p><strong>吃烤全羊</strong></p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2112/2D95BED7193C0FCB0393C45EABBB5BB7.jpg?x-oss-process=style/HANDLE_IMAGE"></p>
<p><strong>篝火晚会</strong></p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2112/A2180B3FBF7AD37F04F35DC943DAAA9E.jpg?x-oss-process=style/HANDLE_IMAGE"></p>
<p><strong>哈哈哈哈</strong></p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2112/CDBC7EE0303089DA74CDC29A611249ED.jpg?x-oss-process=style/HANDLE_IMAGE"></p>
<p><strong>去爬山咯</strong></p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2112/51CDD75AF61A81F7EE3BB72F0646C010.jpg?x-oss-process=style/HANDLE_IMAGE"></p>
<h2 id="生活大事记二"><a href="#生活大事记二" class="headerlink" title="生活大事记二"></a>生活大事记二</h2><p>我妈前几年不听我劝告，刷牙不够三分钟，<code>hiahiahiahia</code></p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2112/8339CBF123302655FE1BE303E15E17BB.jpg?x-oss-process=style/HANDLE_IMAGE"></p>
<p>原谅我每次视频都笑出猪叫，拔了<code>6</code>颗🦷。</p>
<hr>
<h2 id="工作大事记"><a href="#工作大事记" class="headerlink" title="工作大事记"></a>工作大事记</h2><p>🎤 <code>wsl</code>时而重连闪退是因为什么？</p>
<blockquote>
<p>大概率是内存不足，可以在全局创建<code>.wslconfig</code>，写入以下配置</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>wsl2<span class="token punctuation">]</span>
<span class="token assign-left variable">memory</span><span class="token operator">=</span>16GB
<span class="token assign-left variable">processors</span><span class="token operator">=</span>6GB
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>自然是内存不够了，可以按需添加内存进去。<br><a href="https://docs.microsoft.com/en-us/windows/wsl/wsl-config">完整配置</a>: <a href="https://docs.microsoft.com/en-us/windows/wsl/wsl-config">https://docs.microsoft.com/en-us/windows/wsl/wsl-config</a></p>
</blockquote>
<p>🎤 <code>linux</code>中怎么打开外部应用？</p>
<blockquote>
<p>科普一个外部<code>npm</code>库叫<code>open</code>。</p>
</blockquote>
<p>🎤 <code>eslint</code>配置圈复杂度？</p>
<blockquote>
<p><a href="https://cn.eslint.org/docs/rules/complexity">传送门</a> : <a href="https://cn.eslint.org/docs/rules/complexity">https://cn.eslint.org/docs/rules/complexity</a></p>
</blockquote>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"complexity"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token property">"max"</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>🎤 <code>pnpm</code>替换<code>lerna</code>方案</p>
<blockquote>
<p><a href="https://www.raulmelo.dev/blog/replacing-lerna-and-yarn-with-pnpm-workspaces">传送门</a> : <a href="https://www.raulmelo.dev/blog/replacing-lerna-and-yarn-with-pnpm-workspaces">https://www.raulmelo.dev/blog/replacing-lerna-and-yarn-with-pnpm-workspaces</a></p>
</blockquote>
<h2 id="思想大事记一"><a href="#思想大事记一" class="headerlink" title="思想大事记一"></a>思想大事记一</h2><p>最近有一个想法，做一个接口请求<code>mock</code>工具。</p>
<p>当然市面上已经有东西可以做<code>mock</code>了，比如<code>yapi</code>，<code>mockjs</code>等等。</p>
<p>而我今天分享的思路是<code>接口请求+mockjs</code>。</p>
<p>最终的写法就是:</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">http<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'xxx'</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> mock<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>好处：</p>
<ul>
<li>增量<code>mock</code>，可以是单个接口，也可以是部分接口；</li>
<li>无感<code>mock</code>，业务方就一个配置；</li>
</ul>
<p><strong>方案分析</strong></p>
<ol>
<li>接口数据类型<code>interface</code> 或者 <code>type</code>定义；</li>
<li>请求库进行<code>编译时</code>的<code>interface</code> <code>AST</code>分析，内置<code>mockjs</code>生成目标数据；</li>
<li>这个<code>ast</code>语法分析替换步骤可以放在<code>webpack</code>插件中做掉；</li>
</ol>
<p><strong>实现</strong></p>
<p>小王还没开始呢，请静候佳音～</p>
<h2 id="思想大事记二"><a href="#思想大事记二" class="headerlink" title="思想大事记二"></a>思想大事记二</h2><blockquote>
<p>身在其位，必谋其事；</p>
</blockquote>
<blockquote>
<p>适度装死；</p>
</blockquote>
<blockquote>
<p>如果某一件事让你觉得恐惧，那就把它搞砸；</p>
</blockquote>
<blockquote>
<p>有些圈子，融入不进去就不要融入，清者自清，浊者自浊；</p>
</blockquote>
<blockquote>
<p>悄悄的成长，在必要的时候，惊艳所有人；</p>
</blockquote>
<blockquote>
<p>一个人，一定也必须要有工作之外的沉淀；</p>
</blockquote>
<blockquote>
<p>每天坚持写代码<code>2</code>小时的习惯，一定不能断，这个两小时指的是工作之外的代码；</p>
</blockquote>
<blockquote>
<p>为人处事一定要谨慎；</p>
</blockquote>
<blockquote>
<p>控制好情绪，但是控制不住的时候也要适度发泄；</p>
</blockquote>
<blockquote>
<p>不要跟老腊肉打交道，即便是打交道，也要谨慎；</p>
</blockquote>
<blockquote>
<p>不要总是一副自己什么都知道，自己很强的样子，适度的露露锋芒就好了，太过了，反而会适得其反；</p>
</blockquote>
<blockquote>
<p>戒掉不好的习惯，一定要戒掉，一定要；</p>
</blockquote>
<blockquote>
<p>规律学习；</p>
</blockquote>
<h2 id="Final-Word"><a href="#Final-Word" class="headerlink" title="Final Word"></a>Final Word</h2><p>你若盛开，清香自来，一心向阳，四季常春～</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>年终总结</title>
    <url>/article/end-year-thinking/</url>
    <content><![CDATA[<p>本来计划在元旦完成年终总结的，但是因为某些事情耽搁了。不过，无关紧要了，早晚都是总结～</p>
<h2 id="学业"><a href="#学业" class="headerlink" title="学业"></a>学业</h2><p>到今天为止，毕业正好<code>一年五个月零七天</code>。</p>
<p>在学校的时候，懵懵懂懂，啥都学，<code>java</code>、<code>C</code>、<code>C#</code>….都有涉猎了。当然也贪玩，从早贪黑的玩。不过还好就那样顺利的毕业了，没挂过科～</p>
<p>因为已经是<code>20</code>年的事了，这里我就一笔带过，不再多提。</p>
<h2 id="职场"><a href="#职场" class="headerlink" title="职场"></a>职场</h2><p>依稀记得<code>19</code>年的中秋节，面试了第一家公司，做物流货代行业的。</p>
<p>跟着<code>凯哥</code>的步子，进了公司，从实习到转正，一直到<code>21年7月份</code>，<code>一年零十个月</code>，第一份职场生涯结束～</p>
<p>其实从实习到转正，我都收获了很多东西，无论是技术成长、人情世故、还是职场都有～</p>
<p>入职的时候是<code>vue</code>出身的，但是毅然决然学了<code>react</code>，到现在，熟悉的不能再熟悉的一门<code>框架</code>。其实只是想阐述一个道理，用什么不可怕，可怕的是怕学不会。</p>
<p>当然期间也犯过错，受过委屈。但是最终都坚持下来了。犯过错就去改正，受过委屈就态度强硬一点。</p>
<p>……</p>
<p>虽然离职的理由过于牵强，但是懂得都懂～</p>
<p>目前还是比较满意现在的环境的，无论各个方面。</p>
<p>在边完成一部分业务的同时，我可以做很多想做的事情：<code>组件库</code>、<code>脚手架</code>、<code>jekins</code>、<code>微前端</code>、<code>微服务</code>、<code>docker</code>等等。</p>
<p><strong>不需要别人去鞭策我，也不需要别人去催促我做这些额外的事，在做好本职工作的前提下，完善基础建设，这是我的初衷也是为团队发光发亮，幸运的是，团队内部的小伙伴们跟我有一样的契约精神。</strong></p>
<p>这才是技术人该有的生活，真的就是慢慢的达到一种程度就是，做什么业务都没啥难度了，就很无聊，就想给自己给点挑战。</p>
<p>当然，这才是职场生涯的一点点，这只是我的路途中的前戏，只会是起点，但绝不是终点。</p>
<h2 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h2><p>稀稀拉拉读了一些书籍，有读完的，也有正在读的：</p>
<p><strong>阅读中</strong></p>
<p style="display: grid; grid-template-columns: repeat(8, 1fr); grid-gap: 12px;">
<img width="120" style="display: inline-block" height="160" src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2201/Snipaste_2022-01-08_22-22-14.png?x-oss-process=style/HANDLE_IMAGE"/>
<img width="120" height="160" src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2201/Snipaste_2022-01-08_22-23-03.png?x-oss-process=style/HANDLE_IMAGE"/>
<img width="120" height="160" src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2201/Snipaste_2022-01-08_22-32-53.png?x-oss-process=style/HANDLE_IMAGE"/>

</p>

<p><strong>读完</strong></p>
<p style="display: grid; grid-template-columns: repeat(8, 1fr); grid-gap: 12px;">
<img width="120" style="display: inline-block" height="160" src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2201/Snipaste_2022-01-08_22-33-44.png?x-oss-process=style/HANDLE_IMAGE"/>
<img width="120" style="display: inline-block" height="160" src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2201/Snipaste_2022-01-08_22-38-19.png?x-oss-process=style/HANDLE_IMAGE"/>
<img width="120" style="display: inline-block" height="160" src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2201/Snipaste_2022-01-08_22-39-44.png?x-oss-process=style/HANDLE_IMAGE"/>
<img width="120" style="display: inline-block" height="160" src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2201/Snipaste_2022-01-08_22-40-34.png?x-oss-process=style/HANDLE_IMAGE"/>

</p>

<p><strong>小说[读完]</strong></p>
<p style="display: grid; grid-template-columns: repeat(8, 1fr); grid-gap: 12px;">
<img width="120" style="display: inline-block" height="160" src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2201/Snipaste_2022-01-08_22-34-57.png?x-oss-process=style/HANDLE_IMAGE"/>
<img width="120" style="display: inline-block" height="160" src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2201/Snipaste_2022-01-08_22-45-46.png?x-oss-process=style/HANDLE_IMAGE"/>
<img width="120" style="display: inline-block" height="160" src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2201/Snipaste_2022-01-08_22-48-34.png?x-oss-process=style/HANDLE_IMAGE"/>

</p>

<p><strong>小说[在读]</strong></p>
<p style="display: grid; grid-template-columns: repeat(8, 1fr); grid-gap: 12px;">
<img width="120" style="display: inline-block" height="160" src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2201/Snipaste_2022-01-08_22-51-12.png?x-oss-process=style/HANDLE_IMAGE"/>

</p>

<h2 id="电影-电视剧"><a href="#电影-电视剧" class="headerlink" title="电影/电视剧"></a>电影/电视剧</h2><p style="display: grid; grid-template-columns: repeat(8, 1fr); grid-gap: 12px;">
<img width="120" style="display: inline-block" height="170" src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2201/Snipaste_2022-01-08_22-46-55.png?x-oss-process=style/HANDLE_IMAGE"/>
<img width="120" style="display: inline-block" height="170" src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2201/Snipaste_2022-01-08_22-48-02.png?x-oss-process=style/HANDLE_IMAGE"/>
<img width="120" style="display: inline-block" height="170" src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2201/Snipaste_2022-01-08_22-47-33.png?x-oss-process=style/HANDLE_IMAGE"/>

</p>

<h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>偶然的一次机会，认识了那个她，同时也收获了甜甜的爱情～</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2201/Snipaste_2022-01-08_22-57-45.png?x-oss-process=style/HANDLE_IMAGE"></p>
<h2 id="家庭"><a href="#家庭" class="headerlink" title="家庭"></a>家庭</h2><p>父母安康～年末出资带父母做了一次全身体检，体检无大恙。</p>
<h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2201/Snipaste_2022-01-08_23-05-38.png?x-oss-process=style/HANDLE_IMAGE"></p>
<h2 id="MIT"><a href="#MIT" class="headerlink" title="MIT"></a>MIT</h2><p>参与了浩哥发起的<code>Aktiv</code></p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2201/Snipaste_2022-01-08_23-07-45.png?x-oss-process=style/HANDLE_IMAGE"></p>
<p><strong>热爱开源，热爱和一群志同道合的人搞事！</strong></p>
<hr>
<h2 id="明年的计划"><a href="#明年的计划" class="headerlink" title="明年的计划"></a>明年的计划</h2><ul>
<li>每天和浩哥<code>github</code>打卡</li>
<li>备战雅思</li>
<li>备战软考</li>
<li>通关算法</li>
</ul>
<p>当然以上仅仅是前半年的目标，<strong>言必信，行必果</strong>。</p>
<hr>
<p>总之，新的一年，希望大家可以<strong>搞成大事</strong>、<strong>赚到大钱</strong>。</p>
<p>坚持持续学习～最重要的是身体健康！</p>
<p><strong>做自己的主人，主宰自己的命运，成为自己的神灵，救赎自己。</strong></p>
<p>最后，赏心悦目吧，hhhh，<code>JK</code>永远滴神。</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2201/225609-1641221769d623.jpeg?x-oss-process=style/HANDLE_IMAGE"></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>超感人的耳机测评</title>
    <url>/article/super-feeling-ear-face/</url>
    <content><![CDATA[<p><em>文章背景图来源: <code>https://pic.netbian.com/tupian/28989.html</code></em></p>
<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>先短暂说明下，为什么持续两个月时间断更……原因竟然是<code>懒</code>。</p>
<p>是的，就是因为懒，最近这么久也在不断的克服懒惰，感谢浩哥，作为<code>son of flag</code>给了我方向；</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2203/Snipaste_2022-03-06_21-06-34.png?x-oss-process=style/HANDLE_IMAGE"></p>
<p>然后就到我了，下面是我的<code>flag</code>.</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2203/Snipaste_2022-03-06_21-09-06.png?x-oss-process=style/HANDLE_IMAGE"></p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2203/Snipaste_2022-03-06_21-12-19.png?x-oss-process=style/HANDLE_IMAGE"><br><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2203/Snipaste_2022-03-06_21-13-02.png?x-oss-process=style/HANDLE_IMAGE"></p>
<p>坚持半个月，日后也会继续坚持下去，好的习惯是克服懒惰的动力，从懒惰做某件事开始去拒绝懒惰。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><strong>如果你是个土豪，请不要往下看，因为不适合你！！！</strong></p>
<p>接下来，先介绍一下即将要出场的四位选手(以下顺序，不分排名，随机顺序)：</p>
<p><em>图片来源于淘宝、小米商城，最终所有权归原作者所有，<strong>侵删</strong></em></p>
<h6 id="No-1"><a href="#No-1" class="headerlink" title="No.1"></a>No.1</h6><p><strong>漫威<code>T-88</code></strong></p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2203/WechatIMG6.jpeg?x-oss-process=style/HANDLE_IMAGE"></p>
<h6 id="No-2"><a href="#No-2" class="headerlink" title="No.2"></a>No.2</h6><p><strong>Redmi AirDots 3</strong></p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2203/WechatIMG7.jpeg?x-oss-process=style/HANDLE_IMAGE"></p>
<h6 id="No-3"><a href="#No-3" class="headerlink" title="No.3"></a>No.3</h6><p><strong>漫步者 X2</strong></p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2203/WechatIMG8.jpeg?x-oss-process=style/HANDLE_IMAGE"></p>
<h6 id="No-4"><a href="#No-4" class="headerlink" title="No.4"></a>No.4</h6><p><strong>SOUNDPEATS TrueAir2+ 旗舰款</strong></p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2203/WechatIMG9.jpeg?x-oss-process=style/HANDLE_IMAGE"></p>
<p>没错，我都已经收集回来了～</p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2203/WechatIMG10.jpeg?x-oss-process=style/HANDLE_IMAGE"></p>
<h2 id="数据测评"><a href="#数据测评" class="headerlink" title="数据测评"></a>数据测评</h2><table>
<thead>
<tr>
<th>型号</th>
<th>官方指导价</th>
<th>实际售价</th>
<th>规格</th>
<th>续航</th>
<th>音频编码</th>
</tr>
</thead>
<tbody><tr>
<td>漫威<code>T-88</code></td>
<td><code>199</code></td>
<td><code>99</code></td>
<td><code>独立耳机</code></td>
<td><code>20H</code></td>
<td><code>SBC</code></td>
</tr>
<tr>
<td><code>Redmi AirDots 3</code></td>
<td><code>199</code></td>
<td><code>179</code></td>
<td><code>区分主副耳机</code></td>
<td><code>30H</code></td>
<td><code>aptx Adaptive</code></td>
</tr>
<tr>
<td>漫步者 <code>X2</code></td>
<td><code>149</code></td>
<td><code>109</code></td>
<td><code>独立耳机</code></td>
<td><code>28H</code></td>
<td><code>SBC</code></td>
</tr>
<tr>
<td><code>SOUNDPEATS TrueAir2+ 旗舰版</code></td>
<td><code>219</code></td>
<td><code>199</code></td>
<td><code>独立耳机</code></td>
<td><code>25H</code></td>
<td><code>aptx Adaptive</code></td>
</tr>
</tbody></table>
<p>这个测评机的价格，其实还是比较低的，这里解释两个问题：</p>
<ol>
<li>独立耳机 &amp; 区分主副耳机有什么区别？</li>
</ol>
<blockquote>
<p>区别就是<code>AWS</code>协议，再直白点就是：主副耳机其中一个耳机肯定耗电快，独立耳机耗电比例等比。</p>
</blockquote>
<ol start="2">
<li>音频编码有什么作用？</li>
</ol>
<p><em>图片来源于知乎：<a href="https://zhuanlan.zhihu.com/p/265597723">https://zhuanlan.zhihu.com/p/265597723</a></em></p>
<p><img src="https://bigdreamerblog.oss-cn-beijing.aliyuncs.com/blog/img/2203/Snipaste_2022-03-06_21-47-19.png?x-oss-process=style/HANDLE_IMAGE"></p>
<blockquote>
<p>总的来说，从音质上，<code>LHDC</code> ≈ <code>LDAC</code> &gt; <code>aptX</code> &gt; <code>AAC</code> &gt; <code>SBC</code>。</p>
</blockquote>
<hr>
<p>到这里，本次测评基本结束，个人入手感觉，最推荐的是<code>SOUNDPEATS TrueAir2+ 旗舰版</code>，降噪效果<code>Nice</code>，音质效果<code>Nice</code>.</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
</search>
